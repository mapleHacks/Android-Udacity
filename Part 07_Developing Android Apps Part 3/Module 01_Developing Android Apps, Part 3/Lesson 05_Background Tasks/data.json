{
  "data": {
    "lesson": {
      "id": 183184,
      "key": "f5ef4e52-c485-4c85-a26a-3231c17d6154",
      "title": "Background Tasks",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson you'll learn about how to effectively run jobs in the background, create notifications and periodically schedule long running background processes. To explore these topics you'll create a Hydration Reminder app that tells the user to drink water via a notification, even when the app is not running..",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/f5ef4e52-c485-4c85-a26a-3231c17d6154/183184/1516748140098/Background%20Tasks%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/f5ef4e52-c485-4c85-a26a-3231c17d6154/183184/1516748079072/Background%20Tasks%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 206581,
          "key": "0fdcfb9d-31c2-44f7-996b-4119bcc269a6",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0fdcfb9d-31c2-44f7-996b-4119bcc269a6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 213421,
              "key": "738ad16e-acc3-4a3b-9eb0-d757be95d419",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MRpKj3OCh0A",
                "china_cdn_id": "MRpKj3OCh0A.mp4"
              }
            }
          ]
        },
        {
          "id": 206582,
          "key": "99a684b4-8124-4e49-8693-5e0fbe048a93",
          "title": "Running in the Background",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "99a684b4-8124-4e49-8693-5e0fbe048a93",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 213422,
              "key": "14afb423-30d0-47fb-a673-dcc12971713d",
              "title": "Running in the Background",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NTZfNc2UsuM",
                "china_cdn_id": "NTZfNc2UsuM.mp4"
              }
            }
          ]
        },
        {
          "id": 219929,
          "key": "e0a53948-5f0d-4759-be79-4067a29c23d2",
          "title": "Hydration Reminder",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e0a53948-5f0d-4759-be79-4067a29c23d2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220499,
              "key": "ad8d2f0f-1443-41f0-8229-f9519f9e2c14",
              "title": "Hydration Reminder",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yFqcWylrd2U",
                "china_cdn_id": "yFqcWylrd2U.mp4"
              }
            }
          ]
        },
        {
          "id": 219930,
          "key": "ca763d82-cc5a-40c1-8dc5-5022831d6b00",
          "title": "Services",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ca763d82-cc5a-40c1-8dc5-5022831d6b00",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 229736,
              "key": "84c77d57-b096-4c9a-b65a-a7d9d9e1e9a2",
              "title": "Services",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NfK3DPnZRb4",
                "china_cdn_id": "NfK3DPnZRb4.mp4"
              }
            }
          ]
        },
        {
          "id": 219932,
          "key": "eae519be-ec05-46b0-8084-fc571e635ec8",
          "title": "Services vs. Loaders",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eae519be-ec05-46b0-8084-fc571e635ec8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220500,
              "key": "3b7d19c5-eb27-4902-9829-af07149389d6",
              "title": "Services vs Loaders",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uaSxu8V7b8s",
                "china_cdn_id": "uaSxu8V7b8s.mp4"
              }
            }
          ]
        },
        {
          "id": 206585,
          "key": "6eaef5b6-7396-40ac-b0ae-e58d447c2f7f",
          "title": "Quiz: Services vs. Loaders",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6eaef5b6-7396-40ac-b0ae-e58d447c2f7f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 213431,
              "key": "a410a8c7-c778-4bc2-b02a-482752569509",
              "title": "Quiz: Services vs. Loaders",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a410a8c7-c778-4bc2-b02a-482752569509",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Consider these cases.  Which operations would you consider using a service to do? Select all options that apply.",
                "answers": [
                  {
                    "id": "a1479414122573",
                    "text": "Decoding a Bitmap to be Displayed",
                    "is_correct": false
                  },
                  {
                    "id": "a1479414155722",
                    "text": "Updating the Schedule from the Internet",
                    "is_correct": true
                  },
                  {
                    "id": "a1479414212700",
                    "text": "Querying the local database to display in a list",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 219936,
          "key": "99c4abf6-9b5b-45da-bb2b-5b736929b5fd",
          "title": "Starting Services",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "99c4abf6-9b5b-45da-bb2b-5b736929b5fd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220501,
              "key": "4e4812b8-474d-4e2e-93aa-1ab6925b1c7b",
              "title": "Starting Services",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FdZro88WBgo",
                "china_cdn_id": "FdZro88WBgo.mp4"
              }
            },
            {
              "id": 279397,
              "key": "00057e4d-68ca-4acf-b127-1a057e3f951d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<a href=\"https://developer.android.com/guide/components/bound-services.html\" target=\"_blank\">Documentation on Bound Services</a>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 219938,
          "key": "e850e8d6-8121-4559-b08e-88527a58ffb0",
          "title": "Running Services in the Background",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e850e8d6-8121-4559-b08e-88527a58ffb0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220502,
              "key": "06862ea8-2a1e-48c2-b33b-7be7cbb5d9fc",
              "title": "Running Services in the Background",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EljUf1l8JFA",
                "china_cdn_id": "EljUf1l8JFA.mp4"
              }
            }
          ]
        },
        {
          "id": 219939,
          "key": "feb81f04-ab52-4a7b-a54b-879511256537",
          "title": "Intent Services",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "feb81f04-ab52-4a7b-a54b-879511256537",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220503,
              "key": "ff463a6a-35ff-4297-862b-ec3c92c3140f",
              "title": "Intent Services",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1oOuoO1b3T4",
                "china_cdn_id": "1oOuoO1b3T4.mp4"
              }
            }
          ]
        },
        {
          "id": 220003,
          "key": "f0c17b36-4ec9-4f9f-a354-0dd187430abe",
          "title": "Starter Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0c17b36-4ec9-4f9f-a354-0dd187430abe",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220504,
              "key": "71a6b788-ce19-405f-8e3f-a3ee82baecf5",
              "title": "Starter Code",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iOPSDLmi7R4",
                "china_cdn_id": "iOPSDLmi7R4.mp4"
              }
            },
            {
              "id": 220004,
              "key": "10fc705e-c76f-45db-9c82-d873d626d7e1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Pluralization in Android\n\nPart of Android’s robust resource framework involves a mechanism for pluralizing strings called “Quantity Strings”. In the `strings.xml` file for the Hydration Reminder app, you’ll see an example of how pluralization can be used:\n\n```xml\n<plurals name=\"charge_notification_count\">\n   <item quantity=\"zero\">Hydrate while charging reminder sent %d times</item>\n   <item quantity=\"one\">Hydrate while charging reminder sent %d time</item>\n   <item quantity=\"other\">Hydrate while charging reminder sent %d times</item>\n</plurals>\n```\n\nWhen you use the plural in code, you specify a  quantity number. This number specifies what string should be used. In this case:\n\n* if the number is zero, use `<item quantity=\"zero\">`\n* If the number is one, use `<item quantity=\"one\">`\n* otherwise use `<item quantity=\"other\">`\n\nThen in the `MainActivity` we have the following Java code to generate the correct String:\n\n```java\nString formattedChargingReminders = getResources().getQuantityString(R.plurals.charge_notification_count, chargingReminders, chargingReminders);\n```\n\nThe first usage of chargingReminder is the quantity number. It determines which version of the pluralized string to use (you must pass in a number). The second usage of chargingReminder is the number that’s actually inserted into the formatted string.\n\nFor more detail on Quantity Strings, check out the [documentation](https://developer.android.com/guide/topics/resources/string-resource.html#Plurals)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 219940,
          "key": "96c2bcd1-56d8-4f09-8164-21920efb90f2",
          "title": "Quiz: Get the Starter Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "96c2bcd1-56d8-4f09-8164-21920efb90f2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220002,
              "key": "a18bb597-4a4c-4948-8d84-223990591220",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Hydration Reminder Code\nThe code for this app can be found in the [Lesson10-Hydration-Reminder](https://github.com/udacity/ud851-Exercises/tree/student/Lesson10-Hydration-Reminder/) folder of the [Toy App Repository](https://github.com/udacity/ud851-Exercises).\n\nIf you need to a refresher on how the code is organized, please refer to the [concept where we introduced the code flow](https://classroom.udacity.com/courses/ud851/lessons/93affc67-3f0b-4f9b-b3a4-a7a26f241a86/concepts/115d08bb-f114-46fa-b693-5c6ce1445c07).\n\nOnce you have downloaded and are familiar with how the code works, answer the following questions:",
              "instructor_notes": ""
            },
            {
              "id": 219946,
              "key": "aa886482-fa2e-4917-b35a-b72032adf3e6",
              "title": "Question 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "aa886482-fa2e-4917-b35a-b72032adf3e6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the id of the view which triggers `incrementWater` in its `onClick` attribute?",
                "answers": [
                  {
                    "id": "a1481067293522",
                    "text": "ib_water_increment",
                    "is_correct": true
                  },
                  {
                    "id": "a1481067327370",
                    "text": "iv_power_increment",
                    "is_correct": false
                  },
                  {
                    "id": "a1481067334016",
                    "text": "fl_water_increment",
                    "is_correct": false
                  },
                  {
                    "id": "a1481067341787",
                    "text": "tv_water_count",
                    "is_correct": false
                  },
                  {
                    "id": "a1481067348830",
                    "text": "fl_charge_increment",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 219950,
              "key": "bad950cb-3ad0-4f40-819d-98849feb6855",
              "title": "Question 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bad950cb-3ad0-4f40-819d-98849feb6855",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What `PreferenceUtilities` method would you call for adding one to the current water count?",
                "answers": [
                  {
                    "id": "a1481067405371",
                    "text": "`addOneToWater`",
                    "is_correct": false
                  },
                  {
                    "id": "a1481067434007",
                    "text": "`incrementWaterCount`",
                    "is_correct": true
                  },
                  {
                    "id": "a1481067438847",
                    "text": "`increaseWaterDrunk`",
                    "is_correct": false
                  },
                  {
                    "id": "a1481067446604",
                    "text": "`setWaterCount`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 219956,
              "key": "a9d07b2a-8c0f-4320-b021-33f07647a497",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a9d07b2a-8c0f-4320-b021-33f07647a497",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the resource used for the plug image seen in the `main_activity.xml` layout?",
                "answers": [
                  {
                    "id": "a1481067688727",
                    "text": "plug.jpg",
                    "is_correct": false
                  },
                  {
                    "id": "a1481067717241",
                    "text": "ic_plug_grey_80px_vector",
                    "is_correct": false
                  },
                  {
                    "id": "a1481067726752",
                    "text": "ic_power_grey_80px",
                    "is_correct": true
                  },
                  {
                    "id": "a1481067733652",
                    "text": " ic_power",
                    "is_correct": false
                  },
                  {
                    "id": "a1481067740198",
                    "text": " ic_plug_80px",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 219960,
          "key": "b5fefa2c-c349-4a1d-a38d-7468ae2dde49",
          "title": "Plan for Adding an IntentService",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b5fefa2c-c349-4a1d-a38d-7468ae2dde49",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220506,
              "key": "622f3fa1-fea1-4c86-81ef-d991b632d925",
              "title": "Plan for adding an intentservice",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cB4ANn6aF8I",
                "china_cdn_id": "cB4ANn6aF8I.mp4"
              }
            }
          ]
        },
        {
          "id": 206589,
          "key": "e6545460-7e5d-4406-914c-9098947bfa8a",
          "title": "Exercise: Add an IntentService",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e6545460-7e5d-4406-914c-9098947bfa8a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220505,
              "key": "86592ced-d3f9-4676-9d8b-3fade39aa29d",
              "title": "Adding an Intent Service",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fOKh7PbyVyI",
                "china_cdn_id": "fOKh7PbyVyI.mp4"
              }
            },
            {
              "id": 213448,
              "key": "0fc395f9-e24b-41b0-b97b-ebfa369c4eb5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Add an IntentService\n\nIn this exercise, you'll add the ability to increment the water count, using a Service.\n\n### Exercise Code\n**Exercise:** [T10.01-Exercise-IntentServices](https://github.com/udacity/ud851-Exercises/tree/student/Lesson10-Hydration-Reminder/T10.01-Exercise-IntentServices)",
              "instructor_notes": ""
            },
            {
              "id": 206619,
              "key": "87f9b843-faf5-4fc6-a46a-7823d45b3ca8",
              "title": "Exercise: Intent Services",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "87f9b843-faf5-4fc6-a46a-7823d45b3ca8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn. Run through the To-do's on your own.",
                "answers": [
                  {
                    "id": "a1479246718642",
                    "text": "Create the `ReminderTasks` helper class along with the `incrementWaterCount` and `executeTask` methods",
                    "is_correct": true
                  },
                  {
                    "id": "a1479246741306",
                    "text": "Create `WaterReminderIntentService` by overriding an `IntentService`",
                    "is_correct": true
                  },
                  {
                    "id": "a1479246753749",
                    "text": "Increment the water count when `onHandleIntent` gets the `ACTION_INCREMENT_WATER_COUNT`",
                    "is_correct": true
                  },
                  {
                    "id": "a1479246758980",
                    "text": "Register `WaterReminderIntentService` in the manifest",
                    "is_correct": true
                  },
                  {
                    "id": "a1479246770929",
                    "text": "Start the `IntentService` with `ACTION_INCREMENT_WATER_COUNT` from `incrementWater` in `MainActivity`",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 206644,
          "key": "d8aae9f4-0212-4102-befe-cb72233a20d6",
          "title": "Notifications",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d8aae9f4-0212-4102-befe-cb72233a20d6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220507,
              "key": "7e0dbc53-e96d-462c-a8ce-2b38ad167358",
              "title": "Notifications",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "aumSmfmO4GY",
                "china_cdn_id": "aumSmfmO4GY.mp4"
              }
            },
            {
              "id": 213458,
              "key": "ae5a6427-96ea-4e30-b4fb-e14a4ae295f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* [Material Design Guide on Notifications](https://material.google.com/patterns/notifications.html)\n* [Notifications on Android Developer Website](https://developer.android.com/guide/topics/ui/notifiers/notifications.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 415909,
          "key": "8575ae70-664b-4ab7-8f1a-f770ae096b05",
          "title": "Notifications in Oreo",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8575ae70-664b-4ab7-8f1a-f770ae096b05",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 415911,
              "key": "54867b5b-d4c3-490b-8f65-4788bf3f2529",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Since the launch of Android Oreo, there have been a few updates on how Notifications are being displayed to the user as well as how you as a developer should create them.\n\nMake sure to watch this video from the Google Developers channel before proceeding",
              "instructor_notes": ""
            },
            {
              "id": 415912,
              "key": "6cd3cbe1-23d8-4f6d-b7ad-818365cf56b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zGIw4MIJn5o\" frameborder=\"0\" allowfullscreen></iframe>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 206591,
          "key": "c763355c-218d-4a6c-94de-ecc20b8e4fdf",
          "title": "Pending Intents",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c763355c-218d-4a6c-94de-ecc20b8e4fdf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220508,
              "key": "23a451e3-3920-4f5e-a4dc-1c2080fe0c13",
              "title": "Pending Intents",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "IDkdlRVRvAM",
                "china_cdn_id": "IDkdlRVRvAM.mp4"
              }
            }
          ]
        },
        {
          "id": 219963,
          "key": "dd7d98f2-decb-42f0-95c2-7f0da074249d",
          "title": "Exercise: Notifications",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dd7d98f2-decb-42f0-95c2-7f0da074249d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 436046,
              "key": "6d8283fc-770d-4e2f-9a75-8e2d08a52605",
              "title": "Notifications",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "* Here's more information on [Using Big View Styles](https://developer.android.com/training/notify-user/expanded.html)\n* Another useful style is [Big Picture Style Notifications](https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html)",
              "video": {
                "youtube_id": "KkNWEE9BE5c",
                "china_cdn_id": "KkNWEE9BE5c.mp4"
              }
            },
            {
              "id": 220479,
              "key": "78ab3c54-7ab7-4022-a722-483fb9fc4835",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Notifications\n\nIn this exercise you'll create a button that triggers a notification.\n\n### Exercise Code\n**Exercise:** [T10.02-Exercise-CreateNotification](https://github.com/udacity/ud851-Exercises/tree/student/Lesson10-Hydration-Reminder/T10.02-Exercise-CreateNotification)\n\n",
              "instructor_notes": ""
            },
            {
              "id": 220480,
              "key": "1ecbc130-79a1-4088-bbb9-bb2f246910a9",
              "title": "Notification Exercise",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1ecbc130-79a1-4088-bbb9-bb2f246910a9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn. Run through the To-do's on your own.",
                "answers": [
                  {
                    "id": "a1481254141355",
                    "text": "Create a method that makes a `PendingIntent` which will open up the Hydration Reminder app.",
                    "is_correct": true
                  },
                  {
                    "id": "a1481254435552",
                    "text": "Create a method that returns an appropriately sized icon for your notification.",
                    "is_correct": true
                  },
                  {
                    "id": "a1481254524930",
                    "text": "Create a method called `remindUserBecauseCharging` that creates a notification telling the user to drink water.",
                    "is_correct": true
                  },
                  {
                    "id": "a1481254674468",
                    "text": "Add a button which calls the `remindUserBecauseCharging` method.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 206595,
          "key": "c252e2da-8d8c-4f50-82c6-c061d554695e",
          "title": "Notification Actions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c252e2da-8d8c-4f50-82c6-c061d554695e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220510,
              "key": "0828587e-8ac6-4e7e-be7a-6b8682a29f4a",
              "title": "Notification Actions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7Ix1eZTcSv4",
                "china_cdn_id": "7Ix1eZTcSv4.mp4"
              }
            }
          ]
        },
        {
          "id": 206596,
          "key": "78d04f47-4b94-449e-b2f9-d91d52f17090",
          "title": "Exercise: Adding Actions to Notifications",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78d04f47-4b94-449e-b2f9-d91d52f17090",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220511,
              "key": "7f8f15a8-f154-4690-bc46-12a1c16f11d7",
              "title": "Adding Actions to Notifications",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "s0u0XGL1ajk",
                "china_cdn_id": "s0u0XGL1ajk.mp4"
              }
            },
            {
              "id": 220482,
              "key": "cf54de7d-3440-4647-9fcc-a39df0bdb72e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Adding Actions to Notifications\n\nIn this exercise you'll add the ability to record drinking a cup of water straight from the notification **or** to clear away the notification entirely.\n\n### Exercise Code\n**Exercise:** [T10.03-Exercise-NotificationActions](https://github.com/udacity/ud851-Exercises/tree/student/Lesson10-Hydration-Reminder/T10.03-Exercise-NotificationActions)\n",
              "instructor_notes": ""
            },
            {
              "id": 206653,
              "key": "6626f0b3-6478-498c-98a4-e7dd14975486",
              "title": "Exercise: Adding Actions to Notifcations",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6626f0b3-6478-498c-98a4-e7dd14975486",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn!",
                "answers": [
                  {
                    "id": "a1479248694316",
                    "text": "Add the `ACTION_DISMISS_NOTIFICATION` constant in `ReminderUtils`",
                    "is_correct": true
                  },
                  {
                    "id": "a1479248715640",
                    "text": "Add the `clearAllNotifications` method to `NotificationUtils`",
                    "is_correct": true
                  },
                  {
                    "id": "a1479248721545",
                    "text": "Update `ReminderTasks` to add clearAllNotifications to `executeTask` and `incrementWaterCount`",
                    "is_correct": true
                  },
                  {
                    "id": "a1479248736609",
                    "text": "Add the two Action creation methods to `NotificationUtils`",
                    "is_correct": true
                  },
                  {
                    "id": "a1479248743231",
                    "text": "Update the `NotificationBuilder` in `remindUser` to add the two new Actions.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 219965,
          "key": "6a5efe0f-94c6-401d-8b8d-4175c0028151",
          "title": "Foreground Services",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6a5efe0f-94c6-401d-8b8d-4175c0028151",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220512,
              "key": "721d68f7-8a84-4f96-986f-421fd4648e0f",
              "title": "Foreground Services",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xi7i8QztTig",
                "china_cdn_id": "xi7i8QztTig.mp4"
              }
            }
          ]
        },
        {
          "id": 206587,
          "key": "1a672f2c-f7e1-4268-9679-ace9b339b651",
          "title": "Quiz: Application Priority",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1a672f2c-f7e1-4268-9679-ace9b339b651",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 219971,
              "key": "8b0ec495-372a-46c2-9c65-039e29e0cdd5",
              "title": "Application Priority",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mz9w5tup7WA",
                "china_cdn_id": "mz9w5tup7WA.mp4"
              }
            },
            {
              "id": 206673,
              "key": "2b513b37-7c40-47ba-a204-224fe81c3af1",
              "title": "Exercise: Application Priority",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2b513b37-7c40-47ba-a204-224fe81c3af1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Consider these four apps.  Which priority order would the system rank them in?\n\nA) Gmail doing a background mail sync.   \nB) Google Music playing a song in the background.   \nC) The Camera app being used to take a photo.    \nD) Google Maps in the background   ",
                "answers": [
                  {
                    "id": "a1479250129988",
                    "text": "A, B, C, D",
                    "is_correct": false
                  },
                  {
                    "id": "a1479250154352",
                    "text": "B, A, C, D",
                    "is_correct": false
                  },
                  {
                    "id": "a1479250158841",
                    "text": "C, D, B, A",
                    "is_correct": false
                  },
                  {
                    "id": "a1479250165400",
                    "text": "C, B, A, D",
                    "is_correct": true
                  },
                  {
                    "id": "a1479250198947",
                    "text": "D, A, B, C",
                    "is_correct": false
                  },
                  {
                    "id": "a1479250205371",
                    "text": "D, C, B, A",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 220005,
          "key": "0da55fa1-fd46-4af1-8608-24a994f0dcf5",
          "title": "Issuing Reminders",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0da55fa1-fd46-4af1-8608-24a994f0dcf5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220513,
              "key": "2c3ea0f0-685f-4625-b9ae-df7ddd17cfef",
              "title": "Issuing Reminders",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "R2wKySIAXuM",
                "china_cdn_id": "R2wKySIAXuM.mp4"
              }
            }
          ]
        },
        {
          "id": 220006,
          "key": "bd589300-dbc0-45aa-810d-c8e80f650175",
          "title": "Scheduling Jobs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bd589300-dbc0-45aa-810d-c8e80f650175",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858488,
              "key": "0eb791d2-3776-431f-981c-6312ca119649",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Attention Students:** [WorkManager](https://developer.android.com/topic/libraries/architecture/workmanager) is now the preferred way to schedule jobs for Android apps. You can learn more about how to use WorkManager in our course [Developing Android Apps with Kotlin](https://www.udacity.com/course/developing-android-apps-with-kotlin--ud9012).",
              "instructor_notes": ""
            },
            {
              "id": 220514,
              "key": "865ba085-fc3b-4b24-9ed4-5d1efb395dba",
              "title": "Scheduling Jobs",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bTFIr9pWnCg",
                "china_cdn_id": "bTFIr9pWnCg.mp4"
              }
            },
            {
              "id": 220007,
              "key": "b5f66a93-2580-4d5d-83d8-69c22218f50c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## FirebaseJobDispatcher Sample Code\n\n```\nDriver driver = new GooglePlayDriver(context);\nFirebaseJobDispatcher dispatcher = new FirebaseJobDispatcher(driver);\n\nJob myJob = dispatcher.newJobBuilder()\n    // the JobService that will be called\n    .setService(MyJobService.class)\n    // uniquely identifies the job\n    .setTag(\"complex-job\")\n    // one-off job\n    .setRecurring(false)\n    // don't persist past a device reboot\n    .setLifetime(Lifetime.UNTIL_NEXT_BOOT)\n    // start between 0 and 15 minutes (900 seconds)     \n    .setTrigger(Trigger.executionWindow(0, 900))\n    // overwrite an existing job with the same tag\n    .setReplaceCurrent(true)\n    // retry with exponential backoff \n    .setRetryStrategy(RetryStrategy.DEFAULT_EXPONENTIAL)\n    // constraints that need to be satisfied for the job to run\n    .setConstraints(\n        // only run on an unmetered network\n        Constraint.ON_UNMETERED_NETWORK,\n        // only run when the device is charging\n        Constraint.DEVICE_CHARGING\n    )\n    .build();\n```\n\nFor more information, check out the [FirebaseJobDispatcher README](https://github.com/firebase/firebase-jobdispatcher-android). This also includes more sample code.\n\n\n## What is Google Play Services\n\nYou might be wondering what's up with the `GooglePlayDriver`. `FirebaseJobDispatcher` has a dependency on Google Play Services, which is why you need a `GooglePlayDriver`. So what is Google Play Services?\n\n[Google Play Services](https://developers.google.com/android/guides/overview) is  [app](https://play.google.com/store/apps/details?id=com.google.android.gms&hl=en) that Google maintains which comes pre-installed on and runs in the background on many, many phones. It is essentially a collection of Services that your app can use to leverage the power of Google products. If the user has the Google Play Services apk installed (and many do) you can use Google Play Services Libraries to easily do things like use the Places API to know where your user is or integrate Google sign in. FirebaseJobDispatcher is one of the many services you can take advantage of via Google Play Services.\n\nGoogle choose to distribute these services as an installable apk so that updates to the services are not dependent on carrier or OEM system image updates. In general, devices running Android 2.3 (API level 9) or later and have the Google Play services app installed receive updates within a few days. \n\n\n## Google Play Services Udacity Courses\nThere are several Udacity courses on how to use Google Play Services features, such as Location services and Maps.\n* [Google Location Services](https://www.udacity.com/course/google-location-services-on-android--ud876-1)\n* [Google Analytics](https://www.udacity.com/course/google-analytics-for-android--ud876-2)\n* [Google AdMob](https://www.udacity.com/course/monetize-your-android-app-with-ads--ud876-3)\n* [Google Maps](https://www.udacity.com/course/add-google-maps-to-your-android-app--ud876-4)\n\n\n## Installing Google Play Services\n\nTo test your app when using the Google Play services SDK, you must use either:\n\n* A compatible Android device that runs Android 2.3 or higher and includes Google Play Store.\n* The Android emulator with an AVD that runs the Google APIs platform based on Android 4.2.2 or higher.\n\nYou can install Google Play Services on your physical device via the [Google Play Store](https://play.google.com/store/apps/details?id=com.google.android.gms&hl=en).\n\nTo get Google Play Services on an emulator, you first need to make sure you have Google Play Services installed in the SDK manager:",
              "instructor_notes": ""
            },
            {
              "id": 220491,
              "key": "8a44818e-472f-4bd6-b034-dc1ed396ef55",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584a3d92_downloadgps/downloadgps.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8a44818e-472f-4bd6-b034-dc1ed396ef55",
              "caption": "",
              "alt": null,
              "width": 596,
              "height": 167,
              "instructor_notes": null
            },
            {
              "id": 220492,
              "key": "ab11abec-7e14-4209-9575-23b935a897aa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Then you need to create an emulator that uses the **Google APIs**:",
              "instructor_notes": ""
            },
            {
              "id": 220493,
              "key": "d3060b03-9db1-425e-a8a9-40d58c7bf4ab",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584a3df4_includegoogleapis1/includegoogleapis1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d3060b03-9db1-425e-a8a9-40d58c7bf4ab",
              "caption": "",
              "alt": null,
              "width": 835,
              "height": 155,
              "instructor_notes": null
            },
            {
              "id": 220494,
              "key": "0387994b-c2c6-43f5-89d6-bbab1ba38975",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What if Google Play Services is not Available?\n\nIn this class we are only covering `FirebaseJobDispatcher`. Depending on where you're located and who your users are, you might not have access to the Play Store to download Google Play Services. If this is the case, you can use an alternative to FirebaseJobDispatcher known as [android-job](https://github.com/evernote/android-job). Android-job is very similar to FirebaseJobDispatcher, but it is not a Google maintained repository and it only offers compatibility back to API 14. The FirebaseJobDispatcher documentation contains a [comparison table](https://github.com/firebase/firebase-jobdispatcher-android#comparison-to-other-libraries) that you can use when making this decision. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 220008,
          "key": "ce41b95f-eaae-4503-b9f3-65f5f98161b4",
          "title": "Exercise: Adding a JobService",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce41b95f-eaae-4503-b9f3-65f5f98161b4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858496,
              "key": "a2242b74-5fd9-458f-a218-6ef44a3b6755",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Attention Students:** [WorkManager](https://developer.android.com/topic/libraries/architecture/workmanager) is now the preferred way to schedule jobs for Android apps. You can learn more about how to use WorkManager in our course [Developing Android Apps with Kotlin](https://www.udacity.com/course/developing-android-apps-with-kotlin--ud9012).",
              "instructor_notes": ""
            },
            {
              "id": 321496,
              "key": "cffc9107-a6da-4551-82b2-1a6e03499369",
              "title": "Ud853 L010 A19 Q Exercise- Adding A JobService 5:17 Re-Edit",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sREZc1CXg2Q",
                "china_cdn_id": "sREZc1CXg2Q.mp4"
              }
            },
            {
              "id": 220483,
              "key": "9ec05753-a99d-4515-827c-5d18387c5731",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Adding a JobService\n\n**Note: ** There is a subtle error in the video above. For the classes `JobService` and `JobParameters` you want to use the classes from ` com.firebase.jobdispatcher.JobService`. You **DO NOT** want to use`import android.app.job.JobService`. The latter is used for `JobScheduler` and remember, we're using `FirebaseJobDispatcher` because it is compatible with older versions of Android. \n\nThis is the first part of a two part exercise. In this exercise you will make a `JobService`. In the next exercise you will schedule it using [FirebaseJobDispatcher](https://github.com/firebase/firebase-jobdispatcher-android).\n\n### Exercise Code\n**Exercise:** [T10.04-Exercise-PeriodicSyncWithJobDispatcher](https://github.com/udacity/ud851-Exercises/tree/student/Lesson10-Hydration-Reminder/T10.04-Exercise-PeriodicSyncWithJobDispatcher)",
              "instructor_notes": ""
            },
            {
              "id": 220484,
              "key": "120dc7c0-04b1-48f6-b3d7-205c79cc95b8",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "120dc7c0-04b1-48f6-b3d7-205c79cc95b8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn. Run through the To-do's on your own.",
                "answers": [
                  {
                    "id": "a1481255449885",
                    "text": "Add a new task in `ReminderTasks` for issuing the charging reminder",
                    "is_correct": true
                  },
                  {
                    "id": "a1481255522980",
                    "text": "Create `WaterReminderFirebaseJobService`, a class which extends `JobService` and runs the charging reminder task off of the main thread",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 220011,
          "key": "5215ff23-343f-49a9-9684-cf8b9084cfb7",
          "title": "Exercise: Schedule with FirebaseJobDispatcher",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5215ff23-343f-49a9-9684-cf8b9084cfb7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858498,
              "key": "0e35621f-946b-4501-a8bd-516e296c47a0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Attention Students:** [WorkManager](https://developer.android.com/topic/libraries/architecture/workmanager) is now the preferred way to schedule jobs for Android apps. You can learn more about how to use WorkManager in our course [Developing Android Apps with Kotlin](https://www.udacity.com/course/developing-android-apps-with-kotlin--ud9012).",
              "instructor_notes": ""
            },
            {
              "id": 322102,
              "key": "3e62fbd1-10d4-48ba-9304-99847646d20f",
              "title": "Exercise: Schedule With FirebaseJobDispatcher",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uxV9Fx1g6J4",
                "china_cdn_id": "uxV9Fx1g6J4.mp4"
              }
            },
            {
              "id": 220485,
              "key": "bf4c6e68-f88d-42a7-b5e4-2188e320517a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Schedule with FirebaseJobDispatcher\n\nThis is the second part of a two part exercise. In this exercise you will schedule  the `WaterReminderFirebaseJobService` you made in the last exercise with [FirebaseJobDispatcher](https://github.com/firebase/firebase-jobdispatcher-android). You'll schedule it to run so that:\n\n* It runs every 15 minutes with a flex-time window of 15 minutes\n* It runs only if the phone is charging\n* It runs forever after it's schedule, even if the user reboots the device\n\n\n\n### Exercise Code\n**Note:** You should continue working off of the code you created in the last exercise. The code below is the exercise code from the start of this two part exercise.\n\n**Exercise:** [T10.04-Exercise-PeriodicSyncWithJobDispatcher](https://github.com/udacity/ud851-Exercises/tree/student/Lesson10-Hydration-Reminder/T10.04-Exercise-PeriodicSyncWithJobDispatcher)",
              "instructor_notes": ""
            },
            {
              "id": 220486,
              "key": "31fea585-e1ea-4e81-8635-893a7db9f306",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "31fea585-e1ea-4e81-8635-893a7db9f306",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn. Run through the To-do's on your own.",
                "answers": [
                  {
                    "id": "a1481256020390",
                    "text": "Schedule the `WaterReminderFirebaseJobService` with `FirebaseJobDispatcher`",
                    "is_correct": true
                  },
                  {
                    "id": "a1481256256067",
                    "text": "Remove the button and `testNotification` method",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 220012,
          "key": "9ee9ced0-9cb3-4909-83f2-2e5be04b1e8e",
          "title": "Broadcast Receivers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9ee9ced0-9cb3-4909-83f2-2e5be04b1e8e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 229738,
              "key": "7936a7c0-2066-4144-ab42-06757ffa0e4e",
              "title": "Broadcast Receivers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DTOwxXnDz9U",
                "china_cdn_id": "DTOwxXnDz9U.mp4"
              }
            }
          ]
        },
        {
          "id": 220013,
          "key": "44d8ed97-7091-45c1-b8ad-0f4dfd42c256",
          "title": "Exercise: Show When Charging",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "44d8ed97-7091-45c1-b8ad-0f4dfd42c256",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 409936,
              "key": "6f267a6c-3c7a-4663-b42b-2e722d79037c",
              "title": "Show When Charging",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DCYdI2If_o0",
                "china_cdn_id": "DCYdI2If_o0.mp4"
              }
            },
            {
              "id": 220487,
              "key": "b5d4f376-570c-4768-ad54-caae80ca7844",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Show When Charging\n\nIn this exercise you'll make the plug icon change from pink to grey when the app is in the foreground when you plug and unplug the device. Debugging plugging and unplugging the device can be hard on an emulator or live phone. Because of this, you can use the [Android Debug Bridge](https://developer.android.com/studio/command-line/adb.html) to simulate the phone being plugged and unplugged without actually doing the plugging and unplugging. This is described below.\n\n**Note:** At the end of this exercise your Hydration Reminder app will contain a small bug - if the phone is plugged in or unplugged when the app is **not** open, the UI will not update. This is because the dynamic broadcast receiver only receives events when the app is in the foreground. We'll be fixing this in the next exercise.\n\n\n## Setup ADB\n\nThe Android Debug Bridge, or **adb** as it is affectionately called, is a command line tool. This means that you should be comfortable working in a terminal or shell to use this program. We touched on it briefly [in the first lesson](https://classroom.udacity.com/courses/ud851/lessons/93affc67-3f0b-4f9b-b3a4-a7a26f241a86/concepts/17476436-0b3e-46e3-a858-36d1e35b4491#). The adb program is stored in your android SDK folder in a subfolder called **platform-tools**. You can find where your SDK is by going to the SDK manager and looking at the SDK location, as shown below:",
              "instructor_notes": ""
            },
            {
              "id": 220488,
              "key": "b2727a69-468d-4885-baa0-50a9d05b8851",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584a31e3_androidsdk/androidsdk.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b2727a69-468d-4885-baa0-50a9d05b8851",
              "caption": "",
              "alt": null,
              "width": 861,
              "height": 289,
              "instructor_notes": null
            },
            {
              "id": 220489,
              "key": "a91331a0-2fbe-4ff9-a9f1-b483f886a6be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Once you have the sdk location, you can use adb by typing:\n\n```bash\n<YOUR SDK LOCATION>/platform-tools/adb\n```\n\nIf you've added commands to your $PATH before, adb is a great one to add. \n\n## Helpful adb Commands\n\nTo simulate the phone being unplugged from usb charging you can use:\n\n```bash\nadb shell dumpsys battery set usb 0\n```\n\nor if you're on a device Android 6.0 or higher you can use:\n\n```bash\nadb shell dumpsys battery unplug\n```\n\nTo \"plug\" the phone back in, just reset it's charging status using:\n\n```bash\nadb shell dumpsys battery reset\n```\n\n\n\n\n### Exercise Code\n**Exercise:** [T10.05-Exercise-ChargingBroadcastReceiver](https://github.com/udacity/ud851-Exercises/tree/student/Lesson10-Hydration-Reminder/T10.05-Exercise-ChargingBroadcastReceiver)",
              "instructor_notes": ""
            },
            {
              "id": 220490,
              "key": "5ba4e9d0-bd1c-4db7-9a27-1f57379ff178",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5ba4e9d0-bd1c-4db7-9a27-1f57379ff178",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn. Run through the To-do's on your own.",
                "answers": [
                  {
                    "id": "a1481258137955",
                    "text": "Create the `showCharging` method which switches the plug icon between grey and pink.",
                    "is_correct": true
                  },
                  {
                    "id": "a1481258242993",
                    "text": "Create an intent filter that is triggered when the device is charging or not charging.",
                    "is_correct": true
                  },
                  {
                    "id": "a1481258560064",
                    "text": "Create a broadcast receiver called `mChargingReceiver` that updates the UI to pink if it was triggered because the phone was charging and grey otherwise",
                    "is_correct": true
                  },
                  {
                    "id": "a1481258606394",
                    "text": "Create and register this broadcast receiver with the intent filter",
                    "is_correct": true
                  },
                  {
                    "id": "a1481258641305",
                    "text": "Cleanup the `BroadcastReceiver` in `onPause`",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 220014,
          "key": "8c074bea-0ad1-46aa-ae51-b41b8e1943d3",
          "title": "Exercise: Getting the Current Battery State",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8c074bea-0ad1-46aa-ae51-b41b8e1943d3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220495,
              "key": "07f690e0-5be0-4958-aa24-e524a6819090",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Getting the Current Battery State\n\nAs mentioned, our code currently contains a bug. Our app adds and removes the dynamic broadcast receiver in `onResume` and `onPause`. When the app is not visible, the plug's image will not update. This can lead to the plug sometimes having the incorrect image when the app starts.\n",
              "instructor_notes": ""
            },
            {
              "id": 220496,
              "key": "48f5e907-3c13-4d63-91d7-9babb2ba03f7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584a40d0_lifecycle/lifecycle.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/48f5e907-3c13-4d63-91d7-9babb2ba03f7",
              "caption": "",
              "alt": null,
              "width": 674,
              "height": 380,
              "instructor_notes": null
            },
            {
              "id": 220497,
              "key": "4c6cab56-7bf4-404d-b90e-c15a760dcb9c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now we could move the code to dynamically add and remove the broadcast receiver in different lifecycle methods, for example `onCreate` and `onDestroy`, but this would cause us to waste cycles swapping around an image which isn't even on screen. A better approach is to check what the current battery state is when the app resumes and update the image accordingly.\n\nThere are two ways to do this, depending on whether you're on API level 23+ or before.\n\n## Getting Charging State on API level 23+\n\nTo get the current state of the battery on API level 23+, simply use the battery manager system service:\n\n```java\nBatteryManager batteryManager = (BatteryManager) getSystemService(BATTERY_SERVICE);\nboolean isCharging = batteryManager.isCharging();\n```\n\n## Getting Charging State with a Sticky Intent\n\nPrior to Android 23+ you needed to use a sticky intent to get battery state. As we've seen, a normal, broadcasted intent will be broadcasted, possibly caught by an intent filter, and then disspear after it is processed. A sticky intent is a broadcast intent that sticks around, allowing your app to access it at any point and get information from the broadcasted intent. In Android, a sticky intent is where the current battery state is saved.\n\nYou don't need a broadcast receiver for a sticky intent, but you use similar looking code to registering a receiver:\n\n```java\nIntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);\nIntent batteryStatus = context.registerReceiver(null, ifilter);\n```\n\nNotice how `registerReceiver` is used, but instead of passing in a broadcast receiver, `null` is passed. The intent filter here is the intent filter for the **sticky intent**  [Intent.ACTION_BATTERY_CHANGED](https://developer.android.com/reference/android/content/Intent.html#ACTION_BATTERY_CHANGED). The `registerReceiver` method will return an intent, and it is that intent which has all of the battery information, which you can use:\n\n```java\nboolean isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING || status == BatteryManager.BATTERY_STATUS_FULL;\n```\nFor more information on how to getting information about the battery, check out the [Monitoring the Battery Level and Charging State documentation](https://developer.android.com/training/monitoring-device-state/battery-monitoring.html).\n\nNow that you know how to get battery state, you should be able to complete the following exercise and fix the bug. The code is below. \n\n**Note:** If you need to check whether the user is on API 23+, you can use the following code:\n\n```java\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\n```\n\n### Exercise Code\n**Exercise:** [T10.06-Exercise-StickyBroadcastForCharging](https://github.com/udacity/ud851-Exercises/tree/student/Lesson10-Hydration-Reminder/T10.06-Exercise-StickyBroadcastForCharging)\n\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 220498,
              "key": "349dffb3-d4d7-41b2-bb06-309338cdc31f",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "349dffb3-d4d7-41b2-bb06-309338cdc31f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn. Run through the To-do's on your own.",
                "answers": [
                  {
                    "id": "a1481262665756",
                    "text": "If the user is on an API 23+ device, use the BatteryManager's `isCharging` method and update the plug image",
                    "is_correct": true
                  },
                  {
                    "id": "a1481262827643",
                    "text": "For older phones, use the `Intent.ACTION_BATTERY_CHANGED` sticky intent to get the charging status and update the plug image",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 220016,
          "key": "7bbf9fc5-7504-4adc-b2dd-9afd0d0bd6c5",
          "title": "Syncing Sunshine",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7bbf9fc5-7504-4adc-b2dd-9afd0d0bd6c5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220519,
              "key": "c192634f-e9a9-4add-919c-e35a3c6b85e8",
              "title": "Syncing Sunshine",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-u6UBNG2qSs",
                "china_cdn_id": "-u6UBNG2qSs.mp4"
              }
            }
          ]
        },
        {
          "id": 206597,
          "key": "05751ff9-df01-42e9-9cb3-5c8a2904d6b5",
          "title": "Exercise: Synchronizing The Weather",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "05751ff9-df01-42e9-9cb3-5c8a2904d6b5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220471,
              "key": "0d0e267b-0b69-4a42-82dc-7259a93ae77a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This process is going to be very similar to the one we followed when we created our toy app for this lesson. First, we’re going to create a class that represents the “task” we’re going to perform. Then, we’ll create and register an IntentService that will be able to perform that task. Next, we’ll create a class to handle all of our synchronization. Once that’s done, we can move on to rewiring the app to work with our new synchronization strategy. \n\n**Create SunshineSyncTask**\n\n* (1) In order to keep all of our code organized, go ahead and create a class called ```SunshineSyncTask```.\n* (2) Within that class, we’re just going to write one method. This method is going to be the main “task” of Sunshine.\n* (3) Call this method ```syncWeather```, and within it, move the logic that was previously in our AsyncTaskLoader for loading the weather data. \n* (4) If you fetch valid results, delete the old weather data and insert the new data. \n\n**Create and Register SunshineSyncIntentService**\n\nNext, we’ll need a class to handle backgrounding our syncTask. IntentServices are perfect for one off tasks that need to be handled in the background, so we’ll create one here. \n\n* (1) Create ```SunshineSyncIntentService``` class and set it to extend ```IntentService```. \n* (2) Next, create a constructor that calls super and passes the name of this class as a string. \n* (3) Finally, override ```onHandleIntent```. Within it, we’ll call SunshineSyncTask.syncWeather\n\n**Create SunshinesyncUtils**\n\nNow that we have a way to sync the weather and a way to handle backgrounding that sync, let’s get everything wired up. For that, we’ll create a class called ```SunshineSyncUtils```. \n\n* (1) Inside we’ll create a ```startImmediateSync``` method that will start the IntentService and force an immediate synchronization when called.",
              "instructor_notes": ""
            },
            {
              "id": 206662,
              "key": "87fc8c10-c63d-485f-98a8-42ae2d184bf6",
              "title": "Exercise: Smarter Sunshine Syncing 1",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "87fc8c10-c63d-485f-98a8-42ae2d184bf6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Alright, now it's your turn to create all the synchronization classes and hook them up in this exercise. Follow Sunshine exercise 10.01 - SynchronizingTheWeather\n\n\n### Exercise Code\n**Exercise:** [S10.01-Exercise-SynchronizingTheWeather](https://github.com/udacity/ud851-Sunshine/tree/student/S10.01-Exercise-SynchronizingTheWeather)",
                "answers": [
                  {
                    "id": "a1479248891646",
                    "text": "Create the SunshineSyncTask, and fill out the syncWeather method",
                    "is_correct": true
                  },
                  {
                    "id": "a1479248931688",
                    "text": "Create the SunshineSyncIntentService, and have it call syncWeather  ",
                    "is_correct": true
                  },
                  {
                    "id": "a1479248942723",
                    "text": " Add the sync service to the manifest",
                    "is_correct": true
                  },
                  {
                    "id": "a1479248949622",
                    "text": "Create SunshineSyncUtils with the startImmediateSync method",
                    "is_correct": true
                  },
                  {
                    "id": "a1479248957224",
                    "text": "Call startImmediateSync from SettingsFragment if the location changes",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 220472,
          "key": "bd6b065c-7753-451b-98d7-9eb637e41c4d",
          "title": "Exercise: SmarterSyncing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bd6b065c-7753-451b-98d7-9eb637e41c4d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220473,
              "key": "16ab1fe6-5859-4852-874d-3eada3120970",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This Exercise is all about optimizing the synchronization process that was made in the previous exercise. It’s best practice to not initialize things more than once, so for that, we will make sure that startImmediateSync will only get called once when the app starts and only if the database was empty.\n\n** To do so, inside SunshineSyncUtils class: **\n\n* (1) Create a boolean flag called ```sInitialized```. This will be mainly used as a safeguard to prevent calling the synchronize method more than once.\n* (2) Next create an ```initialize``` method that will use that boolean to guarantee that ```startImmediateSync``` is called only when necessary!\n* (3) Within it, don’t do any work if the ```sInitialized``` flag is already set to true. If it isn’t set to true, we want to check to see if our ContentProvider is empty, in case for example the app was just freshly installed and had no data stored yet!.\n* (4) To check if the ContentProvider is empty, simply run a query and get the result count, but do so on a background thread using an ```AsyncTask```.\n* (5) If the ContentProvider is in fact empty, go ahead and call ```startImmediateSync```.",
              "instructor_notes": ""
            },
            {
              "id": 220474,
              "key": "1bea6407-c46e-44b8-9f4d-ba7bc92ea250",
              "title": "Exercise: SmarterSyncing",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1bea6407-c46e-44b8-9f4d-ba7bc92ea250",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn to optimize the initialization process of our SunshineSyncUtil class. Follow the TODOs in this exercise and check the steps below when you're done.\n\n### Exercise Code\n**Exercise:** [S10.02-Exercise-SmarterSyncing](https://github.com/udacity/ud851-Sunshine/tree/student/S10.02-Exercise-SmarterSyncing)",
                "answers": [
                  {
                    "id": "a1481246627065",
                    "text": "Create a new method in SunshineSyncUtil called initialize",
                    "is_correct": true
                  },
                  {
                    "id": "a1481246732073",
                    "text": "Create and use a static boolean that will only be set when initialize is called for the first time",
                    "is_correct": true
                  },
                  {
                    "id": "a1481246772334",
                    "text": "Inside initialize, if the boolean was false, start an AsyncTask to query the database",
                    "is_correct": true
                  },
                  {
                    "id": "a1481246814113",
                    "text": "If the database was empty, call startImmediateSync and to fill the database with data",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 206665,
          "key": "3ac594fa-2597-4956-ae0e-99706ceb206e",
          "title": "Exercise: Sunshine FirebaseJobDispatcher",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3ac594fa-2597-4956-ae0e-99706ceb206e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220475,
              "key": "e163d6a8-023b-4d81-9767-d1b64ffe8a04",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Syncing on demand is great, but don’t we want to continuously update the data for our users, even when the app isn’t in the foreground? After all, who wants to sit and wait for their weather data anymore? I know I certainly don’t! Now that we’ve learned about FirebaseJobDispatcher, let’s make use of it in Sunshine!\n\n**Add the FirebaseJobDispatcher dependency**\n\nAs with any dependency, we’ll need to add FirebaseJobDispatcher to our project. That’s going to be step one here.\n\n**Create our FirebaseJobService**\n\nNext, we need to create the Service that FirebaseJobDispatcher runs when it, well, runs our service! \n\n* (1) Let’s create a ```jobdispatcher.JobService``` called ```SunshineFirebaseJobService```. It’s important that we verify that we’ve imported ```jobdispatcher.JobService``` rather than the Android framework’s ```JobService```, because if you do, you’ll definitely have some headaches. Double and triple check that please. \n* (2) Within your Service, override ```onStartJob``` and call to our ```SunshineSyncTask.syncWeather``` method in the background.\n* (3) Once the ```syncWeather``` method finishes, call ```jobFinished```, passing the JobParameters argument from ```onStartJob``` as well as a false value to signify that we don’t have any more work to do. \n* (4) Now, to clean up any mess that may be caused by the framework cancelling our jobs, override ```onStopJob```, and stop our background thread that was started in ```onStartJob```. \n* (5) Then, return ```true``` to tell the system, “Yes please, we’d like to be rescheduled to finish that work that we were doing when you so rudely interrupted us.”\n\n**Declare our newly created Service in the Manifest**\n\nAlthough ```FirebaseJobDispatcher``` JobServices have some cool features, they are still one of those main four components of the Android framework that need to be declared in the **Manifest**. Go ahead and do that now, or your app will crash when ```FirebaseJobDispatcher``` attempts to run your service. \n\n**Modify SunshineSyncUtils**\n\nWe created ```SunshineSyncUtils``` in the last lesson, and we’ll finish it up here. \n\n* (1) Add constant values to represent how frequently, and with what timeframe, we will perform our weather synchronization. Every three to four hours is a good rule of thumb here. \n* (2) While we’re at it, let’s add a tag to identify our sync job. Call it ```SUNSHINE_SYNC_TAG```. \n* (3) After that, create the method that builds and dispatchers our Job, and then call that method from the ```initialize``` method (only if the method hasn’t been previously initialized).",
              "instructor_notes": ""
            },
            {
              "id": 208306,
              "key": "d0d855fe-7421-4407-be51-81f5f359e733",
              "title": "Exercise: Sunshine Background Syncing",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d0d855fe-7421-4407-be51-81f5f359e733",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now that we’ve learned about FirebaseJobDispatcher, let’s make use of it in Sunshine! Follow the TODOs in this coding exercise and check the steps below as your done.\n\n### Exercise Code\n**Exercise:** [S10.03-Exercise-FirebaseJobDispatcher](https://github.com/udacity/ud851-Sunshine/tree/student/S10.03-Exercise-FirebaseJobDispatcher)",
                "answers": [
                  {
                    "id": "a1479323880270",
                    "text": "Add the FirebaseJobDispatcher Gradle dependency",
                    "is_correct": true
                  },
                  {
                    "id": "a1479323913034",
                    "text": "Create a SunshineFirebaseJobService that calls syncWeather on a Thread.",
                    "is_correct": true
                  },
                  {
                    "id": "a1479323929300",
                    "text": "Add the SunshineFirebaseJobService to the manifest",
                    "is_correct": true
                  },
                  {
                    "id": "a1479323938161",
                    "text": " In SunshineSyncUtils, fill out the scheduleFirebaseJobDispatcherSync and add a call to it in the initialize function",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 206667,
          "key": "7f2d0cbd-0c0e-441d-b1d2-380a13bded23",
          "title": "Exercise: Sunshine Notifications",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7f2d0cbd-0c0e-441d-b1d2-380a13bded23",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220476,
              "key": "fff1edfe-98ee-431a-b775-a107d8eb715c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Fill out NotificationUtils**\n\nWe’ve started this for you, as there is some code that simply has nothing to do with creating notifications, and rather just accessing our data. We wanted you to get right into it, so let's do just that. \n\n* (1) Create a constant int identifier for our notification. This can be used later to access the notification. Very useful for updates and for cancelling ongoing notifications, things like that. \n* (2) Next, create an Intent with the proper Uri to start the ```DetailActivity```. \n* (3) We want to navigate back to the ```MainActivity``` from the ```DetailActivity``` if the user clicks the Notification and then clicks back, so use ```TaskStackBuilder``` for that. \n* (4) Finally, assign that intent to the ```NotificationBuilder``` object so that when the user clicks the notification, it is fired off. \n* (5) In order to notify the user, we need a reference to the ```NotificationManager```, so use ```getSystemService``` to do so.\n* (6) Now that everything is ready, notify the user and also save the time at which we showed this notification. Notifications are totally super awesome, but we don’t want to annoy our users with too many of them. \n\n**Bools and default values**\n\nWe’ll have a preference for whether or not to show notifications. The default value for this preference will be true, but we don’t want to just hard code that value. \n\n* Create ```bools.xml``` under ```res/values``` and within it, create a boolean value set to ```true```. \n\n**Should we notify the user when we sync the data?**\n\nUsing ```FirebaseJobDispatcher```, we plan on updating the data from 6 to 8 times a day, depending on exactly when the system decides that’s best. We don’t want to send the user that many notifications, though! \n\n* Within ```SunshineSyncTask```, first check to see if notifications are enabled at all. If they are, we’ll also need to check to see when the last time we notified the user was. If it was less than a day ago, it’s better that we hold off, and just keep our user happy that her weather data is up to date and ready to be displayed as soon as she wants it!\n\n** Android O **\n\nThe launch of Android O might cause some functionality in the solution code to not work as expected. Unfortunately Sunshine from this point onward will not be maintained.",
              "instructor_notes": ""
            },
            {
              "id": 206668,
              "key": "d6d02b05-4c71-4430-8c6b-abd3fb607bb8",
              "title": "Exercise: Sunshine Notifications",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d6d02b05-4c71-4430-8c6b-abd3fb607bb8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn. Follow the TODOs in this coding exercise and check the steps below as your done.\n\n### Exercise Code\n**Exercise:** [S10.04-Exercise-Notifications](https://github.com/udacity/ud851-Sunshine/tree/student/S10.04-Exercise-Notifications)",
                "answers": [
                  {
                    "id": "a1479249479221",
                    "text": "Fill out the NotifyUserOfNewWeather method",
                    "is_correct": true
                  },
                  {
                    "id": "a1479249506928",
                    "text": "Call NotifyUserOfNewWeather from syncWeather in SunshineSyncTask",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 206600,
          "key": "1f3d6cd9-867d-434f-bb69-7199f297403d",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f3d6cd9-867d-434f-bb69-7199f297403d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 213429,
              "key": "66368df2-e755-4d62-ae6e-7a293c812b41",
              "title": "Conclusion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hcozUzCnWBo",
                "china_cdn_id": "hcozUzCnWBo.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}