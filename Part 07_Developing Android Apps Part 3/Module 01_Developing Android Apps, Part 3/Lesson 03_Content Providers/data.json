{
  "data": {
    "lesson": {
      "id": 183182,
      "key": "950e6939-1786-4659-89de-5af2dec70716",
      "title": "Content Providers",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Content Providers are a core Android Framework component that help you provide and manage access to your app's data. In this lesson, you'll learn how to leverage a content provider to get data from other apps on the phone by making a Flashcard app.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/950e6939-1786-4659-89de-5af2dec70716/183182/1516748060060/Content%20Providers%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/950e6939-1786-4659-89de-5af2dec70716/183182/1516748035615/Content%20Providers%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 205082,
          "key": "a18a2db2-8676-4300-945e-285ad9dce0a7",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a18a2db2-8676-4300-945e-285ad9dce0a7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205083,
              "key": "64e77fe3-fa91-4707-96ca-c81282dde57b",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Hx0MdWs65L0",
                "china_cdn_id": "Hx0MdWs65L0.mp4"
              }
            }
          ]
        },
        {
          "id": 205084,
          "key": "fa808eb7-10fa-4e50-88d3-6f4e00f76c43",
          "title": "Content Providers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fa808eb7-10fa-4e50-88d3-6f4e00f76c43",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205085,
              "key": "a475caf1-c343-49a9-83de-bad4afca9c3f",
              "title": "Content Providers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "K9PA9zGivcE",
                "china_cdn_id": "K9PA9zGivcE.mp4"
              }
            }
          ]
        },
        {
          "id": 205086,
          "key": "ae4f2510-15ce-432d-8cb8-ad6af3c21fc9",
          "title": "Content Provider Advantages",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ae4f2510-15ce-432d-8cb8-ad6af3c21fc9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205087,
              "key": "83925068-e2d4-4859-bef1-2721d1a4bbd1",
              "title": "Reasons to use a Content Provider",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rxq24osxXA4",
                "china_cdn_id": "rxq24osxXA4.mp4"
              }
            }
          ]
        },
        {
          "id": 205088,
          "key": "5d60c738-e54a-464b-b642-30f1fe1cbf7b",
          "title": "DroidTermsExample",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5d60c738-e54a-464b-b642-30f1fe1cbf7b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205089,
              "key": "fe6b1875-24ae-4f1c-88b7-f0593b23faa2",
              "title": "Intro to DroidTermsExample Content Provider",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "maiD7LBA_-g",
                "china_cdn_id": "maiD7LBA_-g.mp4"
              }
            }
          ]
        },
        {
          "id": 199660,
          "key": "7cbd7b3c-b225-403e-bd11-7fc986190b05",
          "title": "Exercise: Setup QuizExample",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7cbd7b3c-b225-403e-bd11-7fc986190b05",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199661,
              "key": "ea8ce7fb-bde2-4f90-9ec7-d1bb413b43ec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Setup QuizExample\n\n## Before you start\n\nBefore you move on to building your QuizExample app, please do the following:\n\n1. **Download the DroidTermsExample App** - You **need** to have this app on your phone and you need to run it once. By running this app, your phone will store word and definition data locally on your phone. To get the app, you can download the app from [here](https://github.com/udacity/DroidTermsExample-APK/raw/master/droidtermsexample-release.apk).\n2. **Review the Following Concepts** - For this lesson you will need to understand the following concepts from the SQLiteDatabase lesson:\n * Contract Class\n * Projection, selection, selection args, sort order\n * Cursor Class\n\n## QuizExample Code\n\nThe code for this app can be found in the [Lesson08-Quiz-Example](https://github.com/udacity/ud851-Exercises/tree/student/Lesson08-Quiz-Example) folder of the [Toy App Repository](https://github.com/udacity/ud851-Exercises).\n\nIf you need to a refresher on how the code is organized, please refer to the [concept where we introduced the code flow](https://classroom.udacity.com/courses/ud851/lessons/93affc67-3f0b-4f9b-b3a4-a7a26f241a86/concepts/115d08bb-f114-46fa-b693-5c6ce1445c07).\n\n## Explanation of QuizExample\n\nRight now, QuizExample is a simple app that switches between two states. The changes made were:\n\n* Include a library named <code>droidtermsprovider</code> that has a class in it <code>DroidTermsExampleContract</code>\n* Includes a layout for displaying the word and definition data with a button\n* Includes strings for the buttons\n* Includes two states: <code>STATE_HIDDEN</code> and <code>STATE_SHOWN</code> and a variable called <code>mCurrentState</code> which keeps track of the current state\n* Includes a method called onButtonClick which is triggered when the button is clicked and toggles between the two states\n* Includes two mostly empty helper methods <code>nextWord</code> and <code>showDefinition</code> that switch button text between two states.\n\nYou’ll use the code that has to do with state to keep track of whether the definition is showing or not.\n\n## The Big Picture\nRight now your understanding of a ContentProvider is this:",
              "instructor_notes": ""
            },
            {
              "id": 199726,
              "key": "0e5d9354-0db3-418e-906c-aef1ae870743",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/58190c89_diagram-starting/diagram-starting.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0e5d9354-0db3-418e-906c-aef1ae870743",
              "caption": "",
              "alt": null,
              "width": 590,
              "height": 448,
              "instructor_notes": null
            },
            {
              "id": 199679,
              "key": "7fbf6f84-0196-4aad-a10c-7ee5f8434461",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The fuller diagram includes the concepts shown here:",
              "instructor_notes": ""
            },
            {
              "id": 199727,
              "key": "d1d39876-afca-4e2d-933e-e83d9bcb3613",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/5819116b_diagram-full/diagram-full.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d1d39876-afca-4e2d-933e-e83d9bcb3613",
              "caption": "",
              "alt": null,
              "width": 823,
              "height": 447,
              "instructor_notes": null
            },
            {
              "id": 199680,
              "key": "3c115917-e6ae-4dc5-b79a-3a9769f3477b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## General Steps for Using a ContentProvider\nYou will take the following steps:\n\n1. Get permission to use the ContentProvider.\n2. Get the ContentResolver\n3. Pick one of four basic actions on the data: query, insert, update, delete\n4. Identify the data you are reading or manipulating to create a URI\n5. In the case of reading from the ContentProvider, display the information in the UI\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 205090,
          "key": "230eaac9-8e47-487d-9292-2b328506d7dc",
          "title": "Content Provider Permissions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "230eaac9-8e47-487d-9292-2b328506d7dc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 206302,
              "key": "89d7c7cc-c8e1-4b52-add4-72348324aa25",
              "title": "Content Provider Permissions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AH5e8HRp8iA",
                "china_cdn_id": "AH5e8HRp8iA.mp4"
              }
            }
          ]
        },
        {
          "id": 199681,
          "key": "3895160f-4375-4005-8b71-9057aaf4da20",
          "title": " Exercise: Add the Permission",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3895160f-4375-4005-8b71-9057aaf4da20",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199684,
              "key": "cba96f8c-cf84-4fd9-a850-bfcfe22d47ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Add the Permission Exercise\n\nHere is the permission to add for accessing and reading from the DroidTermsExample content provider:\n```XML\n<uses-permission android:name=\"com.example.udacity.droidtermsexample.TERMS_READ\" />\n```\n\n### Exercise Code\n**Exercise:** [T08.01-Exercise-AddTheContentProviderPermission](https://github.com/udacity/ud851-Exercises/tree/student/Lesson08-Quiz-Example/T08.01-Exercise-AddTheContentProviderPermission)",
              "instructor_notes": ""
            },
            {
              "id": 199682,
              "key": "7936b4ec-07ff-46b1-8c55-103b287fe861",
              "title": "Add the Permission",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7936b4ec-07ff-46b1-8c55-103b287fe861",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Finish step one and add the correct permission for the content provider.",
                "answers": [
                  {
                    "id": "a1478029319079",
                    "text": "I've added the permission for the Content Provider",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 205091,
          "key": "3d646513-7d7f-46de-97e8-772b79257a5a",
          "title": "The Content Resolver",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3d646513-7d7f-46de-97e8-772b79257a5a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205092,
              "key": "cfa7605a-d2e2-408f-9232-40842cb18534",
              "title": "The Content Resolver",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3MABuLQncrQ",
                "china_cdn_id": "3MABuLQncrQ.mp4"
              }
            }
          ]
        },
        {
          "id": 205093,
          "key": "8ddb8908-47f5-4cce-b51c-55cc58218120",
          "title": "Four Basic Operations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8ddb8908-47f5-4cce-b51c-55cc58218120",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205094,
              "key": "fa109036-3a55-4d79-9e47-007d168be991",
              "title": "Four Basic Operations of a Content Provider",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Kms8I1nHRvs",
                "china_cdn_id": "Kms8I1nHRvs.mp4"
              }
            }
          ]
        },
        {
          "id": 205095,
          "key": "3acf5882-a585-4a01-ab24-a32f97460314",
          "title": "Uniform Resource Identifier",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3acf5882-a585-4a01-ab24-a32f97460314",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 206304,
              "key": "b7021081-0eee-40e7-828c-2f04d9dc8f10",
              "title": "Uniform Resource Identifier",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5jxUU_FE0yI",
                "china_cdn_id": "5jxUU_FE0yI.mp4"
              }
            },
            {
              "id": 469191,
              "key": "0a3ba729-b3e7-4809-a886-e17be6c64490",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "At 0:57, Lyla uses the Android Device Monitor in Android Studio to view her logs. This tool is no longer recommended. Please open the logcat window instead, and view your logs there. \n\nAt the beginning of the video the example should show a period in between \"resolver\" and \"query\", not a comma. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 199685,
          "key": "d8420065-bbbd-49ed-bb02-f2ff0750ac88",
          "title": "Quiz: TVTime",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d8420065-bbbd-49ed-bb02-f2ff0750ac88",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199713,
              "key": "a3a3b820-c312-44bb-b1b2-60ad1294e64f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## TVTime\n\nFor this quiz and the next, we’re going to talk about a fictional app called TvTime that has a content provider. We'll apply what you’ve learned about communicating with providers to this app. The content provider for TVTime is a little more complicated than the DroidTermsExample app. TVTime stores two different types of data, a list of the user’s favorite actors and a list of their favorite tv shows. It stores both of these using a content provider.",
              "instructor_notes": ""
            },
            {
              "id": 199686,
              "key": "dc976026-b419-4b64-8715-6b42933e4649",
              "title": "Contacting A Content Provider One",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dc976026-b419-4b64-8715-6b42933e4649",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "You have a content provider which provides access to actor and TV show information stored on the phone. You have code to create and view data about TV shows and the actors in them.\n\nNow you want the code to remove a TV show. What must you be sure to do?",
                "answers": [
                  {
                    "id": "a1478030014791",
                    "text": "Change the content authority to allow for deleting",
                    "is_correct": false
                  },
                  {
                    "id": "a1478030177806",
                    "text": "Change the contract class to create a URI for deleting",
                    "is_correct": false
                  },
                  {
                    "id": "a1478030184457",
                    "text": "Add the READ permission for the Content Provider",
                    "is_correct": false
                  },
                  {
                    "id": "a1478030191560",
                    "text": "Call the delete method on the ContentResolver",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 199687,
          "key": "5ab60640-141b-4d66-b7d4-6d9bbbf5cc33",
          "title": "Solution: TVTime",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5ab60640-141b-4d66-b7d4-6d9bbbf5cc33",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199688,
              "key": "b0034445-387b-4528-911d-444f2a40add7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution Explanation\n#### Correct Answer: **Call the delete method on the ContentResolver**\n\nIf you are trying to specify the \"action\" you’re performing on the data, you must pick the correct method you call on the ContentResolver. For this removing TV shows example, the code might look like this:\n```java\n ContentResolver resolver = getContentResolver();\n resolver.delete(TVTimeContract.CONTENT_URI, null, null);\n```\n\n## Why the Other Answers Were Incorrect\n\n#### Incorrect Answer: **Change the content authority to allow for deleting** and **Change the contract class to create a URI for deleting**\n\nThere are a few reasons why the first two answers are incorrect. If you are using a content provider, the contract class and the authority will be provided for you so that you can use them. You cannot change what the content authority or the contract class is. You’re essentially using someone else’s API to grab data, and you don’t have control over the format the API expects.\n\nAlso, you don’t encode the “action” you’re trying to take in the URI; again, that is reserved for the method you call on the ContentResolver\n\n#### Incorrect Answer: **Add the READ permission for the Content Provider**\nIt’s possible you’ll need to add permissions, but in this case, since you’re doing a delete action (which is writing to the content provider) the permission needed would be a WRITE permission.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 199689,
          "key": "428a84f7-a61b-4856-ac3c-593103814123",
          "title": "Actor Query",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "428a84f7-a61b-4856-ac3c-593103814123",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199690,
              "key": "49dea012-a3a2-4681-8988-73e8e9291886",
              "title": "Contacting a Content Provider Two",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "49dea012-a3a2-4681-8988-73e8e9291886",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "You currently have the code to display a list of TV shows (seen below), and now you want to display a list of actors. What, at the very least, would you change in the following code?\n\n```java\n//Current code\nContentResolver resolver = getContentResolver();\nmData = resolver.query(TVContract.Shows.CONTENT_URI, null, null, null, null);\n```",
                "answers": [
                  {
                    "id": "a1478031364959",
                    "text": "Look at the TVContract and pick a different URI",
                    "is_correct": true
                  },
                  {
                    "id": "a1478031413168",
                    "text": "Change app permissions",
                    "is_correct": false
                  },
                  {
                    "id": "a1478031420294",
                    "text": "Change the method called on the ContentResolver",
                    "is_correct": false
                  },
                  {
                    "id": "a1478031430072",
                    "text": "Change the ContentResolver class to the correct ContentProvider class to access the data directly",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 199691,
          "key": "607c4879-83f3-40ac-8d1a-b1c005917a3d",
          "title": "Solution: Actor Query",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "607c4879-83f3-40ac-8d1a-b1c005917a3d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199692,
              "key": "eb32efc8-9416-485f-87fc-1e34d9034df4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution Explanation\n#### Correct Answer: **Look at the TVContract and pick a different URI**\n\nIf you are changing the content you are trying to access in the ContentProvider, you need to change the URI, so the first answer is correct. To query for actors, your code might look like this:\n\n```java\nContentResolver resolver = getContentResolver();\nmData = resolver.query(TVContract.Actors.CONTENT_URI, null, null, null, null);\n```\n\n## Why the Other Answers Were Incorrect\n\n#### Incorrect Answer: **Change app permissions**\nYou are not accessing a different content provider and because you already are displaying TV shows, you must have read access, so you do not need to change permissions to query for a list of actors.\n\n#### Incorrect Answer: **Change the method called on the ContentResolver**\nThe action you are taking in both cases is reading some data, which is the query method. You would change the method called on the ContentResolver if you wanted to change the type of action you were doing, for example, adding data instead of reading data. But you don’t want to do that, so no need to change this.\n\n#### Incorrect Answer: **Change the ContentResolver to the correct ContentProvider to access the data directly**\nYou always need to access a content provider using the content resolver, so you should never attempt to do this.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 199694,
          "key": "8faa29f5-de86-4b8e-a1e2-586013e1d0f5",
          "title": "Quiz: Calendar Provider",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8faa29f5-de86-4b8e-a1e2-586013e1d0f5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199711,
              "key": "76a4deac-f1cc-42e0-8b94-123169b2fb17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Calendar App\nFor this final quiz, let’s assume you need to interact with one of the Google maintained Content Providers, the Calendar Provider.\nBelow are 6 statements. Which would you use to change the color of the user's calendars to be red? Assume that this “values” variable has the information that describes new or changed data.\n\n**Hint:** if you’re wondering what the difference is in URIs, check out these links to the documentation for [DroidTermsExampleContract](http://udacity.github.io/DroidTermsExampleProvider-Documentation/) and [CalendarContract](https://developer.android.com/reference/android/provider/CalendarContract.html).\n",
              "instructor_notes": ""
            },
            {
              "id": 199700,
              "key": "e9493a98-7056-4a21-98cf-d482f07727c3",
              "title": "Contacting a Content Provider Three",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e9493a98-7056-4a21-98cf-d482f07727c3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which statement would you use to turn a user’s calendars colors red?",
                "answers": [
                  {
                    "id": "a1478032028231",
                    "text": "resolver.query(CalendarContract.CONTENT_URI, null, null, null, null);",
                    "is_correct": false
                  },
                  {
                    "id": "a1478032073517",
                    "text": "resolver.update(CalendarContract.Calendars.CONTENT_URI, values, null, null);",
                    "is_correct": true
                  },
                  {
                    "id": "a1478032078946",
                    "text": "resolver.insert(CalendarContract.CONTENT_URI, values);",
                    "is_correct": false
                  },
                  {
                    "id": "a1478032083636",
                    "text": "resolver.update(CalendarContract.Events.CONTENT_URI, values, null, null);",
                    "is_correct": false
                  },
                  {
                    "id": "a1478032091714",
                    "text": "resolver.query(CalendarContract.Calendars.CONTENT_URI, null, null, null, null);",
                    "is_correct": false
                  },
                  {
                    "id": "a1478032115469",
                    "text": "resolver.delete(CalendarContract.Events.CONTENT_URI,null,null);",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 199702,
          "key": "d2bd4030-eb3e-4d30-8601-911fc86988ac",
          "title": "Solution: Calendar Provider",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d2bd4030-eb3e-4d30-8601-911fc86988ac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199703,
              "key": "aae55293-bb82-4ec9-bc3a-924aa54b5d28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution Explanation\n#### Correct Answer: **resolver.update(CalendarContract.Calendars.CONTENT_URI, values, null, null);**\n\n```java\nresolver.update(CalendarContract.Calendars.CONTENT_URI, values, null, null); \n```\nIs the statement you would use.  Since you want to change pre-existing information, you use **update**. Then you specify what you want to update by using **CalendarContract.Calendars.CONTENT_URI** as the first argument. Next you pass in the variable values, which defines what content to change. Note that [CalendarContract](https://developer.android.com/reference/android/provider/CalendarContract.html) is a Contract class that stores data associated with the CalendarProvider.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 205097,
          "key": "ab0d201b-eaa8-4ab3-9494-207df9894799",
          "title": "Calling the ContentProvider",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ab0d201b-eaa8-4ab3-9494-207df9894799",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205098,
              "key": "c33fb246-e8f9-4d0f-97a2-64043572dff6",
              "title": "Where to put the Call to the ContentProvider",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gyRrrGTMrUw",
                "china_cdn_id": "gyRrrGTMrUw.mp4"
              }
            }
          ]
        },
        {
          "id": 199714,
          "key": "63008d55-8c9e-4940-9e09-88e84a24df45",
          "title": "Exercise: Make an AsyncTask",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63008d55-8c9e-4940-9e09-88e84a24df45",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199716,
              "key": "09bca5c3-3333-4371-a08b-a3e35e69eb69",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Make an AsyncTask\n\n### Optional Exercise Code\n**Exercise:** [T08.02-Exercise-AddAsyncTaskToRetrieveCursor](https://github.com/udacity/ud851-Exercises/tree/student/Lesson08-Quiz-Example/T08.02-Exercise-AddAsyncTaskToRetrieveCursor)\n\n*If you’d like the skip this, you can simply check out the following branch and review the diff TODO at the bottom.*\n\nIf you’d like to do it yourself, the end goal is to make an <code>AsyncTask</code> that loads the data on a background thread in a Cursor object. It then updates a variable called <code>mData</code> in the <code>MainActivity</code> to store the returned <code>Cursor</code>.\n\n**Steps to get the data from the Content Provider and save it into an instance variable**\n\n2. Create an <code>AsyncTask</code> with the following generic types <code>&lt;Void, Void, Cursor&gt;</code>\n3. In the <code>doInBackground</code> method, write the code to access the DroidTermsExample provider and return the <code>Cursor</code> object.\n4. Create an instance variable <code>Cursor mData</code>.\n5. In the <code>onPostExecute</code> method, store the <code>Cursor</code> object in <code>mData</code>.\n6. Create and execute the <code>AsyncTask</code> in <code>onCreate</code>.\n\n**Solution:** [[T08.02-Solution-AddAsyncTaskToRetrieveCursor](https://github.com/udacity/ud851-Exercises/tree/student/Lesson08-Quiz-Example/T08.02-Solution-AddAsyncTaskToRetrieveCursor)][[Diff](https://github.com/udacity/ud851-Exercises/compare/T08.02-Exercise-AddAsyncTaskToRetrieveCursor...T08.02-Solution-AddAsyncTaskToRetrieveCursor)]\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 205099,
          "key": "0936369f-d687-479a-9de9-0a31ec5d61cd",
          "title": "Structure of the Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0936369f-d687-479a-9de9-0a31ec5d61cd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205100,
              "key": "c566871e-d25d-460a-b691-3b020ff85ef9",
              "title": "Structure of the Data",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FEhVGnNZ3yA",
                "china_cdn_id": "FEhVGnNZ3yA.mp4"
              }
            },
            {
              "id": 279398,
              "key": "161fe68d-2b9e-4203-8371-17f785edf7a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Code examples can be found here](https://developer.android.com/guide/topics/providers/content-provider-basics.html#Query) \n\nTo revisit \"Storing Data in SQLite,\" please navigate to the previous lesson. \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 205101,
          "key": "23d65612-3684-4e38-80d9-ca26dafa60ef",
          "title": "Working with Cursors Review",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "23d65612-3684-4e38-80d9-ca26dafa60ef",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205102,
              "key": "6a55e2ea-53dd-4e7a-8e70-4a603d364ea7",
              "title": "Working with Cursors Review",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4Hm8A1KF0gM",
                "china_cdn_id": "4Hm8A1KF0gM.mp4"
              }
            }
          ]
        },
        {
          "id": 199720,
          "key": "1d11a38f-0fe3-482a-90b3-c726d5268abc",
          "title": "Exercise: Use the Cursor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1d11a38f-0fe3-482a-90b3-c726d5268abc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199723,
              "key": "a239034c-6d8c-4524-932e-67f238b4a935",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Use the Cursor and Finish the App\nAlright, it's time to finish this app. You'll do this by displaying the data from the <code>Cursor</code>. The layout has a button, which triggers the <code>onButtonClick</code> method. It switches back and forth between the “Show Definition” and “Next Word” states. \n\nFinish the <code>nextWord</code> and <code>showDefinition</code> methods so that when the definition is shown, it reveals the definition of the current word and when the “next word” button is clicked, it hides the definition and shows the next word. Throughout the code are TODO notes to help guide you.\n\nThe code I just showed for printing out all words and definitions is below, available for you to modify:\n\n```java\nint wordCol = cursor.getColumnIndex(DroidTermsExampleContract.COLUMN_WORD);\nint definitionCol = cursor.getColumnIndex(DroidTermsExampleContract.COLUMN_DEFINITION);\nwhile (cursor.moveToNext()) {\nString word = cursor.getString(wordCol);\nString definition = cursor.getString(definitionCol);\nLog.v(“Cursor Example”, word + “ - “ + definition);\n```\n\n### Exercise Code\n**Exercise:** [T08.03-Exercise-FinishQuizExample](https://github.com/udacity/ud851-Exercises/tree/student/Lesson08-Quiz-Example/T08.03-Exercise-FinishQuizExample)\n",
              "instructor_notes": ""
            },
            {
              "id": 199721,
              "key": "ca676676-2409-4cd2-8227-7f0c52e277e4",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ca676676-2409-4cd2-8227-7f0c52e277e4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check when done",
                "answers": [
                  {
                    "id": "a1478034611658",
                    "text": "I'm done!",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 199724,
          "key": "f0ca2615-a88e-485c-96d5-b9060f479e8a",
          "title": "Solution: Use the Cursor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0ca2615-a88e-485c-96d5-b9060f479e8a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199725,
              "key": "11322964-c54b-46a8-894e-cb83e11ed461",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Use the Cursor Solution\n\nIn this exercise you wrapped everything up by using the data from the `Cursor` to finish QuizExample.\n\n## Notes on Solution Code\n\nBelow is the final code for nextWord, which does the most cursor manipulations. \n\nFirst, it checks if the cursor has been set. If it has, it tries to move the cursor to the next value, using <code>moveToNext</code>. This will return <code>false</code> if it cannot, in which case, we call <code>moveToFirst</code> to go back to the first row in the Cursor.\n\n```java\n    public void nextWord() {\n        if (mData != null) {\n            // Move to the next position in the cursor, if there isn't one, move to the first\n            if (!mData.moveToNext()) {\n                mData.moveToFirst();\n            }\n```\n\nAt this point, the cursor is positioned at the correct row, so we set the definition view to invisible, change the button text to \"Show Definition\"\n```java\n            // Hide the definition TextView\n            mDefinitionTextView.setVisibility(View.INVISIBLE);\n\n            // Change button text\n            mButton.setText(getString(R.string.show_definition));\n```\n\nFinally we setup the correct values for the word and the hidden definition text, using the Cursors' <code>getString</code> method.\n```java\n            // Get the next word\n            mWordTextView.setText(mData.getString(mWordCol));\n            mDefinitionTextView.setText(mData.getString(mDefCol));\n\n            mCurrentState = STATE_HIDDEN;\n        }\n    }\n```\n\nNote that <code>mWordCol</code> and <code>mDefCol</code> were set in the AsyncTask's <code>onPostExecute</code> method:\n\n```java\n        @Override\n        protected void onPostExecute(Cursor cursor) {\n            super.onPostExecute(cursor);\n            mData = cursor;\n            // Get the column index, in the Cursor, of each piece of data\n            mDefCol = mData.getColumnIndex(DroidTermsExampleContract.COLUMN_DEFINITION);\n            mWordCol = mData.getColumnIndex(DroidTermsExampleContract.COLUMN_WORD);\n            // Set the initial state\n            nextWord();\n        }\n```\n\nThe solution diff can be found below.\n\n### Solution Code\n**Solution:** [[T08.03-Solution-FinishQuizExample](https://github.com/udacity/ud851-Exercises/tree/student/Lesson08-Quiz-Example/T08.03-Solution-FinishQuizExample)][[Diff](https://github.com/udacity/ud851-Exercises/compare/T08.03-Exercise-FinishQuizExample...T08.03-Solution-FinishQuizExample)]",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 205103,
          "key": "23ea3f71-80a2-4f93-918e-edf57be858f1",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "23ea3f71-80a2-4f93-918e-edf57be858f1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 205104,
              "key": "3264de5f-1991-49a3-b829-f9f76e7db733",
              "title": "Conclusion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6HyTdMGXwOE",
                "china_cdn_id": "6HyTdMGXwOE.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}