{
  "data": {
    "lesson": {
      "id": 200341,
      "key": "92320789-2acc-42cc-9d64-b1d0e5f1947a",
      "title": "Completing the UI",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "This lesson is all about building a user interface that is well-organized and accessible. You’ll be building a boarding pass app where you’ll learn about different styles of layouts, views and view groups, as well as data binding, and accessibility. At the end of the lesson, you’ll use what you’ve learned to improve the layouts used in Sunshine.\n",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/92320789-2acc-42cc-9d64-b1d0e5f1947a/200341/1516748502675/Completing%20the%20UI%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/92320789-2acc-42cc-9d64-b1d0e5f1947a/200341/1516748475643/Completing%20the%20UI%20Subtitles.zip"
          },
          {
            "name": "plane_vector_image",
            "uri": "https://video.udacity-data.com/topher/2016/November/5822688b_plane/plane.svg"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 206680,
          "key": "79111120-6eae-4fbd-9186-c2a250f55375",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "79111120-6eae-4fbd-9186-c2a250f55375",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217531,
              "key": "30f0b506-38aa-49e1-8259-fec9b9511b21",
              "title": "Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ibP6h1VEnmo",
                "china_cdn_id": "ibP6h1VEnmo.mp4"
              }
            }
          ]
        },
        {
          "id": 206681,
          "key": "c586d96d-82af-4820-a67a-3a74d8a4e50e",
          "title": "Views & View Groups",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c586d96d-82af-4820-a67a-3a74d8a4e50e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 229731,
              "key": "b58932d2-d362-45f9-8c81-b94fe0b164e1",
              "title": "Views & View Groups",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8agCiQzDZys",
                "china_cdn_id": "8agCiQzDZys.mp4"
              }
            }
          ]
        },
        {
          "id": 206682,
          "key": "e62f0243-61a4-4d17-b6e7-a594eb90a488",
          "title": "Quiz: What will this look like?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e62f0243-61a4-4d17-b6e7-a594eb90a488",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208359,
              "key": "75ecf631-2f56-43a3-b349-dd80095061ac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Given this XML snippet, which of the following renderings do you think is the correct match ?\n```xml\n<ImageView\n        app:srcCompat=\"@mipmap/ic_launcher\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"64dp\"\n        android:layout_marginTop=\"64dp\"\n        android:background=\"@color/colorPrimary\" />\n```",
              "instructor_notes": ""
            },
            {
              "id": 208358,
              "key": "0120edc3-4a68-4d6e-9871-da8459f87ef0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/582cf0a3_quiz.001/quiz.001.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0120edc3-4a68-4d6e-9871-da8459f87ef0",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 208397,
              "key": "a237f93e-db8f-40f2-8526-f276d409896d",
              "title": "views & view groups",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a237f93e-db8f-40f2-8526-f276d409896d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Choose the number that corresponds to the correct rendering for the specified xml code.",
                "answers": [
                  {
                    "id": "a1479342893738",
                    "text": "1",
                    "is_correct": true
                  },
                  {
                    "id": "a1479343148403",
                    "text": "2",
                    "is_correct": false
                  },
                  {
                    "id": "a1479343149685",
                    "text": "3",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 208362,
          "key": "7cba836c-c3e4-4d2d-8523-d261dd7eadff",
          "title": "Constraint Layout",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7cba836c-c3e4-4d2d-8523-d261dd7eadff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217534,
              "key": "a29a9e74-85c7-4db4-a208-5a52687b78f5",
              "title": "Constraint Layout",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "R0ZrG0NYjGE",
                "china_cdn_id": "R0ZrG0NYjGE.mp4"
              }
            }
          ]
        },
        {
          "id": 200342,
          "key": "bcd012a2-40fd-47a1-bd42-140b6524812d",
          "title": "Installing the Constraint Layout Library",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bcd012a2-40fd-47a1-bd42-140b6524812d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 200376,
              "key": "cfdca052-2623-48a8-b3ea-3a7be4f8848e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Installing the Constraint Layout Library\n\nTo continue building the Boarding Pass app, you'll need to make sure you have the latest Constraint Layout library. To ensure you have the latest Constraint Layout library:\n\n\n1. Click **Tools** > **Android** > **SDK Manager**.\n2. Click the **SDK Tools** tab.\n3. Expand **Support Repository** and then check **ConstraintLayout for Android** and **Solver for ConstraintLayout**. Check **Show Package Details** and take note of the version you're downloading (you'll need this below).\n4. Click OK.\n5. Add the `ConstraintLayout` library as a dependency in your module-level `build.gradle` file:\n\t```gradle\n\tdependencies {\n\t    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'\n\t}\n\t```\n6. The library version you download may be higher, so be sure the value you specify here matches the version from step 3.\n7. In the toolbar or sync notification, click **Sync Project with Gradle Files**.\n8. Now you're ready to build your layout with `ConstraintLayout`.",
              "instructor_notes": ""
            },
            {
              "id": 220792,
              "key": "a641904c-299e-40b2-a41d-87cb480abd8e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584b4913_screen-shot-2016-12-09-at-4.14.40-pm/screen-shot-2016-12-09-at-4.14.40-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a641904c-299e-40b2-a41d-87cb480abd8e",
              "caption": "",
              "alt": null,
              "width": 1019,
              "height": 699,
              "instructor_notes": null
            },
            {
              "id": 208346,
              "key": "7b8b5058-dac9-4c6b-b310-e7bcd67b8827",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# BoardingPass Code\n\nIn this lesson, we will work on building out a BoardPass app which helps users get information about their flight such as which terminal, gate number, and seat number. \n\nThe code for this app can be found in the [Lesson11-Completeing-The-UI](https://github.com/udacity/ud851-Exercises/tree/student/Lesson11-Completeing-The-UI/) folder of the [Toy App Repository](https://github.com/udacity/ud851-Exercises).\n\n\nIf you need to a refresher on how the code is organized, please refer the [concept where we introduced the code flow](https://classroom.udacity.com/courses/ud851/lessons/93affc67-3f0b-4f9b-b3a4-a7a26f241a86/concepts/115d08bb-f114-46fa-b693-5c6ce1445c07).\n\n\n## Explanation of BoardingPass App\n\nThroughout this lesson, you will get to design this layout of a boarding pass app from scratch using Constraint Layouts and Data Binding, you will also get to add important accessibility and localization attributes in the app to cater for a wide diversity of potential users.\n",
              "instructor_notes": ""
            },
            {
              "id": 220791,
              "key": "a8055913-951e-4656-89a4-2703c0dd2e67",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584b484d_screen-shot-2016-11-16-at-5.07.05-pm/screen-shot-2016-11-16-at-5.07.05-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a8055913-951e-4656-89a4-2703c0dd2e67",
              "caption": "",
              "alt": null,
              "width": 698,
              "height": 1414,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 206685,
          "key": "2e40a366-c9b4-4a54-b752-478f255d46e5",
          "title": "Design the Boarding Pass",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2e40a366-c9b4-4a54-b752-478f255d46e5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 229732,
              "key": "c8c9d940-f1b8-4ce2-a00d-f82fa938bd0b",
              "title": "Design the Boarding Pass P1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YAPXFBf5I0A",
                "china_cdn_id": "YAPXFBf5I0A.mp4"
              }
            }
          ]
        },
        {
          "id": 229733,
          "key": "9e51fa9e-1aa5-4f60-8f10-4f9bce6b39c0",
          "title": "Adding Shapes and Images ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9e51fa9e-1aa5-4f60-8f10-4f9bce6b39c0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 229734,
              "key": "d357c5f7-8048-490e-9817-d9e3331ec0a5",
              "title": "Adding Shapes and Images",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0ANPJ4Pd6GQ",
                "china_cdn_id": "0ANPJ4Pd6GQ.mp4"
              }
            }
          ]
        },
        {
          "id": 206686,
          "key": "9d65d0c9-95cd-44b6-a66d-2b796c80d524",
          "title": "Adding Vector Images",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9d65d0c9-95cd-44b6-a66d-2b796c80d524",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217536,
              "key": "b692cb39-e0d0-41a2-877f-08af29138b75",
              "title": "Adding Vector Images",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "You can download the plane image from [here](https://d17h27t6h515a5.cloudfront.net/topher/2016/November/5822688b_plane/plane.svg)",
              "video": {
                "youtube_id": "wb5CwGKW6R4",
                "china_cdn_id": "wb5CwGKW6R4.mp4"
              }
            }
          ]
        },
        {
          "id": 206688,
          "key": "54f2d650-4015-491d-a08b-1935a36a6ccd",
          "title": "Exercise: Constraint Layout",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54f2d650-4015-491d-a08b-1935a36a6ccd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208347,
              "key": "7c4de5b7-2bc9-433a-8019-790d6bb34a04",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Constraint Layout\n\nIn this exercise, you will get to create the boarding pass design using a constraint layout.\n\n### Exercise Code\n**Exercise:** [T11.01-Exercise-ConstraintLayout](https://github.com/udacity/ud851-Exercises/tree/student/Lesson11-Completeing-The-UI/T11.01-Exercise-ConstraintLayout)",
              "instructor_notes": ""
            },
            {
              "id": 213455,
              "key": "cf98a93b-1476-411c-8ac1-492853f3577b",
              "title": "Constraint Layout",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cf98a93b-1476-411c-8ac1-492853f3577b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn to create the constraint layout and add the views and constraints to design the boarding pass app. Follow the TODOs in the code comments and check them off when you're done!",
                "answers": [
                  {
                    "id": "a1479424814321",
                    "text": "Add the compile dependency for the constraint layout",
                    "is_correct": true
                  },
                  {
                    "id": "a1479425199985",
                    "text": "Replace the Relative layout with a ConstraintLayout ",
                    "is_correct": true
                  },
                  {
                    "id": "a1479425227339",
                    "text": "Create all the TextViews and ImageViews to match the design while adding the correct constraints as you go",
                    "is_correct": true
                  },
                  {
                    "id": "a1479425289371",
                    "text": "Surround the Constraint layout with a ScrollView",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 206694,
          "key": "da897ef2-cd36-4753-8def-fa2b08837767",
          "title": "Data Binding",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "da897ef2-cd36-4753-8def-fa2b08837767",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217538,
              "key": "2302bdd7-8555-40bc-b408-e43d2f7dd17d",
              "title": "Data Binding",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WJg12Yji9YU",
                "china_cdn_id": "WJg12Yji9YU.mp4"
              }
            }
          ]
        },
        {
          "id": 206695,
          "key": "d63389b0-4092-4062-8274-de606b5f2548",
          "title": "Exercise: Data Binding",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d63389b0-4092-4062-8274-de606b5f2548",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208349,
              "key": "5396172d-4f70-44dd-a8cc-42e1bea3de92",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Data Binding\n\nIn this exercise, you will get to link your UI with actual data using data-binding\n\n\n### Exercise Code\n**Exercise:** [T11.02-Exercise-DataBinding](https://github.com/udacity/ud851-Exercises/tree/student/Lesson11-Completeing-The-UI/T11.02-Exercise-DataBinding)",
              "instructor_notes": ""
            },
            {
              "id": 215748,
              "key": "e8869ceb-acad-4f30-9633-57477b38ff6d",
              "title": "Data Binding",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e8869ceb-acad-4f30-9633-57477b38ff6d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn to implement the data binding classes and link the UI components with actual data values.",
                "answers": [
                  {
                    "id": "a1479498183445",
                    "text": "Enable Data Binding in your application",
                    "is_correct": true
                  },
                  {
                    "id": "a1479498429780",
                    "text": "Use &lt;layout&gt; as the root tag for activity_main",
                    "is_correct": true
                  },
                  {
                    "id": "a1479498462575",
                    "text": "Create a data binding instance of type ActivityMainBinding and set the Content View to the activity_main",
                    "is_correct": true
                  },
                  {
                    "id": "a1479498521931",
                    "text": "Load a BoardingPassInfo object with some data",
                    "is_correct": true
                  },
                  {
                    "id": "a1479498650534",
                    "text": "Use the ActivityMainBinding object to set all textViews with the data from BoardingPassInfo",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 206696,
          "key": "7b5821f2-a851-470a-9b79-f1e2ccc515d8",
          "title": "Accessibility & Internationalization",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7b5821f2-a851-470a-9b79-f1e2ccc515d8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217539,
              "key": "8fa1d4fb-8e14-4a71-a209-3accff140f3d",
              "title": "Accessibility & Internationalization",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gh4Kk5PU3ds",
                "china_cdn_id": "gh4Kk5PU3ds.mp4"
              }
            }
          ]
        },
        {
          "id": 208404,
          "key": "b90582ff-9ac8-4e44-a6e5-ad6e4464e7d2",
          "title": "Accessibility",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b90582ff-9ac8-4e44-a6e5-ad6e4464e7d2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208410,
              "key": "b0d32464-b93b-460d-8d6f-bd8e09a2c0de",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Accessibility** refers to the design of products, devices, services, or environments for people who experience disabilities.\nAndroid provides accessibility features like \n* **TalkBack** which is a pre-installed screen reader service provided by Google. It uses spoken feedback to describe the results of actions such as launching an app, and events such as notifications.\n* **Explore by Touch** which is a system feature that works with TalkBack, allowing you to touch your device's screen and hear what's under your finger via spoken feedback. This feature is helpful to users with low vision.\n* **Accessibility settings** that let you modify your device's display and sound options, such as increasing the text size, changing the speed at which text is spoken, and more. and more. \n\nTo take full advantage of those features, you should follow this checklist listed [here](https://developer.android.com/guide/topics/ui/accessibility/checklist.html#recommendations) from the android developer website, but let’s focus on the first one for now which is the most important.\n\n**Describe user interface controls**\n\nIf you look at our layout design for the boarding pass, you can immediately tell that our origin airport is JFK and the destination airport is DCA, simply because of their relative location on the screen and the direction of the plane. But if you cannot see this layout due to a visual limitation, simply having android read out everything on the screen won’t tell you enough information about which is which.\n",
              "instructor_notes": ""
            },
            {
              "id": 208414,
              "key": "92219752-e605-4c88-aefc-ade5d326803d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/582d0283_screen-shot-2016-11-16-at-5.07.05-pm/screen-shot-2016-11-16-at-5.07.05-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/92219752-e605-4c88-aefc-ade5d326803d",
              "caption": "",
              "alt": null,
              "width": 698,
              "height": 1414,
              "instructor_notes": null
            },
            {
              "id": 208417,
              "key": "aa697964-cafa-4013-9b76-290266a92c5a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "That’s why Android offers the ```contentDescription``` attribute to describe what any view actually presents, this description text is not displayed anywhere on the screen, but if the user enables accessibility services that provide audible prompts, then when the user navigates to that control, the text is spoken.\n```xml\n<ImageView android:contentDescription=\"@string/origin_label\"/>\n```\n\nIdeally, in any app, you would want to describe all ImageViews, ImageButtons and all Checkboxes using the ```contentDescription``` attribute.\n\nContentDescription is just one of many things you need to consider when building your app for accessibility, others include:\n* **Enable focus-based navigation** which makes sure users can navigate your screen layouts using external hardware like bluetooth keyboards. \n* **No audio-only feedback** which guarantees any audio feedback to always have a secondary feedback mechanism to support users who are deaf or hard of hearing\n\nFor the full check list and best practices follow this link: [Accessibility Developer Checklist](https://developer.android.com/guide/topics/ui/accessibility/checklist.html#recommendations)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 208420,
          "key": "5d005e3d-04a8-4425-98a6-aeef8c10616c",
          "title": "Quiz: Accessibility",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5d005e3d-04a8-4425-98a6-aeef8c10616c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208434,
              "key": "acd1b544-ba71-4625-b8cf-6f96c5df7ab9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/582d0e1c_screen-shot-2016-11-16-at-5.49.25-pm/screen-shot-2016-11-16-at-5.49.25-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/acd1b544-ba71-4625-b8cf-6f96c5df7ab9",
              "caption": "",
              "alt": null,
              "width": 688,
              "height": 1352,
              "instructor_notes": null
            },
            {
              "id": 208422,
              "key": "62839fec-f196-4e6e-a1c3-4bcc04f5c8d4",
              "title": "Accessibility",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "62839fec-f196-4e6e-a1c3-4bcc04f5c8d4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which Views in this layout should include a <code>contentDescription</code> value? Select All options that apply.",
                "answers": [
                  {
                    "id": "a1479345974443",
                    "text": "The Udacity logo ImageView at the top",
                    "is_correct": true
                  },
                  {
                    "id": "a1479346064990",
                    "text": "The \"Feedback\" label TextView",
                    "is_correct": false
                  },
                  {
                    "id": "a1479346073946",
                    "text": "The Input EditText",
                    "is_correct": false
                  },
                  {
                    "id": "a1479346079990",
                    "text": "The Submit Button",
                    "is_correct": false
                  },
                  {
                    "id": "a1479347676989",
                    "text": "The Save Button",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 208405,
          "key": "0124ee43-1e8c-4c8a-8d19-e98ef6125940",
          "title": "Localization",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0124ee43-1e8c-4c8a-8d19-e98ef6125940",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208419,
              "key": "00b1b682-187f-46cb-a7a4-d8c7735a2d7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Localization\n\n**Localization** (also known as **Internationalization**) is the adaptation of a product or service to meet the needs of a particular language, culture or desired population's \"look-and-feel\".\n\n## I. Translation:\n\nYou should always design your app in a way that can be easily translated to other languages. To do so, any text that you would expect to be translated like labels and titles and button descriptions should all be defined as a string resource in ```res/values/strings.xml```\n\nThis allows you to create other versions of ```strings.xml``` for other languages. This is done by creating a new ```values``` folder with the pattern ```value-xx``` where ```xx``` can be the abbreviation of any language from the ISO 639 code list [here](https://www.loc.gov/standards/iso639-2/php/code_list.php), for example ```res/values-fr/strings.xml``` will contain the french version of the strings.xml file with all the strings translated from the default language to french. \n\nThis way, when a user who has set up their phone to use french as the default language, android will automatically load the french version of strings and use all the pre-translated french labels.",
              "instructor_notes": ""
            },
            {
              "id": 215799,
              "key": "a7a38ecc-7b2c-46a2-8c1a-d7fbda82f4a0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/582f706c_screen-shot-2016-11-18-at-1.20.44-pm/screen-shot-2016-11-18-at-1.20.44-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a7a38ecc-7b2c-46a2-8c1a-d7fbda82f4a0",
              "caption": "Once a new values-xx folder is created, android displays all resource files grouped together like so.",
              "alt": null,
              "width": 232,
              "height": 154,
              "instructor_notes": null
            },
            {
              "id": 215800,
              "key": "fb53d535-b03e-4441-bc02-b5c692bbcd52",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Sometimes however, you would still want to use the strings recourses for strings that you don't intend to translate, this includes strings representing identifiers for views or variable names os string formats etc.\n\nFor those strings, there's an attribute called ``` translatable``` that can be set to false to indicate that this string recourse should not be translated.\n\n```xml \n<string name=\"timeFormat\" translatable=\"false\">hh:mm a</string>\n```\n\n## II. RTL support\n\nIf you’re distributing to countries where right-to-left (RTL) scripts are used (like Arabic or Hebrew), you should consider implementing support for RTL layouts and text display and editing, to the extent possible.\n\nYou've already seen how to set image recourses to flip when RTL support activated to indicate the correct direction of travel using \n``` xml\n<vector android:autoMirrored=\"true\"> </vector>\n```\n\nAnother set of attributes related to RTL support are the\n```xml \nandroid:layout_marginStart\nandroid:layout_marginEnd\n``` \nthat correspond to \n```xml \nandroid:layout_marginLeft\nandroid:layout_marginRight\n``` \n\nrespectively, but only when the default language is English (or any LTR language), for RTL languages however, **Start** is mapped to **Right** and **End** is mapped to **Left** instead, the idea is that when the app runs on a device with a default RTL language , everything will get mirrored by switching margins and constraints to the other side.",
              "instructor_notes": ""
            },
            {
              "id": 215821,
              "key": "7acba288-fe11-4a1d-a87d-fcb69709d315",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/582f8118_screen-shot-2016-11-18-at-2.31.51-pm/screen-shot-2016-11-18-at-2.31.51-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7acba288-fe11-4a1d-a87d-fcb69709d315",
              "caption": "English LTR vs Arabic RTL screens of the same layout",
              "alt": null,
              "width": 1296,
              "height": 743,
              "instructor_notes": null
            },
            {
              "id": 215822,
              "key": "ee59b722-471b-4a76-b097-d273aa7aee92",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Keep in mind that these Start and End attributes are relatively new, so to support older devices (prior to 4.1) you should still backup the Start and End margins with the outdated Left and Right ones with the same values, and if your app ends up running on a more recent device the Left Right margins are ignored and the Start End ones are used instead.\n\nThis [Localization Checklist](https://developer.android.com/distribute/tools/localization-checklist.html) offers some more important steps you should follow to make your Android app run on many devices in many regions and hence reach the most users.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 206697,
          "key": "d0a07b3a-9654-47fd-8079-9970a888b9b9",
          "title": "Responsive Design",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d0a07b3a-9654-47fd-8079-9970a888b9b9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217540,
              "key": "7fe7e95e-c523-4882-9dec-d373d3479b29",
              "title": "Responsive Design",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wEfPyBa44HU",
                "china_cdn_id": "wEfPyBa44HU.mp4"
              }
            }
          ]
        },
        {
          "id": 206700,
          "key": "e6302d8a-2043-4f46-ab12-68037a08e963",
          "title": "Exercise: Landscape Layout",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e6302d8a-2043-4f46-ab12-68037a08e963",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208350,
              "key": "b0d925cc-f021-43bc-8afe-e34e930f622c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Landscape Layout\n\nIn this exercise, you will get to implement an alternative layout for the boarding pass app to support landscape mode.\n\n\n### Exercise Code\n**Exercise:** [T11.03-Exercise-LandscapeLayout](https://github.com/udacity/ud851-Exercises/tree/student/Lesson11-Completeing-The-UI/T11.03-Exercise-LandscapeLayout)",
              "instructor_notes": ""
            },
            {
              "id": 215828,
              "key": "df03dbd6-3506-44d6-a274-35e94fb9550e",
              "title": "Landscape Layout",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "df03dbd6-3506-44d6-a274-35e94fb9550e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn to create a new layout file for the landscape design and reorder views to make them all fit in the same landscape screen.",
                "answers": [
                  {
                    "id": "a1479509458061",
                    "text": "Create new smaller layout files for flight information and boarding information",
                    "is_correct": true
                  },
                  {
                    "id": "a1479509701994",
                    "text": "Move the appropriate views out of the main activity layout to those new smaller layouts",
                    "is_correct": true
                  },
                  {
                    "id": "a1479509817070",
                    "text": "Point to the smaller layouts from the main layout using the <include> tags",
                    "is_correct": true
                  },
                  {
                    "id": "a1479509854614",
                    "text": "Update the binding setters to point to the correct layout",
                    "is_correct": true
                  },
                  {
                    "id": "a1479509910426",
                    "text": "Copy activity_main.xml into the layout-land",
                    "is_correct": true
                  },
                  {
                    "id": "a1479509920875",
                    "text": "Re-organize the views in the landscape file to fit all in the one screen",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 206702,
          "key": "327118c9-0362-43df-bbb1-862d36350ef9",
          "title": "Exercise: Sunshine's New Layout",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "327118c9-0362-43df-bbb1-862d36350ef9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208351,
              "key": "f25f40f2-6b56-4c3f-9b2f-ea3c8ca5e5ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Sunshine's New Layout\n\nIn this exercise, you will get to use the constraint layout to transform our simple text-based interface to a much prettier looking interface for the forecast screen.",
              "instructor_notes": ""
            },
            {
              "id": 219739,
              "key": "9ed86c7d-5c9a-4393-b165-2f4ccf864a86",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/5845eb75_screen-shot-2016-12-05-at-2.33.54-pm/screen-shot-2016-12-05-at-2.33.54-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9ed86c7d-5c9a-4393-b165-2f4ccf864a86",
              "caption": "",
              "alt": null,
              "width": 1394,
              "height": 1040,
              "instructor_notes": null
            },
            {
              "id": 219742,
              "key": "b4cabb1f-4d89-4ab8-a8e5-2f2416847e14",
              "title": "Exercício: Novo Layout do Sunshine",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b4cabb1f-4d89-4ab8-a8e5-2f2416847e14",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn to apply what you've learned on Sunshine. Follow the TODOs in the code and make Sunshine look pretty :)\n### Exercise Code\n**Exercise:** [S11.01-Exercise-NewListItemLayout](https://github.com/udacity/ud851-Sunshine/tree/student/S11.01-Exercise-NewListItemLayout)",
                "answers": [
                  {
                    "id": "a1491596197034",
                    "text": "Add a ConstraintLayout dependency",
                    "is_correct": true
                  },
                  {
                    "id": "a1491596201006",
                    "text": "SReplace the LinearLayout in forecast_list_item.xml with a ConstraintLayout",
                    "is_correct": true
                  },
                  {
                    "id": "a1491596206713",
                    "text": "Add new TextViews for each individual weather detail and an ImageView for the weather icon",
                    "is_correct": true
                  },
                  {
                    "id": "a1491596211570",
                    "text": "Update the ForecastAdaptor to display the broken-down weather details in the correct views",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 220622,
          "key": "2173c940-278d-43eb-afa1-a32a35d5282c",
          "title": "Solution: Sunshine's New Layout",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2173c940-278d-43eb-afa1-a32a35d5282c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220623,
              "key": "f96f85e0-8f2b-45f8-91fb-8e27dd21faa7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Sunshine's New Layout Solution\n\nHere's the solution code in case you would like to see how we did it, or if you got stuck at any point:\n\n### Solution Code\n**Solution:** [[S11.01-Solution-NewListItemLayout](https://github.com/udacity/ud851-Sunshine/tree/student/S11.01-Solution-NewListItemLayout)][[Diff](https://github.com/udacity/ud851-Sunshine/compare/S11.01-Exercise-NewListItemLayout...S11.01-Solution-NewListItemLayout)]",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 206704,
          "key": "ce18735b-8c45-4cb4-8c5d-6e7c3ddf5e69",
          "title": "Exercise: Sunshine Today's List Item",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce18735b-8c45-4cb4-8c5d-6e7c3ddf5e69",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220614,
              "key": "57ae5be3-2cd9-4120-8b84-b505eea713c3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "RecyclerViews allow you to inflate different layouts for each of its items, this flexibility give us the power to come up with more user friendly designs, like the one we about to do in this exercise.\n\nThe goal for this exercise is to highlight Today's forecast compared to the rest of the week by making some subtle modifications in the padding and icon and text sizes for the first item (today's forecast) in the recycler view list, but keeping every other item the same.",
              "instructor_notes": ""
            },
            {
              "id": 220615,
              "key": "c781e0bd-1c66-4dcc-b00e-044963c5a6b3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584af5fc_todays-layout.002/todays-layout.002.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c781e0bd-1c66-4dcc-b00e-044963c5a6b3",
              "caption": "",
              "alt": null,
              "width": 1024,
              "height": 768,
              "instructor_notes": null
            },
            {
              "id": 220618,
              "key": "abc35169-2d8e-480a-bc3e-3566c2cb0706",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To get from this old forecast layout to the new one, we will have to use a few of RecyclerView Adapter's core functionalities:\n\n### I. Create the new layout for Today\n\n* Add a layout called list_item_forecast_today, then use a constraint layout to implement the today list item design as shown in the image above.\n\n### II. Create booleans to personalize the experience \n\n* Add a boolean resource called use_today_layout in res/values and set it to some default value (true or false).\n* Create a resources file called bools.xml within the res/values-port directory to provide a customized boolean setting for the portrait specific layout.\n* Add another boolean resource, also called use_today_layout, in res/values-port and set it to false to default the portrait layout to not show the customized Today's design.\n\n### III. getItemViewType:\n\nNow, to get the RecyclerView to know when to use which layout for its individual items; we will have to override getItemViewType. This will allow us to define different view types for different RecyclerView items based on the position.\n\n* Override getItemViewType.\n* Within getItemViewType, if our boolean resource is true and item position is 0 (first item in the list), return a custom ID for today's viewType (call it VIEW_TYPE_TODAY).\n* Otherwise, return a custom ID for future day viewType (call it VIEW_TYPE_FUTURE_DAY).\n\n### IV. onCreateViewHolder\n\nLast part would be to update onCreateViewHolder and use the returned ViewType from getItemViewType and decide on which layout to inflate:\n* If the ViewType of the layout is today (VIEW_TYPE_TODAY), Inflate and use list_item_forecast_today layout.\n* If the ViewType of the layout is future day (VIEW_TYPE_FUTURE_DAY), use the normal forecast_list_item layout.\n* Otherwise, throw an IllegalArgumentException!\n",
              "instructor_notes": ""
            },
            {
              "id": 220621,
              "key": "74a15f85-1f52-4714-bb1c-5df7eb01870a",
              "title": "Sunshine's Today's List Item",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "74a15f85-1f52-4714-bb1c-5df7eb01870a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn to create a customized layout for Today's forecast in the RecyclerView. Follow the TODOs in the comments and check those steps below when you're done!\n\n### Exercise Code\n**Exercise:** [S11.02-Exercise-TodayListItem](https://github.com/udacity/ud851-Sunshine/tree/student/S11.02-Exercise-TodayListItem)",
                "answers": [
                  {
                    "id": "a1491596310694",
                    "text": "Create the new layout for Today's forecast called list_item_forecast_today",
                    "is_correct": true
                  },
                  {
                    "id": "a1491596311526",
                    "text": "Create boolean resources in both values and values-port to show/hide the customized Today's layout",
                    "is_correct": true
                  },
                  {
                    "id": "a1491596312294",
                    "text": "'Override getItemViewType, return a custom ID for today''s viewType and another ID for future day''s viewType'",
                    "is_correct": true
                  },
                  {
                    "id": "a1491596312897",
                    "text": "'In onCreateViewHolder, Inflate and use the correct layout based on the viewType returned from getItemViewType'",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 208355,
          "key": "39d4b075-7ab8-43dd-bfa6-9d6f8d8b2c2e",
          "title": "Solution: Sunshine Today's List Item",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "39d4b075-7ab8-43dd-bfa6-9d6f8d8b2c2e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208356,
              "key": "ff06c7b5-7be2-4d1d-8686-bb08babe13d7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Sunshine Today's List Item Solution\n\nHere's the solution code in case you would like to see how we did it, or if you got stuck at any point:\n\n### Solution Code\n**Solution:** [[S11.02-Solution-TodayListItem](https://github.com/udacity/ud851-Sunshine/tree/student/S11.02-Solution-TodayListItem)][[Diff](https://github.com/udacity/ud851-Sunshine/compare/S11.02-Exercise-TodayListItem...S11.02-Solution-TodayListItem)]",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 206705,
          "key": "b8792261-808e-4aeb-9dd8-071b54856e71",
          "title": "Exercise: Data Binding in Sunshine",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b8792261-808e-4aeb-9dd8-071b54856e71",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 220635,
              "key": "2332c2f7-bc43-4580-84d6-ee45ba2951d3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this exercise, you will get to update the layout for the Details Layout, while at the same time, use data binding to populate the information displayed on it. The goal is to get the Detail Layout look something like this:\n",
              "instructor_notes": ""
            },
            {
              "id": 220630,
              "key": "e9f9f6f4-c79c-454b-8daa-c0d097314d39",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/December/584b0507_databinding.003/databinding.003.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e9f9f6f4-c79c-454b-8daa-c0d097314d39",
              "caption": "",
              "alt": null,
              "width": 1024,
              "height": 768,
              "instructor_notes": null
            },
            {
              "id": 220742,
              "key": "b1810d6d-fe0a-4f66-b6e6-13399bb53fb3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To do so, start by enabling Data Binding in build.gradle, then:\n\n1. Create 2 new layouts, primary_weather_info and extra_weather_detail:\n..a. primary_weather_info should include the upper part of the design as shown in the image above\n..b. extra_weather_detail should include the extra details part of the design (Humidity, Pressure, etc)\n2. Replace the old detail layout with a new Linear Layout that will include 2 new layouts above\n3. Update the DetailActivity by replacing all findViewById calls with actual data binding like we did with the toy app.\n4. Finally, for accessibility, make sure you set content description of all the views in the new details activity.",
              "instructor_notes": ""
            },
            {
              "id": 220750,
              "key": "a7ba4b32-e0cb-4f6c-b6a7-30a18873f162",
              "title": "Exercise: Data Binding in Sunshine",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a7ba4b32-e0cb-4f6c-b6a7-30a18873f162",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Now it's your turn, follow the TODOs in the comments and check the steps below when you're done!\n\n### Exercise Code\n**Exercise:** [S11.03-Exercise-DetailLayoutAndDataBinding](https://github.com/udacity/ud851-Sunshine/tree/student/S11.03-Exercise-DetailLayoutAndDataBinding)\n",
                "answers": [
                  {
                    "id": "a1491596362802",
                    "text": "Create the 2 layouts, primary_weather_info and extra_weather_detail",
                    "is_correct": true
                  },
                  {
                    "id": "a1491596363522",
                    "text": "Replace the old Detail Layout with a new Linear Layout that will include 2 new layouts above",
                    "is_correct": true
                  },
                  {
                    "id": "a1491596364140",
                    "text": "Update the DetailActivity by replacing all findViewById calls with actual data bindings",
                    "is_correct": true
                  },
                  {
                    "id": "a1491596364741",
                    "text": "Set content description values of all the appropriate views in the new details activity",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 208364,
          "key": "035e7f79-854a-42bb-837b-8c88636e2ecd",
          "title": "Solution: Data Binding in Sunshine",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "035e7f79-854a-42bb-837b-8c88636e2ecd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 208365,
              "key": "8abb2f6f-8190-448b-9707-cd3191a1e30e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Data Binding in Sunshine Solution\n\nHere's the solution code in case you would like to see how we did it, or if you got stuck at any point:\n\n### Solution Code\n**Solution:** [[S11.03-Solution-DetailLayoutAndDataBinding](https://github.com/udacity/ud851-Sunshine/tree/student/S11.03-Solution-DetailLayoutAndDataBinding)][[Diff](https://github.com/udacity/ud851-Sunshine/compare/S11.03-Exercise-DetailLayoutAndDataBinding...S11.03-Solution-DetailLayoutAndDataBinding)]",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}