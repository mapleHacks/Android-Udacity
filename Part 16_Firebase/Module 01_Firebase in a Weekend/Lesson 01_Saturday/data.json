{
  "data": {
    "lesson": {
      "id": 182778,
      "key": "daa58d76-0146-4c52-b5d8-45e32a3dfb08",
      "title": "Saturday",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Start the weekend off right by implementing Firebase in FriendlyChat. FriendlyChat is a realtime messaging application.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/daa58d76-0146-4c52-b5d8-45e32a3dfb08/182778/1516791196930/Saturday%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/daa58d76-0146-4c52-b5d8-45e32a3dfb08/182778/1516791131012/Saturday%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 197863,
          "key": "ae3c1ff4-4f8c-4841-b1eb-daf0ceefb591",
          "title": "Weekend Plans",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ae3c1ff4-4f8c-4841-b1eb-daf0ceefb591",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197867,
              "key": "3f4333b2-c1e0-421d-869f-eac3f43d6012",
              "title": "Weekend Plans",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dFq4BjWb0YA",
                "china_cdn_id": "dFq4BjWb0YA.mp4"
              }
            }
          ]
        },
        {
          "id": 197864,
          "key": "ea441fa6-869c-4221-9246-ffdf920325bf",
          "title": "Course Contents",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ea441fa6-869c-4221-9246-ffdf920325bf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199566,
              "key": "6a30c4a7-d9ad-45cc-9324-231f6dff669b",
              "title": "Course Contents",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bP-3-m3gyx8",
                "china_cdn_id": "bP-3-m3gyx8.mp4"
              }
            }
          ]
        },
        {
          "id": 197865,
          "key": "110be876-4461-4b14-9ae8-3bd158413d8c",
          "title": "Favorite Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "110be876-4461-4b14-9ae8-3bd158413d8c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199444,
              "key": "86bb587a-fa3b-4a7c-9a94-c078ccd68620",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58138a1e_firebase-features/firebase-features.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/86bb587a-fa3b-4a7c-9a94-c078ccd68620",
              "caption": "",
              "alt": "",
              "width": 539,
              "height": 306,
              "instructor_notes": null
            },
            {
              "id": 200212,
              "key": "c2d6c88b-e4d6-4230-bb43-e5853e521830",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Firebase helps you develop high-quality apps, grow your user base, and earn money. Check out the descriptions of the Firebase features [here](https://firebase.google.com/features/) and the summaries below. Which features are you most interested in? (Features covered in this course are marked with an asterisk [*]).",
              "instructor_notes": ""
            },
            {
              "id": 200213,
              "key": "814a4a4e-4168-44c9-bcd0-225f78cdb8d3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "|||\n|---|---|\n|**Feature**|**Description**|  \n|*Analytics|Firebase Analytics is a free and unlimited analytics tool to help you get insight on app usage and user engagement.Check out how [PicCollage improves and analyzes their experiments with Firebase Analytics.](https://firebase.google.com/customers/#piccollage)|  \n\n### Develop\n\n|||\n|---|---|\n|**Feature**|**Description**|  \n|Cloud Messaging|Firebase Cloud Messaging lets you deliver and receive messages across platforms reliably. Check out the [Firebase Cloud Messaging documentation](https://firebase.google.com/docs/cloud-messaging/) for more details.|\n|*Authentication|Firebase Authentication is a key feature for protecting the data in your database and storage. Check out [authentication in action on Bobon Profiles](https://roast.bobon.coffee) to help save the brewing profiles of users.|\n|*Realtime Database|Firebase Realtime Database lets you sync data across all clients in realtime and remains available when your app goes offline. Check out how [Skyscanner uses Firebase Realtime Database to keep clients in sync with the database.](https://firebase.google.com/customers/#skyscanner)|\n|*Storage|Firebase Storage lets you store and serve user-generated content, such as photos or videos. Firebase Storage is backed by Google Cloud Storage, [used and trusted by many](https://cloud.google.com/customers/).|\n|Hosting|Firebase Hosting provides fast and secure static hosting. Check out [Firechat](https://firechat.firebaseapp.com/), one of the many web apps hosted with Firebase Hosting.|\n|Test Lab for Android|Firebase Test Lab lets you test on Android devices hosted in the cloud. Check out the [Firebase Test Lab for Android documentation](https://firebase.google.com/docs/test-lab/) for more details.|\n|Crash Reporting|Firebase Crash Reporting provides detailed reports of errors and bugs in your app.Check out how [Shazam uses Firebase Crash Reporting to find bugs to improve their user experience.](https://firebase.google.com/customers/#shazam)|\n\n### Grow\n\n|||\n|---|---|\n|**Feature**|**Description**|  \n|*Notifications|Firebase Notifications helps you re-engage with users at the right moment.Check out the [Firebase customers page](https://firebase.google.com/customers/) to see real-world uses of Firebase Notifications.|\n|*Remote Config|Firebase Remote Config can change the behavior and appearance of your app without publishing an app update. Check out how [Fabulous uses Firebase Remote Config to streamline their processes.](https://firebase.google.com/customers/#fabulous)|\n|App Indexing|With Firebase App Indexing, you can drive organic search traffic to your app, helping potential users of your app become your app’s biggest fans. Check out some [App Indexing case studies](https://firebase.google.com/docs/app-indexing/#how_does_it_work) from companies like Etsy and The Guardian.|\n|Dynamic Links|Firebase Dynamic Links lets you pull users right to the content they were interested in, keeping them engaged and increasing the likelihood that they will continue to use the app. Check out the [Firebase Developer Story on how NPR uses dynamic links.](https://www.youtube.com/watch?v=xyOVMlWh33g)|\n|Invites|Firebase Invites helps your users share your app with others. Check out some [case studies on apps using Invites such as Yummly.](https://firebase.google.com/docs/invites/case-studies)|\n|AdWords|AdWords help you search potential users with online ads. Check out the [AdWords testimonials page](https://www.google.com/adwords/testimonials) to see how businesses use Google ads.|\n\n### Earn\n\n|||\n|---|---|\n|**Feature**|**Description**|  \n|AdMob|AdMob provides easy and powerful ad monetization with full support in Firebase. Check out the [AdMob success stories page](https://www.google.com/admob/success.html) to see how businesses use AdMob.|",
              "instructor_notes": ""
            },
            {
              "id": 197993,
              "key": "8c5ba8e8-1b87-496f-b346-0583771a3c56",
              "title": "Favorite Features",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8c5ba8e8-1b87-496f-b346-0583771a3c56",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Which three are you most excited about?"
              },
              "answer": {
                "text": "Great! Let's get started.",
                "video": null
              }
            }
          ]
        },
        {
          "id": 197936,
          "key": "ef189a80-7f09-47cc-87c8-dc101ead7a1e",
          "title": "Examination of the Final App",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ef189a80-7f09-47cc-87c8-dc101ead7a1e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197938,
              "key": "0395da37-e8dd-4b1b-bf46-25ae556f1ca7",
              "title": "Examination of the Final App",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bfhV7wkuc_k",
                "china_cdn_id": "bfhV7wkuc_k.mp4"
              }
            }
          ]
        },
        {
          "id": 197902,
          "key": "8e7986e7-d560-402d-8f5c-b3a6e250bdb3",
          "title": "Creating a Firebase Project",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8e7986e7-d560-402d-8f5c-b3a6e250bdb3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199568,
              "key": "50051031-9eb6-4864-b020-d986bb07b6a6",
              "title": "Creating a Firebase Project",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Ready? Press next to get started!",
              "video": {
                "youtube_id": "DJhr70DGne8",
                "china_cdn_id": "DJhr70DGne8.mp4"
              }
            }
          ]
        },
        {
          "id": 199902,
          "key": "9196cb72-b1b3-42a1-9e71-ecc6e3e583c9",
          "title": "Download the Friendly Chat App",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9196cb72-b1b3-42a1-9e71-ecc6e3e583c9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199903,
              "key": "89f1e658-19c2-412e-9746-0a05f02d2876",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Download Course Resources\nStart by downloading the zipped file in the course resources. \n\n- Git: https://github.com/udacity/and-nd-firebase\n- Zipped Folder: <a href=\"https://github.com/udacity/and-nd-firebase/archive/1.00-starting-point.zip\">Android</a> \n\nIn order to bring in those powerful features we saw in the finished app, we need to create a project using the Firebase Console. Instructions to do this are next. If you don’t have a Google account yet, you can create one [here](https://accounts.google.com/signup).\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 197921,
          "key": "8bf43289-f20b-431f-bc9d-5dc223c506e7",
          "title": "Firing Up FriendlyChat",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8bf43289-f20b-431f-bc9d-5dc223c506e7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197924,
              "key": "f82ed55d-2150-4958-9368-dc0ea0757b2c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Create Project in Firebase Console\n\nStart by navigating to the <a href=\"https://console.firebase.google.com/\">Firebase Console</a> webpage.",
              "instructor_notes": ""
            },
            {
              "id": 197927,
              "key": "c5504f0e-edf1-4946-91bf-a1b1bbfa7874",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58111511_screen-shot-2016-10-26-at-1.34.19-pm/screen-shot-2016-10-26-at-1.34.19-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c5504f0e-edf1-4946-91bf-a1b1bbfa7874",
              "caption": "",
              "alt": null,
              "width": 2360,
              "height": 868,
              "instructor_notes": null
            },
            {
              "id": 197929,
              "key": "3d92d436-f92f-4775-9fd5-6e79a5c64c66",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Select \"CREATE NEW PROJECT\" and name your project.",
              "instructor_notes": ""
            },
            {
              "id": 197928,
              "key": "0fbf03ac-9604-40f2-b75d-00a2a8658757",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58111641_screen-shot-2016-10-26-at-1.35.10-pm/screen-shot-2016-10-26-at-1.35.10-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0fbf03ac-9604-40f2-b75d-00a2a8658757",
              "caption": "",
              "alt": null,
              "width": 458,
              "height": 453,
              "instructor_notes": null
            },
            {
              "id": 197930,
              "key": "d849f999-2bf4-40b0-8a70-abfa0c8f9fe3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this case, the name of our app is FriendlyChat, so let’s name the project FriendlyChat as well.",
              "instructor_notes": ""
            },
            {
              "id": 197933,
              "key": "deb76f8f-3165-4758-aaf9-aba55c83ebf6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/581117f9_screen-shot-2016-10-26-at-1.35.41-pm/screen-shot-2016-10-26-at-1.35.41-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/deb76f8f-3165-4758-aaf9-aba55c83ebf6",
              "caption": "",
              "alt": null,
              "width": 453,
              "height": 447,
              "instructor_notes": null
            },
            {
              "id": 197934,
              "key": "6014d70a-4477-4b64-9fa3-66bad43fdd8f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " Once your project is created, you can see the project’s Overview page.",
              "instructor_notes": ""
            },
            {
              "id": 197935,
              "key": "fcf03aef-e529-42a1-b91e-a39a02518080",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58111844_screen-shot-2016-10-26-at-1.36.23-pm/screen-shot-2016-10-26-at-1.36.23-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fcf03aef-e529-42a1-b91e-a39a02518080",
              "caption": "",
              "alt": null,
              "width": 1624,
              "height": 834,
              "instructor_notes": null
            },
            {
              "id": 197937,
              "key": "072d3a57-836d-407d-9ca9-42fdf87ba6e1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Take a moment to look at the console home page for FriendlyChat. You’ll see tabs on the left associated with many of the features we are going to be exploring. Feel free to click on the tabs and see where they lead. When you’re ready, move on to the next step in setting up your app.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 199918,
          "key": "30f87781-896d-4ba4-8e5a-6ac95dbde072",
          "title": "Create a Firebase Project for Android",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "30f87781-896d-4ba4-8e5a-6ac95dbde072",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199950,
              "key": "77a93489-7aa5-49b7-91bc-c256b62047a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Create a Firebase Project for Android\n\nFrom the FriendlyChat project page in the Firebase Console, select “Add Firebase to your Android App”. This opens a dialog window that asks for your app’s **Package name** and the **Debug signing certificate SHA-1**. It also asks for an optional App Nickname, which you can keep blank.",
              "instructor_notes": ""
            },
            {
              "id": 199949,
              "key": "9422bdbb-4ef3-423b-9a27-c1baae02ec39",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/581a8363_screen-shot-2016-11-02-at-2.44.30-pm/screen-shot-2016-11-02-at-2.44.30-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9422bdbb-4ef3-423b-9a27-c1baae02ec39",
              "caption": "",
              "alt": null,
              "width": 731,
              "height": 292,
              "instructor_notes": null
            },
            {
              "id": 199919,
              "key": "c462a268-ea78-4763-97a9-2d9f60ebbcee",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Finding the app's package name",
              "instructor_notes": ""
            },
            {
              "id": 199948,
              "key": "13fe2bb7-6154-463e-890c-69e0c1c5fd75",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/581a8335_screen-shot-2016-11-02-at-2.45.32-pm/screen-shot-2016-11-02-at-2.45.32-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/13fe2bb7-6154-463e-890c-69e0c1c5fd75",
              "caption": "",
              "alt": null,
              "width": 690,
              "height": 682,
              "instructor_notes": null
            },
            {
              "id": 199922,
              "key": "6108826b-e43c-456c-90e7-2c0e642b4081",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For the package name, paste in `com.google.firebase.udacity.friendlychat` so it matches the package name from the FriendlyChat project downloaded earlier. You can find this in your app's build.gradle file:",
              "instructor_notes": ""
            },
            {
              "id": 199924,
              "key": "1937f3c1-031b-4062-bf79-2ce18657231f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/581a6483_screen-shot-2016-11-02-at-3.09.14-pm/screen-shot-2016-11-02-at-3.09.14-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1937f3c1-031b-4062-bf79-2ce18657231f",
              "caption": "",
              "alt": null,
              "width": 1346,
              "height": 96,
              "instructor_notes": null
            },
            {
              "id": 199925,
              "key": "d2598c42-fd69-49af-9b4e-392ac8efba46",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Getting the Debug Certificate\nYou’ll need to add the debug signing certificate too because you’ll implement Google Sign-In for authentication in FriendlyChat. The SHA-1 is a type of hash representation for the debug keystore, which you can get with the keytool command line tool. Which is a long way of saying, the debug keystore is a bunch of letters and numbers, which you should keep secret, that identifies your computer.\n\nOn Windows, open the Command Prompt program. You can do this by going to the Start menu \n\n```\nkeytool -exportcert -list -v \\\n-alias androiddebugkey -keystore %USERPROFILE%\\.android\\debug.keystore\n```\n\n\nOn Mac/Linux, open the Terminal and paste\n\n\n```\nkeytool -exportcert -list -v \\\n-alias androiddebugkey -keystore ~/.android/debug.keystore\n```\n\n\nWhen prompted to input a password, type `android` and then press Enter. Don’t worry if you don’t see any characters appear on the screen when typing the password, as your command line interface is hiding them on purpose.\n\n\nAfter you paste the command and press Enter, you’ll see some text output like the following:",
              "instructor_notes": ""
            },
            {
              "id": 199928,
              "key": "0740eba7-a6af-4c44-b2d1-94afad887752",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/581a6561_image02/image02.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0740eba7-a6af-4c44-b2d1-94afad887752",
              "caption": "",
              "alt": null,
              "width": 1610,
              "height": 972,
              "instructor_notes": null
            },
            {
              "id": 199929,
              "key": "65d1dd37-cb87-4ccd-b23f-35296a859acb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Select the string of numbers and colons after the line that’s labeled “SHA-1:” and copy it. Then paste it in the dialog back in the Firebase Console.\n\n## google-services.json\n\nOnce you click “Add App”, a google-services.json file should download automatically.  The google-services.json file connects your client-side app with your specific Firebase project that will handle the server-side components of your app.\n\nOnce the download is complete, move the google-services.json file to the app directory of the FriendlyChat project. In Android Studio, you can select the “Project” view in the top-left corner of the Project navigation view, and then open the app directory. You can then drag the google-services.json file into the Android Studio project. You should end up with a project file tree like the following screenshot:\n",
              "instructor_notes": ""
            },
            {
              "id": 199930,
              "key": "712a050b-eda8-4617-beaa-9eba8b95d796",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/581a65ec_image04/image04.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/712a050b-eda8-4617-beaa-9eba8b95d796",
              "caption": "",
              "alt": null,
              "width": 632,
              "height": 465,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 197939,
          "key": "45412ec1-9320-4b66-968b-e6885a92194d",
          "title": "Finish Creating a Firebase Project for Android",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "45412ec1-9320-4b66-968b-e6885a92194d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197946,
              "key": "353bd975-75bf-4c7d-914a-e7ae4d7ef5c3",
              "title": "Creating A Firebase Project (Android)",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Firebase on Android requires a device with a recent version of Google Play Services. Most physical devices should work properly.\n\n\nFor emulated devices, ensure that the installation of Android tools in the SDK Manager are fully up to date. See the documentation to [\"Update Your Tools with the SDK Manager\"](https://developer.android.com/studio/intro/update.html#sdk-manager) for more information. Specifically, you'll need to have the \"Google API\" system images for the emulator you'll be running. When creating an Android virtual device to use, double check that it says \"(with Google APIs)\" in the target column, meaning it has Google Play Services installed.\n\n\nFor example, to set up an Android Nougat emulator (Android 7.0, API 24), we can open the AVD Manager and select the AVD labeled \"(with Google APIs)\" in the target section when creating a virtual device.",
              "video": {
                "youtube_id": "WBuijsaCJBs",
                "china_cdn_id": "WBuijsaCJBs.mp4"
              }
            },
            {
              "id": 200211,
              "key": "e001d7d9-e0a6-41e4-a300-7ca06a3a83a6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/November/581d1c2d_emulator/emulator.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e001d7d9-e0a6-41e4-a300-7ca06a3a83a6",
              "caption": "",
              "alt": null,
              "width": 1400,
              "height": 111,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 197940,
          "key": "d32f2e6e-cb0b-4c15-857d-a472f3a6d847",
          "title": "Starter Code Walkthrough",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d32f2e6e-cb0b-4c15-857d-a472f3a6d847",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197944,
              "key": "4ae63093-f7d7-40e9-b722-01957c933dae",
              "title": "Starter Code Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "42vfu8IFN7s",
                "china_cdn_id": "42vfu8IFN7s.mp4"
              }
            }
          ]
        },
        {
          "id": 197962,
          "key": "09a34c7b-2917-47bb-8f23-7446a65f855e",
          "title": "Starter Code Walkthrough Exercise",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "09a34c7b-2917-47bb-8f23-7446a65f855e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197965,
              "key": "02fe1cd1-9a77-4c54-ba71-f618ad2b198c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you have a brief overview of the starter code for FriendlyChat, explore the starter code on your own to find the answers to the following questions:",
              "instructor_notes": ""
            },
            {
              "id": 197978,
              "key": "3d115b53-9baa-4ac8-b17e-eee9095c7143",
              "title": "Question 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3d115b53-9baa-4ac8-b17e-eee9095c7143",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What’s the minimum Android SDK level targeted by the FriendlyChat app?",
                "answers": [
                  {
                    "id": "a1477516572684",
                    "text": "9",
                    "is_correct": false
                  },
                  {
                    "id": "a1477516668154",
                    "text": "10",
                    "is_correct": false
                  },
                  {
                    "id": "a1477516674569",
                    "text": "15",
                    "is_correct": false
                  },
                  {
                    "id": "a1477516677072",
                    "text": "16",
                    "is_correct": true
                  },
                  {
                    "id": "a1477516689219",
                    "text": "18",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 197980,
              "key": "c05f02ed-4df3-4c2a-9576-97b9e0cbbbd4",
              "title": "Question 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c05f02ed-4df3-4c2a-9576-97b9e0cbbbd4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What’s the default message limit length for the EditText?",
                "answers": [
                  {
                    "id": "a1477517193389",
                    "text": "10",
                    "is_correct": false
                  },
                  {
                    "id": "a1477517243754",
                    "text": "100",
                    "is_correct": false
                  },
                  {
                    "id": "a1477517246786",
                    "text": "240",
                    "is_correct": false
                  },
                  {
                    "id": "a1477517249559",
                    "text": "1000",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 197981,
              "key": "4ca7c02d-45a1-4d2c-a6e8-004a9d595cea",
              "title": "Questions 3",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4ca7c02d-45a1-4d2c-a6e8-004a9d595cea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What class(es) is the image library Glide used in?",
                "answers": [
                  {
                    "id": "a1477517510639",
                    "text": "build.gradle",
                    "is_correct": false
                  },
                  {
                    "id": "a1477517529282",
                    "text": "FriendlyMessage.java",
                    "is_correct": false
                  },
                  {
                    "id": "a1477517530565",
                    "text": "MainActivity.java",
                    "is_correct": false
                  },
                  {
                    "id": "a1477517531451",
                    "text": "MessageAdapter.java",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 200241,
          "key": "a21a2a11-c636-4ce3-b264-b860d285a3a4",
          "title": "Add Firebase SDK",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a21a2a11-c636-4ce3-b264-b860d285a3a4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 200242,
              "key": "eacd560f-ec92-4d1b-88c5-484c0ab32a79",
              "title": "Add Firebase SDK",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Solution Diff: [1.01-firebase-gradle-plugin](https://github.com/udacity/and-nd-firebase/compare/1.00-starting-point...1.01-firebase-gradle-plugin)",
              "video": {
                "youtube_id": "VJdwtizIoww",
                "china_cdn_id": "VJdwtizIoww.mp4"
              }
            }
          ]
        },
        {
          "id": 197905,
          "key": "38d531f8-59ab-40b1-ac95-4485369a6362",
          "title": "Firebase Realtime Database",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "38d531f8-59ab-40b1-ac95-4485369a6362",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197949,
              "key": "f08fccd1-00ec-4083-9de9-a0bb4c699460",
              "title": "Realtime Database Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jg35rG2Ypa0",
                "china_cdn_id": "jg35rG2Ypa0.mp4"
              }
            }
          ]
        },
        {
          "id": 197906,
          "key": "09a9d9b5-9036-445d-81f0-f5596215cc60",
          "title": "Why Firebase Realtime Database?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "09a9d9b5-9036-445d-81f0-f5596215cc60",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197950,
              "key": "52997c24-ce85-453f-b7ed-aa2e366013fc",
              "title": "Why Firebase Realtime Database?",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Seb5E2HigQA",
                "china_cdn_id": "Seb5E2HigQA.mp4"
              }
            }
          ]
        },
        {
          "id": 197907,
          "key": "4fc670ff-94bd-47f8-9883-22ad94cc5b35",
          "title": "Database Structure",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4fc670ff-94bd-47f8-9883-22ad94cc5b35",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197951,
              "key": "c1ba9ff8-fec1-40a0-babe-c85ce38f3e7e",
              "title": "Database Structure",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "If you'd like to learn more about JSON, check out the following resource:\n* [Android Basics JSON Videos](https://classroom.udacity.com/courses/ud843/lessons/1335cf7d-bb4f-48c6-8503-f14b127d2abc/concepts/cf8cd625-1fef-4d03-991b-2808a3ddb47c#)\n* [JSON overview from W3schools](http://www.w3schools.com/js/js_json_intro.asp)\n\nIf you have extra time this weekend, you can learn more about push IDs at [The Firebase Blog: The 2^120 Ways to Ensure Unique Identifiers](https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html)",
              "video": {
                "youtube_id": "sWjYlFBm-Y0",
                "china_cdn_id": "sWjYlFBm-Y0.mp4"
              }
            }
          ]
        },
        {
          "id": 197908,
          "key": "2dc64dc1-b2f4-466b-8fb5-e5381e03bef2",
          "title": "Exploring the Database",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2dc64dc1-b2f4-466b-8fb5-e5381e03bef2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199335,
              "key": "97a3b016-cc25-4027-b4ff-7f6335365d9d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Take a look at the database below and then answer the following questions:\n\n<pre>\n{  \n   \"questions\": {  \n      \"ABCDakarandomkey\": {  \n         \"question\": \"Who was the 13th president of the United States?\",\n         \"choice_1\": \"Millard Fillmore\",\n         \"choice_2\": \"Zachary Taylor\",\n         \"choice_3\": \"Franklin Pierce\",\n         \"choice_4\" :\"James K. Polk\",\n         \"answer\" :\"choice_1\"\n      },\n      \"EFGHakarandomkey\": {  \n         \"question\": \"In what year was the first gasoline combustion engine invented?\",\n         \"choice_1\": \"1769\",\n         \"choice_2\": \"1886\",\n         \"choice_3\": \"1807\",\n         \"choice_4\": \"1864\",\n         \"answer\": \"choice_4\"\n      }\n   },\n   \"players\": {  \n      \"user_key_1\": {  \n         \"name\": \"Person\",\n         \"opponents\": {  \n            \"IJKLakarandomkey\": \"user_key_2\",\n            \"MNOPakarandomkey\": \"user_key_6\"\n         },\n         \"questions\": {  \n            \"ABCDakarandomkey\": \"Correct\",\n            \"EFGHakarandomkey\": \"Incorrect\"\n         }\n      },\n      \"user_key_2\": {  \n         \"name\": \"Mai\",\n         \"opponents\": {  \n            \"QRAAakarandomkey\": \"user_key_1\",\n            \"SQUEakarandomkey\": \"user_key_6\"\n         },\n         \"questions\": {  \n            \"ABCDakarandomkey\": \"Incorrect\",\n            \"EFGHakarandomkey\": \"Incorrect\"\n         }\n      }\n   },\n   \"opponents\": {  \n      \"couple_Key_1\": \"user_key_1_user_key_2\",\n      \"user_1\": \"user_key_1\",\n      \"user_2\": \"user_key_2\",\n      \"winner\": \"user_key_1\"\n   }\n}\n</pre>",
              "instructor_notes": ""
            },
            {
              "id": 199336,
              "key": "12696e51-3b45-479a-9c84-5eb860ecbba8",
              "title": "Question 1",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "12696e51-3b45-479a-9c84-5eb860ecbba8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Select the all of the nodes that are direct children of the **players** node:",
                "answers": [
                  {
                    "id": "a1477595673900",
                    "text": "user_key_1",
                    "is_correct": true
                  },
                  {
                    "id": "a1477595735077",
                    "text": "user_key_2",
                    "is_correct": true
                  },
                  {
                    "id": "a1477595742457",
                    "text": "Mai",
                    "is_correct": false
                  },
                  {
                    "id": "a1477595749509",
                    "text": "Person",
                    "is_correct": false
                  },
                  {
                    "id": "a1477595757238",
                    "text": "name",
                    "is_correct": false
                  },
                  {
                    "id": "a1477595764831",
                    "text": "questions",
                    "is_correct": false
                  },
                  {
                    "id": "a1477595785680",
                    "text": "opponents",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 199945,
              "key": "307b5fdc-ec50-41cb-ae77-893ed162960a",
              "title": "Question 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "307b5fdc-ec50-41cb-ae77-893ed162960a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What path refers to the key/value pair  'choice_4: \"1864\" '",
                "answers": [
                  {
                    "id": "a1478130633071",
                    "text": "/players/EFGHakarandomkey/choice_4",
                    "is_correct": false
                  },
                  {
                    "id": "a1478130665587",
                    "text": "/questions/EFGHakarandomkey/Question:\"In what year was the first gasoline combustion engine invented?\"/choice_4",
                    "is_correct": false
                  },
                  {
                    "id": "a1478130673846",
                    "text": " /questions/EFGHakarandomkey/choice_4/\"1864\"",
                    "is_correct": false
                  },
                  {
                    "id": "a1478130697788",
                    "text": " /questions/EFGHakarandomkey/choice_4",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 199339,
              "key": "e525e86a-560b-453d-80ab-5e748ac833b2",
              "title": "Questions 3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e525e86a-560b-453d-80ab-5e748ac833b2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the value of the key at the path /questions/ABCDakarandomkey/answer ?",
                "answers": [
                  {
                    "id": "a1477595983873",
                    "text": "Millard Fillmore",
                    "is_correct": false
                  },
                  {
                    "id": "a1477596017537",
                    "text": "choice_1",
                    "is_correct": true
                  },
                  {
                    "id": "a1477596031815",
                    "text": "answer",
                    "is_correct": false
                  },
                  {
                    "id": "a1477596035424",
                    "text": "1864",
                    "is_correct": false
                  },
                  {
                    "id": "a1477596053902",
                    "text": "Incorrect",
                    "is_correct": false
                  },
                  {
                    "id": "a1477596062399",
                    "text": "Correct",
                    "is_correct": false
                  },
                  {
                    "id": "a1477596087089",
                    "text": "Who was the 13th president of the United States",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 199341,
              "key": "42cf86b8-14d7-4ab7-b18e-9178cd41df0f",
              "title": "Question 4",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "42cf86b8-14d7-4ab7-b18e-9178cd41df0f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "What kind of app could this database belong to?"
              },
              "answer": {
                "text": "This is likely a database for a trivia game or competition app of some type. Answers that would fit are a trivia game, a video game, app for quiz bowl, etc.",
                "video": null
              }
            }
          ]
        },
        {
          "id": 197983,
          "key": "ce4df3ed-3413-412d-99a7-1aba02364fda",
          "title": "Database Implementation - Writing 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce4df3ed-3413-412d-99a7-1aba02364fda",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197995,
              "key": "f9b27551-5649-4da0-9235-525ba4fef082",
              "title": "Database Implementation - Writing 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "[Firebase documentation - Add Firebase to Your Android Project](https://firebase.google.com/docs/android/setup)",
              "video": {
                "youtube_id": "Ip5UHBT-QyQ",
                "china_cdn_id": "Ip5UHBT-QyQ.mp4"
              }
            }
          ]
        },
        {
          "id": 197996,
          "key": "e3fc800e-d978-4dcf-968e-677495dd9ebf",
          "title": "Database Implementation - Writing 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e3fc800e-d978-4dcf-968e-677495dd9ebf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197997,
              "key": "407ee3df-512d-4d00-b895-9833890daacc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let’s implement message sending in the app.\n\n\nTo do so, we’ll add a click listener to the send button:\n\n\n```\n// Send button sends a message and clears the EditText\nmSendButton.setOnClickListener(new View.OnClickListener() {\n   @Override\n   public void onClick(View view) {\n       // TODO: Send messages on click\n\n\n       // Clear input box\n       mMessageEditText.setText(\"\");\n   }\n});\n```\n\n\nWithin the onClick method, let’s create a FriendlyMessage object for the message that the user typed in. The FriendlyMessage object has three instance variables:\nA String for the user’s name,\nA String for the text of the message\nA String for the URL of the photo if it’s a photo message.\n\n\nIn this case, we’re only sending text messages for now (we will implement photo-messaging later), so we’ll create a FriendlyMessage object with all the fields except for `photoUrl`, which will be `null`.\n\n\n```\nFriendlyMessage friendlyMessage = new FriendlyMessage(mMessageEditText.getText().toString(), mUsername, null);\n```\n\n\nThis object has all the keys that we’ll store as a message in the realtime database. In the next step we’ll store this data to the cloud in our realtime database.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 197999,
          "key": "c9fd4622-eb41-45bd-bad0-ff6240bf76c4",
          "title": "Database Implementation - Writing 3",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c9fd4622-eb41-45bd-bad0-ff6240bf76c4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199334,
              "key": "8cbbbab3-1b09-44e2-b02e-8784f0c2fe1d",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8cbbbab3-1b09-44e2-b02e-8784f0c2fe1d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at the Firebase documentation for [\"Save Data on Android\"](https://firebase.google.com/docs/database/android/save-data). Based on this guide and the code that you have already completed for getting database references, which of the following would add the new message data for `friendlyMessage` to the database? Once you've got the correct answer add it to your code!",
                "answers": [
                  {
                    "id": "a1477595115309",
                    "text": "mMessagesDatabaseReference.updateChildValues(\"messages\");",
                    "is_correct": false
                  },
                  {
                    "id": "a1477595129470",
                    "text": "mMessagesDatabaseReference.push().setValue(friendlyMessage);",
                    "is_correct": true
                  },
                  {
                    "id": "a1477595175512",
                    "text": "mMessagesDatabaseReference.append(friendlyMessage);",
                    "is_correct": false
                  },
                  {
                    "id": "a1477595182014",
                    "text": "mMessagesDatabaseReference.setValue(friendlyMessage);",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 198000,
          "key": "9326b697-1bd9-4aba-ac3b-4755716ae7be",
          "title": "Database Rules for Testing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9326b697-1bd9-4aba-ac3b-4755716ae7be",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 198001,
              "key": "a9ba0b65-87ae-42f9-8432-4f554cb4c693",
              "title": "Database Rules for Testing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9gj8GW5BZDE",
                "china_cdn_id": "9gj8GW5BZDE.mp4"
              }
            }
          ]
        },
        {
          "id": 198003,
          "key": "6b6d3008-1869-44eb-b272-194e39766300",
          "title": "Reading from the Firebase Realtime Database",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6b6d3008-1869-44eb-b272-194e39766300",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 198004,
              "key": "9d72ef9f-6357-4c11-b8c5-f822e412ad39",
              "title": "Reading from the Firebase Realtime Database ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DMg-zysdHtc",
                "china_cdn_id": "DMg-zysdHtc.mp4"
              }
            }
          ]
        },
        {
          "id": 200047,
          "key": "34331b1b-e903-41f6-b9c5-8817cf786fb6",
          "title": "Database Implementation - Reading",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "34331b1b-e903-41f6-b9c5-8817cf786fb6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 200053,
              "key": "2e7edb07-4e75-415d-9069-52c2ec9fdd37",
              "title": " Database Implementation - Reading",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "If you'd like to see an example of objects in Firebase, the  [read and write documentation](https://firebase.google.com/docs/database/android/read-and-write#basic_write) for Android has an example with the User class.\n\nSolution Diff: [1.03-firebase-database-read](https://github.com/udacity/and-nd-firebase/compare/1.02-firebase-database-write...1.03-firebase-database-read)",
              "video": {
                "youtube_id": "amh6wgy1zIg",
                "china_cdn_id": "amh6wgy1zIg.mp4"
              }
            }
          ]
        },
        {
          "id": 198007,
          "key": "4ce3ed88-10a2-4cd5-8564-49f343a08f2e",
          "title": "Database Implementation - Reading Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4ce3ed88-10a2-4cd5-8564-49f343a08f2e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 198008,
              "key": "5d971dd0-ae13-489c-ab63-0a9454387801",
              "title": "Database Implementation - Reading",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7ZZs71yLH94",
                "china_cdn_id": "7ZZs71yLH94.mp4"
              }
            }
          ]
        },
        {
          "id": 197963,
          "key": "ad716a20-11b0-43aa-aa5a-1b5fd7b956ef",
          "title": "Database Rules for Testing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ad716a20-11b0-43aa-aa5a-1b5fd7b956ef",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199402,
              "key": "fc369e07-36d7-4d83-a432-1f1d8e25627f",
              "title": "Database Rules for Testing Exercise",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fc369e07-36d7-4d83-a432-1f1d8e25627f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "It’s great that we were able to change the Firebase Realtime Database rules so that we could easily read and write data. Problem solved, right? Well not exactly. Setting the read and write rules to “true” is useful while building an app, but can have dire consequences if used when deploying an app. Why is it a bad idea to leave the rules as “true” when you deploy an app?\n"
              },
              "answer": {
                "text": "Without database rules, anyone can change the database without consequence. There is no easy way to track who is making these changes. What if the data on the database was personal or private? When database rules don’t restrict reading and writing, anyone who has the app  - or knows the URL of our database - has access to all of that information.\n\n\nNext we will cover the right way to let users read and write while still protecting data using Security rules and Authentication.\n",
                "video": null
              }
            }
          ]
        },
        {
          "id": 197964,
          "key": "50e6dd0c-21bb-486d-b1d8-dafa7d112728",
          "title": "Database Security",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "50e6dd0c-21bb-486d-b1d8-dafa7d112728",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197966,
              "key": "943382cb-d940-4d4e-afbb-1eea95b2c6bb",
              "title": "Database Security",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XzdaM1pcLec",
                "china_cdn_id": "XzdaM1pcLec.mp4"
              }
            }
          ]
        },
        {
          "id": 197967,
          "key": "b1d107aa-5a83-4cd4-b10c-11485a68e5a7",
          "title": "Database Security Rules",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b1d107aa-5a83-4cd4-b10c-11485a68e5a7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197976,
              "key": "6fa4587e-1f51-4c8b-b6ce-3ae7e90acbe3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Remember the database rules we changed? We made it so anyone can read and write data without checking authentication.",
              "instructor_notes": ""
            },
            {
              "id": 197984,
              "key": "89c26488-daff-445f-9096-45f1c9600c8c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/581138f2_screen-shot-2016-10-26-at-2.32.35-pm/screen-shot-2016-10-26-at-2.32.35-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/89c26488-daff-445f-9096-45f1c9600c8c",
              "caption": "",
              "alt": null,
              "width": 2188,
              "height": 1086,
              "instructor_notes": null
            },
            {
              "id": 197977,
              "key": "bb8f8a13-5b70-4d30-91ce-d38446dd091e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let’s change it back to the default rules, which means that users need to be authenticated to read and write data. These rules are enforced by the Firebase servers. So there is no way for our users to bypass the rules that we set.",
              "instructor_notes": ""
            },
            {
              "id": 197985,
              "key": "843a0586-31fc-4313-87c3-e5f2c56d4fd9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2016/October/58113916_screen-shot-2016-10-26-at-2.32.15-pm/screen-shot-2016-10-26-at-2.32.15-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/843a0586-31fc-4313-87c3-e5f2c56d4fd9",
              "caption": "",
              "alt": null,
              "width": 2172,
              "height": 1048,
              "instructor_notes": null
            },
            {
              "id": 200054,
              "key": "1902899b-68dd-40ab-a32d-364842797675",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "These rules are a good starting point for a simple chat app like FriendlyChat, but there are certainly plenty of cases where we will want to further restrict access. Let’s examine how Firebase Database security rules make this possible.\n\n\n\n### Rule Types\nFirebase allows three main rule types: .read, .write. And .validate. Each of these can be set to “true” or “false” and can apply to the whole database or a particular location in the database depending on how they are configured.\n\n|**Rule Type**|**Description**|\n|----------|-------------|\n|.read |  Describes whether data can be read by the user.|\n| .write | Describes whether data can be written by the user.   |   \n| .validate | Defines what a correctly formatted value looks like, whether it has child nodes, and the data type. |  \n\n\n### Predefined Variables\n Firebase Database Security includes a set of predefined variables that enable you to customize data accessibility. Below is a list of predefined variables and a link to each API reference. \n\n|**Variable**   |**Description**|  \n|------------------ --------------|\n|[now](https://firebase.google.com/docs/reference/security/database/#now) |  The current time in milliseconds since Unix epoch time (January 1, 1970)|\n| [root](https://firebase.google.com/docs/reference/security/database/#root) | Corresponds to the current data at the root of the database. You can use this to read any data in your database in your rule expressions. |   \n|[newData](https://firebase.google.com/docs/reference/security/database/#newdata) | Corresponds to the data that will result if the write is allowed|  \n|[data](https://firebase.google.com/docs/reference/security/database/#data) | Corresponds to the current data in Firebase Realtime Database at the location of the currently executing rule.|  \n|[$variables](https://firebase.google.com/docs/reference/security/database/#location) | A wildcard path used to represent ids and dynamic child keys.|  \n|[auth](https://firebase.google.com/docs/reference/security/database/#auth) | Contains the token payload if a user is authenticated, or null if the user isn't authenticated.|  \n\nWe will expand on the auth variable because we will use it in database security examples.\n\n### Auth\nThe auth variable contains the JSON web token for the user. A JSON Web Token is a standard that defines a way of securely transmitting information between parties, like the database and a client, as a JSON object. Once a user is authenticated, this token contains the provider, the uid, and the Firebase Auth ID token.\n\nThe provider is the method of authentication, such as email/password, Google Sign In, or Facebook Login.\n\nThe uid is a unique user ID. This ID is guaranteed to be unique across all providers, so a user that authenticates with Google and a user that authenticates with email/password do not risk having the same identification.\n\n\nThe Firebase Auth ID is a web token. Yes, this means that there is a web token inside of the Auth web token! This token can contain the following data:\n\n|**Data**|**Description**|     \n|----------|-------------|\n|email | The email address associated with the account.|\n| email_verified | A boolean that is true if the user has verified they have access to the email address. Some providers automatically verify email addresses. You can customize authentication to include email verification for email/password on iOS. |   \n|name | The user’s display name, if one is set.|  \n|sub| The user’s Firebase uID.|  \n|firebase.identities |Dictionary of all the identities that are associated with this user's account.|  \n|firebase.sign_in_provider | The sign-in provider used to obtain this Firebase Auth ID token.|  \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 200076,
          "key": "60c2664c-3419-4b96-a2cb-42865f29e89f",
          "title": "Advanced Database Rules",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "60c2664c-3419-4b96-a2cb-42865f29e89f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 200077,
              "key": "f58a03f4-8ca4-4ced-85e7-94b8635cae8e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Advanced  Rules\nSometimes, we don’t want to apply a rule to all users of an app. We may want to have administrative access for some users, allowing them to access data that other users cannot. We may want to unlock features stored in the database when users reach some target, like number of messages sent. We may want to add premium features to our app that only paying customers can access. Let’s look at how we can use group-specific rules to enforce premium feature access.\n\nFor FriendlyChat we could, for example, give paying customers access to private chat rooms. We'll want to configure the database to include a child of messages that will contain the messages from this special chat, and rules so that only the users who paid for the service can access private chat rooms. We will use .read and .write rules to control access those chat rooms.\nLet’s compare the structure of a FriendlyChat database that includes private chat rooms under the key “special_chat” to the structure of the rules restricting that database.\n\n**Database:**\n\n```json\n{\n \"chat\": {\n   \"messages\": {\n     \"-KS3PV-iwUZp5wkNq70s\": {\n       \"name\": \"person1\",\n       \"text\": \"hey!\"\n     },\n     \"-KS3PXhIhs8J_inrExy4\": {\n       \"name\": \"person2\",\n       \"text\": \"what’s up?\"\n     }\n   }\n },\n \"special_chat\": {\n   \"messages\": {\n     \"-KR-DwqtKzlWGxSn9P0y\": {\n       \"name\": \"person1\",\n       \"text\": \"Want to go to the movies?\"\n     },\n     \"-KR4tIpWmNn-EYxquSrw\": {\n       \"name\": \"person3\",\n       \"text\": \"Yeah! Let’s meet at 7.\"\n     }\n   }\n },\n \"users\": {\n   \"uid1\": {\n     \"paid\": true\n   },\n   \"uid2\": {\n     \"paid\": false\n   },\n   \"uid3\": {\n     \"paid\": true\n   }\n }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 200078,
              "key": "887b7783-c183-4a56-9d19-903f72a7e070",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Database Security Rules:**\n\n```json\n{\n \"rules\": {\n   \"chat\" : {\n     \"messages\" : {\n       \".read\": \"auth != null\",\n       \".write\": \"auth != null\"\n     }\n   },\n   \"special_chat\" : {\n     \"messages\": {\n       \".read\": \n       \"root.child('users').child(auth.uid).child('paid').val() === true\",\n       \".write\": \n       \"root.child('users').child(auth.uid).child('paid').val() === true\"\n     }\n   }\n }\n}\n```\n   \nThis database is different from the one we currently use for FriendlyChat. Instead of one top-level `\"messages\"` node, there are three top-level nodes.\n\n- `\"chat\"`: contains a \"messages\" node. Like in FriendlyChat, this is for normal authenticated chat messages.\n- `\"special_chat\"`:  contains a \"messages\" node. Unlike in FriendlyChat, this should only be accessible by paid users.\n- `\"users\"`: contains user IDs nodes, each with a boolean flag to indicate if the user has paid.\n\n\nThe security rules for this database have a structure similar to that of the database itself.\n\n\n- `\"chat/messages\"` has `.read`/`.write` rules that give access only to authenticated users.\n- `\"special_chat/messages\"` has `.read`/`.write` rules that only allow access to users with a `\"paid\"` value of `true` in the top-level `\"users\"` database.\n\n\nNote that we traverse to `\"users\"` from using  the `root` predefined variable, and we get the current user's uID with `auth.uid`. In this example, we see that the user `uid1` has paid for special_chat access, and the user with `uid2` has not paid for access. ",
              "instructor_notes": ""
            },
            {
              "id": 200079,
              "key": "c8cab7dc-6c91-4b83-836f-5e52c69270b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Cascading Rules\nWhen `.read` and `.write` rule permissions are evaluate to `true`, this cascades to all of the rule’s children. Only truth is cascading; falseness is not cascading. This means any child of the node that has `true` .read or .write rules is also true. If a parent has .read or .write true, this access cannot be revoked by a child node as shown in this example: \n\n\n```javascript\n{\n \"chat\": {\n   \"messages\": {\n     \"-KRiMpW5bate5qV0Rt7i\": {\n       \"name\": \"person1\",\n       \"text\": \"hey!\"\n     },\n     \"-KQWHI_eepS4CGr8-kJd\": {\n       \"name\": \"person2\",\n       \"text\": \"what’s up?\"\n     }\n   },\n   \"admin_blog\": {\n     \"Jan 1\": \"Welcome to my page\",\n     \"Jan 2\": \"Enjoying the weather?\"\n   },\n   \"special_chat\": {\n   },\n   \"users\": {\n     \"uid1\": {\n       \"paid\": true\n     },\n     \"uid2\": {\n       \"paid\": false\n     },\n     \"uid3\": {\n       \"paid\": true\n     }\n   }\n }\n}\n```\n```javascript\n{\n \"rules\": {\n   \"chat\" : {\n     // allows read and write to /chat/<all children>\n     // which includes /chat/messages and /chat/admin_blog\n     \".read\": \"true\",\n     \".write\": \"true\",\n\n\n     \"admin_blog\" : {\n       // will not negate the ability of the user to write to the blog\n       \".write\" : \"false\"\n     }\n   }\n }\n}\n```\n\n\n\n\nHere we have a portion of a Firebase Realtime Database. Inside a section called chat, there are messages in the “messages” path, and and blog entries in the “admin_blog” path. Right now, we want to lock down the blog portion of the database so that nobody can write to it. We wrote rules for chat so that anyone could read or write to it, and then added a specific rule setting “write” to “false” to prevent writing in the “admin_blog”. This rule will not take effect because it is nested inside the “chat” rule that has already set “write” to “true”.\n\n\n```javascript\n{\n   \"rules\": {\n      \"chat\" : {\n         \"messages\" : {\n            // allows read and write to /chat/messages/<all children>\n             \".read\": \"true\",\n             \".write\": \"true\"\n          },\n         \"admin_blog\" : {\n            // allows read but not write to /chat/admin_blog/<all children>\n            \".read\" : \"true\",\n            \".write\" : \"false\"\n         }\n      }\n   }\n}\n```\n\n\nThis is just one example of how the rules could be corrected to get the desired result. Instead of making the read and write rules true from “chat” parent node, which would cause the rule to cascade down all its children, we can make them true for “messages” and all the children of messages, then set separate rules for “admin_blog” and its children. Since neither “messages” nor “admin_blog” has a higher level of permission, their rules are independent of one another and not affected by cascading.\n### Validate Rule\n`.validate` is useful for making sure that the structure or your JSON tree and format of your data matches what you design it to be. For example, validate rules can make sure that every message object contains a \"name\" and a \"text\" object and no other data. They can also be used to check that the \"name\" is a string, and no longer than 100 characters.\n\n\n```javascript\n\".validate\": \"newData.isString() && newData.val().length() < 100\"\n```\n\n\nThe above example shows a rule where data is only valid if it is a string with a length less than 100.\n\n\nUnlike .read and .write rules, data must adhere to *all* validation rules to be allowed. ",
              "instructor_notes": ""
            },
            {
              "id": 200080,
              "key": "58fa84bf-bb7c-4a77-b7a1-a37db3810896",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### You're in Control\n\nYour database rules can be very simple or very complex depending on the needs of your app. For FriendlyChat, the database rules will be simple: only authenticated users can read and write chat messages, and each chat message will have a name and either a text or photoUrl nodes. Here are the complete rules we'll use in the app. Copy this into the Firebase console: \n\n``` javascript\n{\n \"rules\": {\n   \"messages\": {\n     // only authenticated users can read and write the messages node\n     \".read\": \"auth != null\",\n     \".write\": \"auth != null\",\n     \"$id\": {\n       // the read and write rules cascade to the individual messages\n       // messages should have a 'name' and 'text' key or a 'name' and 'photoUrl' key\n       \".validate\": \"newData.hasChildren(['name', 'text']) && !newData.hasChildren(['photoUrl']) || newData.hasChildren(['name', 'photoUrl']) && !newData.hasChildren(['text'])\"\n     }\n   }\n }\n}\n```\n\nYou can check out the [Database Security Rules documentation](https://firebase.google.com/docs/database/security/) for more information, including examples of the different rules and sample apps you can run.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 197968,
          "key": "18f107af-e1dc-4e3b-9506-5ffdde3d0d9f",
          "title": "Why is it Great to Authenticate?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "18f107af-e1dc-4e3b-9506-5ffdde3d0d9f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197969,
              "key": "97cadbdb-01c4-457f-9c2e-96f9919ad914",
              "title": "Why is it Great to Authenticate?",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WHU5AYXtkAA",
                "china_cdn_id": "WHU5AYXtkAA.mp4"
              }
            }
          ]
        },
        {
          "id": 198002,
          "key": "01d41b37-9acc-4dc6-885d-b32fe332d44f",
          "title": "Why is it Great to Authenticate? (Exercise)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "01d41b37-9acc-4dc6-885d-b32fe332d44f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199332,
              "key": "46ea8b69-374a-4341-b261-e8f231dc357c",
              "title": "Why is it Great to Authenticate?",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "46ea8b69-374a-4341-b261-e8f231dc357c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Take a look at the list of apps below. Which ones do you think would need authentication to use some or all of its features? Check off the apps that use authentication.",
                "answers": [
                  {
                    "id": "a1477594521738",
                    "text": "A subscription service app that lets you stream movies",
                    "is_correct": true
                  },
                  {
                    "id": "a1477594546259",
                    "text": "An app that lets you play Scrabble with your friends",
                    "is_correct": true
                  },
                  {
                    "id": "a1477594557944",
                    "text": "An app that connects employers with people looking for work",
                    "is_correct": true
                  },
                  {
                    "id": "a1477594565027",
                    "text": "A calculator app",
                    "is_correct": false
                  },
                  {
                    "id": "a1477594572319",
                    "text": "An app that matches users to a list of adoptable pets",
                    "is_correct": true
                  },
                  {
                    "id": "a1477594577419",
                    "text": "An app that shows weather predictions",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 197970,
          "key": "ab8155f6-fc6f-424a-bffa-fedf236ef482",
          "title": "FirebaseUI Authentication",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ab8155f6-fc6f-424a-bffa-fedf236ef482",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197971,
              "key": "8644e152-d398-4b0b-ba07-634f63b418f0",
              "title": "FirebaseUI Authentication",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "F_FuChqjaAg",
                "china_cdn_id": "F_FuChqjaAg.mp4"
              }
            }
          ]
        },
        {
          "id": 198009,
          "key": "1787f282-da87-446c-95ab-c9a228cfddd0",
          "title": "Authentication in the Console",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1787f282-da87-446c-95ab-c9a228cfddd0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199331,
              "key": "2feb4173-a9a8-41d4-88eb-fdad2e6f0015",
              "title": "Authentication in the Console",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vHcyKUJPo7U",
                "china_cdn_id": "vHcyKUJPo7U.mp4"
              }
            }
          ]
        },
        {
          "id": 198010,
          "key": "e7d87dd2-7c0f-469a-b7e9-91d933e962af",
          "title": "Getting Started with FirebaseUI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e7d87dd2-7c0f-469a-b7e9-91d933e962af",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199330,
              "key": "746a6794-4f34-4bd0-94ad-bc7a8c42e975",
              "title": "Getting Started with FirebaseUI-Android",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "- [Firebase Authentication documentation](https://firebase.google.com/docs/auth/)\n- [FirebaseUI-Android GitHub page](https://github.com/firebase/FirebaseUI-Android)",
              "video": {
                "youtube_id": "tnO7f2GwbC0",
                "china_cdn_id": "tnO7f2GwbC0.mp4"
              }
            }
          ]
        },
        {
          "id": 198012,
          "key": "015fc7ee-23fc-4c0a-aa67-c795602774b3",
          "title": "Authentication Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "015fc7ee-23fc-4c0a-aa67-c795602774b3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199329,
              "key": "bd00bbbe-1276-4c26-a4c7-be664167fe94",
              "title": "Authentication Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "You're probably using a newer version of Firebase (9.6.0+) and FirebaseUI for Android – Auth (0.6.0+) compared to the videos. The newer version of FirebaseUI for Android - Auth has additional configuration steps for dependencies and an updated API for adding auth providers. Check out the [FirebaseUI for Android - Auth documentation](https://github.com/firebase/FirebaseUI-Android/blob/master/auth/README.md) for all the details.",
              "video": {
                "youtube_id": "J15PIl5bB9U",
                "china_cdn_id": "J15PIl5bB9U.mp4"
              }
            }
          ]
        },
        {
          "id": 200066,
          "key": "37fe03ae-14af-4a2d-83b8-17ae2e91bb28",
          "title": "AuthStateListener and AuthUI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "37fe03ae-14af-4a2d-83b8-17ae2e91bb28",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 200067,
              "key": "716dcc85-9c93-47ba-be3c-a42e209c2193",
              "title": "AuthStateListener and AuthUI",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Solution Diff: [1.04-firebase-auth-firebaseui-signin](https://github.com/udacity/and-nd-firebase/compare/1.03-firebase-database-read...1.04-firebase-auth-firebaseui-signin)",
              "video": {
                "youtube_id": "g3xeswWbnoo",
                "china_cdn_id": "g3xeswWbnoo.mp4"
              }
            }
          ]
        },
        {
          "id": 198014,
          "key": "bc33923b-5328-4edd-96f4-6acc47c8429f",
          "title": "Signing In FriendlyChat",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bc33923b-5328-4edd-96f4-6acc47c8429f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199328,
              "key": "80d12c67-229f-40b3-8c28-1ff242a3a594",
              "title": "Signing In FriendlyChat",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Solution Diff: [1.05-firebase-auth-signin-signout-setup](https://github.com/udacity/and-nd-firebase/compare/1.04-firebase-auth-firebaseui-signin...1.05-firebase-auth-signin-signout-setup)\n\nOn newer versions of FirebaseUI for Android - Auth, you may notice that the method `setProviders(String... providers)` is deprecated. The newer version of the API `setProviders(List<IdpConfig> idpConfigs)`, taking in a List instead of a series of Strings. Check out the [documentation](https://github.com/firebase/FirebaseUI-Android/tree/master/auth#using-firebaseui-for-authentication) for the latest API usage instructions.",
              "video": {
                "youtube_id": "FxsmUdkAsq8",
                "china_cdn_id": "FxsmUdkAsq8.mp4"
              }
            }
          ]
        },
        {
          "id": 198015,
          "key": "48022087-c4c2-4f2d-b09b-91a7b908e9de",
          "title": "Handling Cancelled Sign In",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "48022087-c4c2-4f2d-b09b-91a7b908e9de",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199327,
              "key": "8ff01a6d-8879-4044-9c32-72fb21495f92",
              "title": "Handling Cancelled Sign In",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Solution Diff: [1.06-firebase-auth-firebaseui-cancel](https://github.com/udacity/and-nd-firebase/compare/1.05-firebase-auth-signin-signout-setup...1.06-firebase-auth-firebaseui-cancel)",
              "video": {
                "youtube_id": "m6nAU5EnZTo",
                "china_cdn_id": "m6nAU5EnZTo.mp4"
              }
            }
          ]
        },
        {
          "id": 198016,
          "key": "81c6660b-fc36-4ff4-a51e-3e646f95a901",
          "title": "Auth in app - Signing Out",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "81c6660b-fc36-4ff4-a51e-3e646f95a901",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 199326,
              "key": "264a623a-758e-4707-866b-8369318e6251",
              "title": "Auth in app - Signing Out",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "Solution Diff: [1.07-firebase-auth-firebaseui-sign-out](https://github.com/udacity/and-nd-firebase/compare/1.06-firebase-auth-firebaseui-cancel...1.07-firebase-auth-firebaseui-sign-out)",
              "video": {
                "youtube_id": "qAga4ArtxnQ",
                "china_cdn_id": "qAga4ArtxnQ.mp4"
              }
            }
          ]
        },
        {
          "id": 197974,
          "key": "d053c636-9d48-43a6-ba05-5db4781dc562",
          "title": "Saturday Check In",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d053c636-9d48-43a6-ba05-5db4781dc562",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197975,
              "key": "788cae86-5b27-437e-9d51-4500b876398a",
              "title": "Saturday Check In",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pUDoh5bGLpA",
                "china_cdn_id": "pUDoh5bGLpA.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}