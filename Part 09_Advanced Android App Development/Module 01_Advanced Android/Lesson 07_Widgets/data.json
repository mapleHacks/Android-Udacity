{
  "data": {
    "lesson": {
      "id": 268702,
      "key": "f133dd92-8e3c-40b9-9d9d-545498638459",
      "title": "Widgets",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson you will get to create an app widget that can be placed in the home screen. Widgets are shortcuts that can display updated information from the app and handle click events. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/f133dd92-8e3c-40b9-9d9d-545498638459/268702/1516747842007/Widgets%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/f133dd92-8e3c-40b9-9d9d-545498638459/268702/1516747813109/Widgets%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 293660,
          "key": "98627458-72ac-45a0-94ff-bca60428ccfc",
          "title": "Introduction to Widgets",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "98627458-72ac-45a0-94ff-bca60428ccfc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 309297,
              "key": "bfc5ad51-8f40-461c-b602-d187d3b985c7",
              "title": "Introduction To Widgets",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "w2wvgv57fvA",
                "china_cdn_id": "w2wvgv57fvA.mp4"
              }
            }
          ]
        },
        {
          "id": 293661,
          "key": "38d71865-f9d1-4294-9a09-6e63b6444f46",
          "title": "What is an App Widget",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "38d71865-f9d1-4294-9a09-6e63b6444f46",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300620,
              "key": "3eea6741-b4fb-4b85-abba-71fd5f23efc8",
              "title": "What Is an App Widget",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wyyEVXxDPWA",
                "china_cdn_id": "wyyEVXxDPWA.mp4"
              }
            }
          ]
        },
        {
          "id": 293662,
          "key": "57df68a0-c010-48c0-b4e9-b55795761390",
          "title": "My Garden App",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "57df68a0-c010-48c0-b4e9-b55795761390",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298279,
              "key": "46299757-44a9-44d4-9060-b54c1382823e",
              "title": "My Garden App",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0GTpY9yQd9o",
                "china_cdn_id": "0GTpY9yQd9o.mp4"
              }
            },
            {
              "id": 300613,
              "key": "aa5a831b-9329-4e1e-b7fd-619065d65fa5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# My Garden Code\n\nThe code for this app can be found in the [MyGarden repository](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/Starter_Code). Download this repository using the command:\n\n```bash\ngit clone https://github.com/udacity/AdvancedAndroid_MyGarden.git\n```\n\nIf you need to a refresher on how the code is organized, please refer to the [concept where we introduced how to work with the course code](https://classroom.udacity.com/courses/ud857/lessons/8b2a9d63-0ff5-48ff-90d3-a9855b701dae/concepts/41b82e3c-2797-46e5-8a66-684098ca8cbb).\n\n### Exercise Code\n**Exercise:** [Starter_Code](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/Starter_Code)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 293663,
          "key": "5fc05dfc-f1a9-4ab1-b0be-8b9d851cafb6",
          "title": "PlantUtils Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5fc05dfc-f1a9-4ab1-b0be-8b9d851cafb6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 293683,
              "key": "26fd6b98-fb9c-465c-8648-fabc191b4fea",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "26fd6b98-fb9c-465c-8648-fabc191b4fea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Have a closer look at the starter code.\nCheck the PlantUtils.java file. What does getPlantImageRes method do?",
                "answers": [
                  {
                    "id": "a1492078257388",
                    "text": "Returns the plant image resource given its database ID",
                    "is_correct": false
                  },
                  {
                    "id": "a1492078313858",
                    "text": "Returns the plant image resolution",
                    "is_correct": false
                  },
                  {
                    "id": "a1492078327785",
                    "text": "Returns the plant image resource given its age and last watered time",
                    "is_correct": true
                  },
                  {
                    "id": "a1492078334766",
                    "text": "Returns the plant image resource given its position in the grid",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 293664,
          "key": "158b7a53-8018-4afa-99ab-6dbe631f3a16",
          "title": "Creating Your First App Widget ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "158b7a53-8018-4afa-99ab-6dbe631f3a16",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300621,
              "key": "e624f50e-75f9-4b09-a10c-9f44a7e9052c",
              "title": "Creating Your First App Widget",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0_BSHxVfdfI",
                "china_cdn_id": "0_BSHxVfdfI.mp4"
              }
            }
          ]
        },
        {
          "id": 293665,
          "key": "fe047530-7c2a-4934-8cac-d4da7ea4730d",
          "title": "RemoteViews",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fe047530-7c2a-4934-8cac-d4da7ea4730d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298281,
              "key": "8b58e77a-58eb-41fe-bb80-4ad9b0a8b649",
              "title": "RemoteViews",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LL2RANSbY7g",
                "china_cdn_id": "LL2RANSbY7g.mp4"
              }
            }
          ]
        },
        {
          "id": 293666,
          "key": "bf66e9ae-fee0-44c7-bb05-ab1d6781b6c3",
          "title": "My Garden Widget",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bf66e9ae-fee0-44c7-bb05-ab1d6781b6c3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300623,
              "key": "be8c11c1-9100-478e-9043-68cf9d29494b",
              "title": "My Garden Widget",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qHQGkzw1M8M",
                "china_cdn_id": "qHQGkzw1M8M.mp4"
              }
            }
          ]
        },
        {
          "id": 293667,
          "key": "242db1ba-1120-42db-9d31-09d82c35317b",
          "title": "Exercise: Create a Simple Widget",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "242db1ba-1120-42db-9d31-09d82c35317b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 293685,
              "key": "498f82fb-0188-47fc-9537-4d70c4a8bfdf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Create a simple widget\n\nIn this exercise you will get to create very basic widget for our app that can be placed on the home screen and when clicked will launch the main activity in MyGarden app.\n\n### Exercise Code\n**Exercise:** [TWID.01-Exercise-AddNewWidget](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.01-Exercise-AddNewWidget)",
              "instructor_notes": ""
            },
            {
              "id": 293684,
              "key": "d6e75764-e511-4aff-b094-4b9169c36a4b",
              "title": "Create a simple widget",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d6e75764-e511-4aff-b094-4b9169c36a4b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add a new widget to the project using android studio",
                "Design the widget by adding an ImageView that shows a static image",
                "Create a PendingIntent to launch the application when the widget image is clicked"
              ],
              "positive_feedback": "Well done!\n**Solution:** [[TWID.01-Solution-AddNewWidget](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.01-Solution-AddNewWidget)][[Diff](https://github.com/udacity/AdvancedAndroid_MyGarden/compare/TWID.01-Exercise-AddNewWidget...TWID.01-Solution-AddNewWidget)]",
              "video_feedback": null,
              "description": "Now it's your turn, follow the TODOs in the code to complete this exercise"
            }
          ]
        },
        {
          "id": 293668,
          "key": "a60b73c7-f2ce-4f74-9e97-4e1e6e9fa2a4",
          "title": "Widget Margins",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a60b73c7-f2ce-4f74-9e97-4e1e6e9fa2a4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 293686,
              "key": "5ff95cdb-eadf-4c79-8db9-027e6495f3aa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Widget Margins\n\nSince Android API 14 and onwards, Android automatically includes margins between widgets as they appear on the user's home screen. \n\nHowever, on previous API versions this was not the case, so it's still a good idea to specify a margin to include around the widget on devices running Android versions less than 14. \n\nThis is a case where we can exploit the fact that we have values folders targeting these two categories of user API levels. We will define the margins in our XML layout file by referring to a dimension resource. Under the `\"values\"` directory, we've created a new file named `\"dimens.xml\"`\n",
              "instructor_notes": ""
            },
            {
              "id": 293687,
              "key": "96f78b73-0e2a-4d89-b48e-6d5a4710617c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58ef5bd2_screen-shot-2017-04-13-at-1.06.36-pm/screen-shot-2017-04-13-at-1.06.36-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/96f78b73-0e2a-4d89-b48e-6d5a4710617c",
              "caption": "",
              "alt": null,
              "width": 2354,
              "height": 666,
              "instructor_notes": null
            },
            {
              "id": 293688,
              "key": "b8269ef7-5ebe-4382-a281-f024cb78df83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To prevent newer Android versions from using this margin (since they already include a built in margin):\n\nA new `\"values-v14\"` folder contains a copy of that file which targets API levels from 14 onwards, however the margin value here is set to 0dp.\n",
              "instructor_notes": ""
            },
            {
              "id": 293689,
              "key": "f71238eb-eab7-41a0-a7b3-34a7d0525e29",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58ef5c5b_screen-shot-2017-04-13-at-1.08.56-pm/screen-shot-2017-04-13-at-1.08.56-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f71238eb-eab7-41a0-a7b3-34a7d0525e29",
              "caption": "",
              "alt": null,
              "width": 2302,
              "height": 650,
              "instructor_notes": null
            },
            {
              "id": 293690,
              "key": "ca5f357d-69a0-4d6a-a4e8-ffd848d7b64b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now when the XML layout refers to this dimension value using its name, a value of zero will be used on devices running API 14 plus and a value of 8dp will be used otherwise.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 293669,
          "key": "939b1d57-4978-471a-99ad-78ee752d8a77",
          "title": "Background Tasks for Widgets",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "939b1d57-4978-471a-99ad-78ee752d8a77",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300624,
              "key": "2c6a57e3-e657-49a3-997a-b25ac8c92b09",
              "title": "Background Tasks For Widgets",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "SkdZBuvckjI",
                "china_cdn_id": "SkdZBuvckjI.mp4"
              }
            }
          ]
        },
        {
          "id": 293670,
          "key": "84bf86d1-0f7b-4650-bfc7-31c662315d66",
          "title": "WateringService",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "84bf86d1-0f7b-4650-bfc7-31c662315d66",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297358,
              "key": "8eaf88e6-380e-4492-8e10-1839bc6f663f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Watering IntentService\n\nIn this exercise we will start by creating an IntentService class called PlantWateringService that extends from IntentService.\n\n```Java\npublic class PlantWateringService extends IntentService\n```\n\nTo keep things organized, it’s best to define the actions that the IntentService can handle, we will start by defining our first action as `ACTION_WATER_PLANTS`\n\n```Java\npublic static final String ACTION_WATER_PLANTS =\n                    \"com.example.android.mygarden.action.water_plants\";\n```\n\nNext we will create a static method called startActionWaterPlants that allows explicitly triggering the Service to perform this action, inside simply create an intent that refers to the same class and set the action to ACTION_WATER_PLANTS and call start service\n\n```Java\npublic static void startActionWaterPlants(Context context) {\n        Intent intent = new Intent(context, PlantWateringService.class);\n        intent.setAction(ACTION_WATER_PLANTS);\n        context.startService(intent);\n    }\n```\n\nTo handle this action we need to override onHandleIntent, where you can extract the action and handle each action type separately\n\n```Java\n@Override\n    protected void onHandleIntent(Intent intent) {\n        if (intent != null) {\n            final String action = intent.getAction();\n            if (ACTION_WATER_PLANTS.equals(action)) {\n                handleActionWaterPlants();\n            }\n        }\n    }\n```\n\nThen finally we implement the handleActionWaterPlants method.\nTo water all plants we just run an update query setting the last watered time to now, but only for those plants that are still alive.\nTo check if a plant is still alive, you can compare the last watered time with the time now and if the difference is larger than `MAX_AGE_WITHOUT_WATER`, then the plant is dead!\n\n```Java\nprivate void handleActionWaterPlants() {\n   Uri PLANTS_URI = BASE_CONTENT_URI.buildUpon().appendPath(PATH_PLANTS).build();\n   ContentValues contentValues = new ContentValues();\n   long timeNow = System.currentTimeMillis();\n   contentValues.put(PlantContract.PlantEntry.COLUMN_LAST_WATERED_TIME, timeNow);\n   // Update only plants that are still alive\n   getContentResolver().update(\n      PLANTS_URI,\n      contentValues,\n      PlantContract.PlantEntry.COLUMN_LAST_WATERED_TIME+\">?\",\n      new String[]{String.valueOf(timeNow - PlantUtils.MAX_AGE_WITHOUT_WATER)});\n}\n```\nNow that we have our IntentService ready, let’s add the water drop image to our widget’s layout\n\n```XML\n<ImageView\n        android:id=\"@+id/widget_water_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_horizontal\"\n        android:src=\"@drawable/water_drop_blue\" />\n\n```\nJust like we did earlier, we need to create a PendingIntent to handle the click event on the water drop image, this time however launching a service instead of an activity\n\n```Java\n// Add the wateringservice click handler\nIntent wateringIntent = new Intent(context, PlantWateringService.class);\nwateringIntent.setAction(PlantWateringService.ACTION_WATER_PLANTS);\nPendingIntent wateringPendingIntent = PendingIntent.getService(\n                                             context, \n                                             0, \n                                             wateringIntent, \n                                             PendingIntent.FLAG_UPDATE_CURRENT);\nviews.setOnClickPendingIntent(R.id.widget_water_button, wateringPendingIntent);\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 293671,
          "key": "cb0912b8-b29b-4487-98dd-cda38f3b7e65",
          "title": "Exercise: Add a Watering Service",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cb0912b8-b29b-4487-98dd-cda38f3b7e65",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297359,
              "key": "e59c0681-b268-4e72-9eb9-9ab658d53cde",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Add a Watering Service\n\nIn this exercise you will get to create add a watering button to the widget that will launch an IntentService to update the watered time for all the plants in the garden\n\n### Exercise Code\n**Exercise:** [TWID.02-Exercise-AddWateringService](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.02-Exercise-AddWateringService)",
              "instructor_notes": ""
            },
            {
              "id": 297366,
              "key": "1ceb1d63-eb04-4d6f-81dd-b8b9c6e1be80",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1ceb1d63-eb04-4d6f-81dd-b8b9c6e1be80",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add an ImageView that displays water_drop_blue to act as the watering button",
                "Create a plant watering service that extends IntentService",
                "Add action ACTION_WATER_PLANTS which updates last_watered timestamp for all plants still alive",
                "Add a service tag in the Manifest for PlantWateringService",
                "Create a PendingIntent for the PlantWateringService and setOnClickPendingIntent for widget_water_button"
              ],
              "positive_feedback": "Well Done!\n\n**Solution:** [[TWID.02-Solution-AddWateringService](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.02-Solution-AddWateringService)][[Diff](https://github.com/udacity/AdvancedAndroid_MyGarden/compare/TWID.02-Exercise-AddWateringService...TWID.02-Solution-AddWateringService)]",
              "video_feedback": null,
              "description": "Ok now it's your turn, follow the steps below to complete this exercise"
            }
          ]
        },
        {
          "id": 293672,
          "key": "674acd6c-c1c6-44e6-9b62-3fe89084daeb",
          "title": "Widget Updates via IntentServices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "674acd6c-c1c6-44e6-9b62-3fe89084daeb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298314,
              "key": "e2b6f803-4f66-4741-8690-3f6ff43f372c",
              "title": "Widget Updates Via IntentServices",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WtHw-ItcmPs",
                "china_cdn_id": "WtHw-ItcmPs.mp4"
              }
            }
          ]
        },
        {
          "id": 293673,
          "key": "cc786bc3-9fae-4ac2-9760-7269368b8787",
          "title": "Exercise: UpdateWidgets Service",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cc786bc3-9fae-4ac2-9760-7269368b8787",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297360,
              "key": "76ac5cbe-6c49-480e-ae1b-c5c1a2c23046",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# UpdateWidgets Service\n\nIn this exercise you will get to create another IntentService Action that will query the Plant that needs most attention and then update the widget UI to display it.\n\n### Exercise Code\n**Exercise:** [TWID.03-Exercise-UpdateWidgetsService](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.03-Exercise-UpdateWidgetsService)",
              "instructor_notes": ""
            },
            {
              "id": 297365,
              "key": "679bee05-c07f-4f4c-bc8c-0ebb5a6b662e",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "679bee05-c07f-4f4c-bc8c-0ebb5a6b662e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Modify updateAppWidget method to take an image recourse",
                "Call setImageViewResource to update the widget’s image",
                "Move the updateAppWidget loop to a new method called updatePlantWidgets",
                "Pass through the image recourse to updatePlantWidgets",
                "Create a new action ACTION_UPDATE_PLANT_WIDGETS to handle updating widget UI",
                "Implement handleActionUpdatePlantWidgets to query the plant closest to dying",
                "Call updatePlantWidgets to refresh widgets",
                "Call startActionUpdatePlantWidgets in onUpdate, AddPlantActivity and in PlantDetailActivity"
              ],
              "positive_feedback": "Well Done!\n\n**Solution:** [[TWID.03-Solution-UpdateWidgetsService](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.03-Solution-UpdateWidgetsService)][[Diff](https://github.com/udacity/AdvancedAndroid_MyGarden/compare/TWID.03-Exercise-UpdateWidgetsService...TWID.03-Solution-UpdateWidgetsService)]",
              "video_feedback": null,
              "description": "Now it's your turn, follow the steps below to complete this exercise"
            }
          ]
        },
        {
          "id": 293674,
          "key": "8bc08a0c-0f6a-4c2b-9197-9015996811c8",
          "title": "Water Individual Plants",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8bc08a0c-0f6a-4c2b-9197-9015996811c8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298299,
              "key": "fce94cc6-6d83-4c92-8a57-c6beae2a0e5e",
              "title": "Water Individual Plants",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ejYuNZeAg58",
                "china_cdn_id": "ejYuNZeAg58.mp4"
              }
            }
          ]
        },
        {
          "id": 293675,
          "key": "c143a03d-8ecb-4e3f-8691-190cfa486cc3",
          "title": "Sending Extras to IntentService",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c143a03d-8ecb-4e3f-8691-190cfa486cc3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298966,
              "key": "c1fc6ab9-b620-408e-989e-9212c0cd98e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Sending Extras to IntentService\n\nThe main change we will be doing in this exercise is replacing the Water All Plants action with a more specific Water Plant one. This will water an individual plant given its ID instead of watering all the plants in the garden.\n\nTo be able to water a specific plant you will need to launch the same IntentService but will also need to pass the Plant ID with it. \n\nTo do so, once you create the `wateringIntent` that will launch the `PlantWateringService`, you can use the method `putExtra()` where you can set a name and a value just like you would for any normal Intent.\n\n```Java\nIntent wateringIntent = new Intent(context, PlantWateringService.class);\nwateringIntent.setAction(PlantWateringService.ACTION_WATER_PLANT);\nwateringIntent.putExtra(PlantWateringService.EXTRA_PLANT_ID, plantId);\nPendingIntent wateringPendingIntent = PendingIntent.getService(context, 0, wateringIntent, PendingIntent.FLAG_UPDATE_CURRENT);\nviews.setOnClickPendingIntent(R.id.widget_water_button, wateringPendingIntent);\n```\n\nIn this exercise, the goal is to complete the following changes in My Garden app:\n\n1) Change the water-all click event in the widget to water only that specific plant shown which involves \n * Add the plantId as a new parameter to the updatePlantWidgets method\n * Change the watering service action from ACTION_WATER_PLANTS to ACTION_WATER_PLANT\n * Change the update query to use a SINGLE_PLANT_URI\n * Define and using EXTRA_PLANT_ID to pass the plant ID to the intent service from the widget\n * Call putExtra and passing the plantId when creating the pending intent for the watering service\n * Call getLongExtra to extract the plnatId in the service\n * Make sure you update the widgets after watering by calling startActionUpdatePlantWidgets\n\n2) Hide the water drop button in the widget if it’s been less than MIN_AGE_BETWEEN_WATER since it was last watered\n * Add a new boolean parameter to updatePlantWidgets to indicate if the plant can be watered or not\n * Use setViewVisibility to change the widget_water_button Visibility from View.VISIBLE to View.INVISIBLE to hide it\n\n3) Change the widget plant image click handler to launch the Detail Activity for that plant rather than the Main Activity \n * If plantId was INVALID_PLANT_ID, then launch the MainActivity as usual\n * Otherwise launch the PlantDetailActivity passing in the plantId as EXTRA_PLANT_ID \n\n4) Add a TextView underneath the plant image that displays the plant ID in both the main activity as well as in the widget to help identify each plant",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 293676,
          "key": "7c41c17b-0ad6-4621-8100-a179e05e4a88",
          "title": "Exercise: Adding More Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7c41c17b-0ad6-4621-8100-a179e05e4a88",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297361,
              "key": "2dd0531d-0ea4-4c90-bcd7-90a24f48b139",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Exercise: Adding More Features\n\nIn this exercise you will get to add a few more features to our app based on the feedback we collected from users.\n\n1. Change the water-all click event in the widget to water only that specific plant shown which involves \n  * Add the plantId as a new parameter to the updatePlantWidgets method\n  * Change the watering service action from ACTION_WATER_PLANTS to ACTION_WATER_PLANT\n  * Change the update query to use a SINGLE_PLANT_URI\n  * Define and using EXTRA_PLANT_ID to pass the plant ID to the intent service from the widget\n  * Call putExtra and passing the plantId when creating the pending intent for the watering service\n  * Call getLongExtra to extract the plnatId in the service\n  * Make sure you update the widgets after watering by calling startActionUpdatePlantWidgets\n2. Hide the water drop button in the widget if it’s been less than MIN_AGE_BETWEEN_WATER since it was last watered\n  * Add a new boolean parameter to updatePlantWidgets to indicate if the plant can be watered or not\n  * Use setViewVisibility to change the widget_water_button Visibility from View.VISIBLE to View.INVISIBLE to hide it\n3. Change the widget plant image click handler to launch the Detail Activity for that plant rather than the Main Activity \n  * If plantId was INVALID_PLANT_ID, then launch the MainActivity as usual\n  * Otherwise launch the PlantDetailActivity passing in the plantId as EXTRA_PLANT_ID \n4. Add a TextView underneath the plant image that displays the plant ID in both the main activity as well as in the widget to help identify each plant \n\n\n### Exercise Code\n**Exercise:** [TWID.04-Exercise-Extras](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.04-Exercise-Extras)",
              "instructor_notes": ""
            },
            {
              "id": 297364,
              "key": "5cb7feaa-ce47-4537-87aa-d4ae28b7b48c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5cb7feaa-ce47-4537-87aa-d4ae28b7b48c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Change ACTION_WATER_PLANTS to ACTION_WATER_PLANT",
                "Pass the plant ID to the service and update the query to use SINGLE_PLANT_URI",
                "Modify updatePlantWidgets and updateAppWidget to pass the plant ID",
                "Modify updatePlantWidgets and updateAppWidget to pass a boolean to show/hide the water button",
                "Set the click handler to open the DetailActivity for plant ID",
                "Add a new TextView in plant_widget and set it to show the plant ID"
              ],
              "positive_feedback": "Well Done!\n\n**Solution:** [[TWID.04-Exercise-Extras](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.04-Exercise-Extras)][[Diff](https://github.com/udacity/AdvancedAndroid_MyGarden/compare/TWID.04-Exercise-Extras...TWID.04-Solution-Extras)]",
              "video_feedback": null,
              "description": "Now it's your turn, follow the following steps to complete this exercise"
            }
          ]
        },
        {
          "id": 293677,
          "key": "7aeccdaa-4f6a-4a38-a96a-86317d0a12a0",
          "title": "Resizing Widgets",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7aeccdaa-4f6a-4a38-a96a-86317d0a12a0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298302,
              "key": "5d62f7a8-87d3-4890-954c-88de1ced2186",
              "title": "Resizing Widgets",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "GTJxC01hhBk",
                "china_cdn_id": "GTJxC01hhBk.mp4"
              }
            }
          ]
        },
        {
          "id": 293678,
          "key": "93aef9c2-5705-4975-83e8-ea902e1974bd",
          "title": "AppWidgetManager Options",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "93aef9c2-5705-4975-83e8-ea902e1974bd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298304,
              "key": "33fbf35e-d2a0-41fb-a4be-60ebaaff7d49",
              "title": "AppWidgetManager Options",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iFFvPLWtZ1E",
                "china_cdn_id": "iFFvPLWtZ1E.mp4"
              }
            }
          ]
        },
        {
          "id": 293679,
          "key": "6b7247fa-4fe1-4645-8ed8-10d6afc6ec0f",
          "title": "GridViews in Widgets ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6b7247fa-4fe1-4645-8ed8-10d6afc6ec0f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300625,
              "key": "bc40e637-0e91-4c98-8ff0-32ecb68a03e2",
              "title": "GridViews In Widgets",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "W51FZ_Yu_3c",
                "china_cdn_id": "W51FZ_Yu_3c.mp4"
              }
            }
          ]
        },
        {
          "id": 293680,
          "key": "78e17e02-5d0e-4bc7-af27-081827e9b192",
          "title": "PendingIntent Templates",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78e17e02-5d0e-4bc7-af27-081827e9b192",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300626,
              "key": "1d34d4d7-fd69-44ea-b39c-587c3fc6f3d4",
              "title": "PendingIntentTemplates",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wGgu91uZ3XA",
                "china_cdn_id": "wGgu91uZ3XA.mp4"
              }
            }
          ]
        },
        {
          "id": 293681,
          "key": "89f55d8d-b386-4493-8a38-1ee08d0750d4",
          "title": "Exercise: GridView",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "89f55d8d-b386-4493-8a38-1ee08d0750d4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297362,
              "key": "cc06af9f-084c-4caa-ace5-24ec27c47f4a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# GridViews in Widgets\n\nIn this exercise you will get to create a responsive design for the widget, changing the layout based on its size.\nWhen the widget's width is larger than 300dp it will display a GridView of all the plants in the Garden, otherwise it will continue to display the single plant.\n\n### Exercise Code\n**Exercise:** [TWID.05-Exercise-GridView](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.05-Exercise-GridView)",
              "instructor_notes": ""
            },
            {
              "id": 297363,
              "key": "ab09561f-3bff-43ec-b53c-9af298af069f",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ab09561f-3bff-43ec-b53c-9af298af069f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a new layout called widget_grid_view.xml that contains a GridView",
                "Create a RemoteViewsService class and a RemoteViewsFactory class",
                "Register the RemoteViewsService in the Manifest",
                "Separate the updateAppWidget logic into getGardenGridRemoteView and getSinglePlantRemoteView",
                "Use getAppWidgetOptions to get widget width and use the appropriate RemoteView method",
                "Set the PendingIntent template in getGardenGridRemoteView to launch PlantDetailActivity"
              ],
              "positive_feedback": "Well Done!\n\n**Solution:** [[TWID.05-Solution-GridView](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.05-Solution-GridView)][[Diff](https://github.com/udacity/AdvancedAndroid_MyGarden/compare/TWID.05-Exercise-GridView...TWID.05-Solution-GridView)]",
              "video_feedback": null,
              "description": "Now it's your turn, follow the steps below to complete this exercise"
            },
            {
              "id": 346604,
              "key": "2ecd8ac9-1f13-47fb-90db-9d52a6c9b9a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution Code\n**Solution:** [TWID.05-Solution-GridView](https://github.com/udacity/AdvancedAndroid_MyGarden/tree/TWID.05-Solution-GridView)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 293682,
          "key": "670d97f4-db57-4a3a-b687-995d957803f6",
          "title": "Widgets Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "670d97f4-db57-4a3a-b687-995d957803f6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297367,
              "key": "af2131da-413b-4966-9447-3ddad4ed7fb1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary\n\nThat’s all for this lesson! Let’s recap on what we’ve learned in it:\n\n* Widgets are a fun and easy way to interact with any app, but they could be resource intensive if not managed properly\n* Widgets handle their own update schedule, but remember that they run on the main UI thread so to offload any heavy tasks to a new thread\n* IntentServices are a great way to do so, they can communicate back to the widget at any time\n* Widgets layouts are based on RemoteViews, which for the most part behave like normal Views with some exceptions like:\n * Click events are handled with pending intents and collections need a PendingIntent Template\n * Not all view types are supported\n * Collection views require a remote service and a remote view factory to act as an adapter\n\nNow that we’re done, feel free to explore more of the widget capabilities like building animations using **ViewFlipper** or flipping through photo galleries using **Stack Views**.\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}