{
  "data": {
    "lesson": {
      "id": 268647,
      "key": "89b6a627-f121-498c-aa53-26304544b5f3",
      "title": "Media Playback",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, you'll learn about Media Playback by implementing the ExoPlayer library in a music quiz app. You'll also learn about background playback, external clients, media sessions and more! ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/89b6a627-f121-498c-aa53-26304544b5f3/268647/1516748459118/Media%20Playback%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/89b6a627-f121-498c-aa53-26304544b5f3/268647/1516748427384/Media%20Playback%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 298221,
          "key": "4960f9d7-f7f9-43fe-a91e-078958479540",
          "title": "Introduction to Media Playback",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4960f9d7-f7f9-43fe-a91e-078958479540",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298223,
              "key": "945f35d0-e7c3-4f12-a190-eaa1e3dbdc8f",
              "title": "Introduction to Media Playback",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fkyVGHZSaCo",
                "china_cdn_id": "fkyVGHZSaCo.mp4"
              }
            }
          ]
        },
        {
          "id": 292494,
          "key": "1acff325-45d3-4527-a43b-674c121cc555",
          "title": "Player UI Structure",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1acff325-45d3-4527-a43b-674c121cc555",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300181,
              "key": "1a740b57-912f-4369-b1da-cdadeda29c6f",
              "title": "Player UI Structure",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "73iql6CCcbU",
                "china_cdn_id": "73iql6CCcbU.mp4"
              }
            }
          ]
        },
        {
          "id": 292495,
          "key": "d614c7df-38d3-4746-b7c5-bdeb525de703",
          "title": "Audio Video",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d614c7df-38d3-4746-b7c5-bdeb525de703",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300176,
              "key": "54d67fd9-77b9-4011-abd4-09b114125d54",
              "title": "Audio Video",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nIbvaXjqWnM",
                "china_cdn_id": "nIbvaXjqWnM.mp4"
              }
            }
          ]
        },
        {
          "id": 298225,
          "key": "8af7b44d-8f97-42e0-8fac-37e3d760c331",
          "title": "Comparing Players",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8af7b44d-8f97-42e0-8fac-37e3d760c331",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298226,
              "key": "e82140fe-2e7a-46cf-baab-ee404605641a",
              "title": "Comparing Players",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<a href=\"https://developers.google.com/youtube/\" target=\"_blank\">YouTube Developer APIs</a>\n\nMedia APIs: <a href=\"https://developer.android.com/reference/android/media/MediaCodec.html\" target=\"_blank\">MediaCodec</a>, <a href=\"https://developer.android.com/reference/android/media/AudioTrack.html\" target=\"_blank\">AudioTrack</a>, and <a href=\"https://developer.android.com/reference/android/media/MediaDrm.html\" target=\"_blank\">MediaDrm</a>",
              "video": {
                "youtube_id": "rQ3JepTGook",
                "china_cdn_id": "rQ3JepTGook.mp4"
              }
            }
          ]
        },
        {
          "id": 292496,
          "key": "fe3afd25-fc4c-4a6a-9581-91d132f062e3",
          "title": "Media Formats",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fe3afd25-fc4c-4a6a-9581-91d132f062e3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298227,
              "key": "a720ded4-a39e-45e7-925b-e7dccce7bb41",
              "title": "Media Formats",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "- <a href=\"https://google.github.io/ExoPlayer/supported-formats.html\" target=\"_blank\">ExoPlayer documentation</a> \n- <a href=\"https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming\" target=\"_blank\">More on adaptive bitrate streaming</a>",
              "video": {
                "youtube_id": "EO5BVMjGqJs",
                "china_cdn_id": "EO5BVMjGqJs.mp4"
              }
            }
          ]
        },
        {
          "id": 292493,
          "key": "0c7e0179-5e36-454a-94fc-96529e08bb53",
          "title": "Exercise: Download Starting Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0c7e0179-5e36-454a-94fc-96529e08bb53",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297513,
              "key": "a57841be-5739-4c75-990c-60f8a10a16e9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Media Playback \n\nThe code for this app can be found in the <a href=\"https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz\" target=\"_blank\">Media Playback repository</a>. Download this repository using the command:\n\n```bash\ngit clone https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz.git\n```\n\nIf you need to a refresher on how the code is organized, please refer to the first lesson in this course.\n\n### Exercise Code\n**Exercise:** <a href=\"https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.00-StartingCode\" target=\"_blank\">TMED.00-StartingCode</a>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 292497,
          "key": "062710bc-5531-407d-bc7a-10cb77eb645e",
          "title": "Starting Code Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "062710bc-5531-407d-bc7a-10cb77eb645e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298230,
              "key": "424b541d-3aa6-4bc6-b949-4e85185db717",
              "title": "Starting Code Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "- <a href=\"http://www.vogella.com/tutorials/JSON/article.html\" target=\"_blank\">JSON Tutorial (Vogella)</a>\n- <a href=\"https://developer.android.com/reference/android/util/JsonReader.html\" target=\"_blank\">JsonReader Documentation</a>\n\nWhen opening the project code in Android Studio, you may receive a gradle error regarding **extras;android;m2repository**. You can resolve this error by downloading and installing the missing repository.",
              "video": {
                "youtube_id": "wjQBGcz2tS4",
                "china_cdn_id": "wjQBGcz2tS4.mp4"
              }
            }
          ]
        },
        {
          "id": 292498,
          "key": "d9589bdf-a288-45d8-87ca-eeccb5d4ea11",
          "title": "Add ExoPlayer Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d9589bdf-a288-45d8-87ca-eeccb5d4ea11",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300179,
              "key": "fcacb3f3-bb0d-4046-a371-68dd0cf9dd1f",
              "title": "Add ExoPlayer Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XFZXfWBeQxo",
                "china_cdn_id": "XFZXfWBeQxo.mp4"
              }
            }
          ]
        },
        {
          "id": 297445,
          "key": "d1be88a3-77bd-4581-b2f4-662d92f6e590",
          "title": "Exercise: Add SimpleExoPlayerView",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d1be88a3-77bd-4581-b2f4-662d92f6e590",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298237,
              "key": "b8ca6e78-aa7a-4f99-86e4-494fbc3b9f23",
              "title": "Add SimpleExoPlayerView",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cyjDhf9FnH8",
                "china_cdn_id": "cyjDhf9FnH8.mp4"
              }
            },
            {
              "id": 297514,
              "key": "ccd3d5f5-851a-4502-87e5-37a74090d017",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Add SimpleExoPlayerView\n\nIn this exercise, you'll add ExoPlayer, and extensible media player library, to the Classical Music Quiz app. You'll also hook it up to a SimpleExoPlayerView, a UI element that is part of the ExoPlayer library which includes playback controls and album art.\n\n### Exercise Code\n**Exercise:** <a href=\"https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.01-Exercise-AddExoPlayer\" target=\"_blank\">TMED.01-Exercise-AddExoPlayer</a>",
              "instructor_notes": ""
            },
            {
              "id": 297517,
              "key": "637165c0-0c74-4d95-90c8-84ed4b2eb5ab",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "637165c0-0c74-4d95-90c8-84ed4b2eb5ab",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Replace the Composer ImageView with a SimpleExoPlayerView",
                "Replace the ImageView with the SimpleExoPlayerView, and remove the method calls on the composerView",
                "Replace the default artwork in the SimpleExoPlayerView",
                "Create a Sample object using the Sample.getSampleByID() method",
                "Create a method called initializePlayer()",
                "Instantiate a SimpleExoPlayer object using DefaultTrackSelector and DefaultLoadControl",
                "Prepare the MediaSource using DefaultDataSourceFactory and DefaultExtractorsFactory",
                "Prepare the ExoPlayer with the MediaSource, start playing the sample and set the SimpleExoPlayer to the SimpleExoPlayerView",
                "Stop the playback when you go to the next question",
                "Change the default artwork in the SimpleExoPlayerView to show the picture of the composer, when the user has answered the question"
              ],
              "positive_feedback": "Excellent work!\n\n**Solution:** <a href=\"https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.01-Solution-AddExoPlayer\" target=\"_blank\">TMED.01-Solution-AddExoPlayer</a>\n\n<a href=\"https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/compare/TMED.01-Exercise-AddExoPlayer...TMED.01-Solution-AddExoPlayer?expand=1\" target=\"_blank\">Diff</a>",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 292499,
          "key": "5d62a7ef-df84-43e1-8c64-882169c3044b",
          "title": "Exercise: Customize SimpleExoPlayerView",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5d62a7ef-df84-43e1-8c64-882169c3044b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 292506,
              "key": "73226842-e671-4cbb-a1b3-a2d0ae5fd552",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Customizing ExoPlayer UI\n\nWe chose to use SimpleExoPlayerView because of its simplicity. It can be hooked up to ExoPlayer with a single line of code and greatly simplifies the UI portion of a media application since we don't have to code anything ourselves. However, such simplicity usually comes at the cost of customization: you might think that we are stuck with the provided UI since it comes ready out of the box. Not so with ExoPlayer! \n\nExoPlayer comes with two notable out of the box UI elements:\n\n* PlaybackControlView is a view for controlling ExoPlayer instances. It displays standard playback controls including a play/pause button, fast-forward and rewind buttons, and a seek bar.\n* SimpleExoPlayerView is a high level view for SimpleExoPlayer media playbacks. It displays video (or album art in our case) and displays playback controls using a PlaybackControlView.\n\n\nThese ExoPlayer UI components were created with customization in mind, in the following ways:\n\n## Attributes\n\nThe XML items support a variety of xml attributes that customize the look of the UI. Take a look at the documentation for the UI element to see the list of possible attributes (and their corresponding Java methods).\n\n## Overriding layout files\nWhen these views are inflated, they use specific layout files to determine what the UI looks like.\nFor SimpleExoPlayerView, this file is called: <a href=\"https://github.com/google/ExoPlayer/blob/release-v2/library/ui/src/main/res/layout/exo_simple_player_view.xml\" target=\"_blank\">exo_simple_player_view.xml</a>. This layout file includes a PlayBackControlView (once it's inflated, it replaces the exo_controller_placeholder item) which also uses its own layout file: <a href=\"https://github.com/google/ExoPlayer/blob/release-v2/library/ui/src/main/res/layout/exo_playback_control_view.xml\" target=\"_blank\">exo_playback_control_view.xml</a>.\n\nIf you include any layout files with the same names, ExoPlayer will use them instead of these default ones. This allows you to fully customize what the UI looks like. \n\nOne caveat: Use of standard ids (such as exo_play) is required so that child views can be identified, bound to the player and updated in an appropriate way. A full list of the standard ids for each view can be found in the Javadoc for [PlaybackControlView](http://google.github.io/ExoPlayer/doc/reference/index.html?com/google/android/exoplayer2/ui/PlaybackControlView.html) and [SimpleExoPlayerView](http://google.github.io/ExoPlayer/doc/reference/index.html?com/google/android/exoplayer2/ui/SimpleExoPlayerView.html). Use of each standard id is optional, which is why we’ll be able to omit some of the usual playback controls in our example.\n\n## Custom Layout Files\nThe issue with the above method is that it customizes the UI for every instance of SimpleExoPlayerView (and/or PlaybackControlView). For our use case, this doesn't matter since we only have one player view. However, if you need to customize individual instances, you can use a combination of the two above methods: use the player_layout_id  attribute for a custom SimpleExoPlayerView, or the controller_layout_id for a custom PlaybackControlView and specify a custom layout file to override the layout for that specific instance.\n\nWe don't need individual instance customization, so override the exo_playback_control_view.xml layout file for the playback control view (included in our SimpleExoPlayerView) and remove the skip to next, fastforward and rewind buttons (you can copy the default layout [here](https://github.com/google/ExoPlayer/blob/release-v2/library/ui/src/main/res/layout/exo_playback_control_view.xml)).\n\nAfter completing this, run the app and notice the change in the UI!\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 297521,
              "key": "fd2a76df-f16c-46ab-89fb-d0110307f42b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Customize SimpleExoPlayerView\n\nIn this exercise, you'll customize the SimpleExoPlayerView to only include the playback controls you want to support.\n\n### Exercise Code\n**Exercise:** [TMED.02-Exercise-CustomizeLayout](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.02-Exercise-CustomizeLayout)",
              "instructor_notes": ""
            },
            {
              "id": 297525,
              "key": "42c7f0d4-7dd3-406d-a0b4-f08d4c256594",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "42c7f0d4-7dd3-406d-a0b4-f08d4c256594",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a layout file called exo_playback_control_view to override the playback control layout"
              ],
              "positive_feedback": "Excellent work!\n\n**Solution:** [[TMED.02-Solution-CustomizeLayout](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.02-Solution-CustomizeLayout)][[Diff](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/compare/TMED.02-Exercise-CustomizeLayout...TMED.02-Solution-CustomizeLayout?expand=1)]",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 292508,
          "key": "48914024-46e6-4c24-8de6-4ab0284ecaba",
          "title": "Exercise: ExoPlayer Event Listening",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "48914024-46e6-4c24-8de6-4ab0284ecaba",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300177,
              "key": "638da2c4-32f9-4dd4-a180-bedb8bca68ae",
              "title": "ExoPlayer Event Listening",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_DH2YhiaaF0",
                "china_cdn_id": "_DH2YhiaaF0.mp4"
              }
            },
            {
              "id": 300121,
              "key": "39c6341e-55a9-4f8a-b0fd-3b5390cf8ed0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introduction\nNow we have a customized media player that works perfectly for our app. The last step is to make it play well with external clients and other apps. But before we can set up a Media Session, we need to find out what the state of ExoPlayer is so that we can keep our Media Session in sync. We learned that state changes happen automatically with our `SimpleExoPlayerView`, but how are we going to get that information over to the Media Session? Go to the next video to find out!",
              "instructor_notes": ""
            },
            {
              "id": 297538,
              "key": "536e5e43-be26-446e-aeaf-347f3a4c0dfb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# ExoPlayer Event Listening\n\nIn this exercise, you'll monitor the state changes of the ExoPlayer using an EventListener, and log the state every time it changes.\n\n### Exercise Code\n**Exercise:** [TMED.03-Exercise-EventListening](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.03-Exercise-EventListening)\n",
              "instructor_notes": ""
            },
            {
              "id": 297541,
              "key": "b3f53970-6ac4-419a-a372-be671fcbf26e",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b3f53970-6ac4-419a-a372-be671fcbf26e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "For the QuizActivity, implement ExoPlayer.EventListener and add the required methods",
                "For QuizActivity, Set the ExoPlayer.EventListener",
                "Add conditional logging statements to the onPlayerStateChanged() method that log when ExoPlayer is playing or paused"
              ],
              "positive_feedback": "Status logged! Woot!\n\n**Solution:** [[TMED.03-Solution-EventListening](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.03-Solution-EventListening)][[Diff](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/compare/TMED.03-Exercise-EventListening...TMED.03-Solution-EventListening?expand=1)]",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 292528,
              "key": "3034708b-a909-49c0-b08f-7c3499dd6074",
              "title": "ExoPlayer Event",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3034708b-a909-49c0-b08f-7c3499dd6074",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In which method should you update the state of the MediaSession?",
                "answers": [
                  {
                    "id": "a1491936046995",
                    "text": "onPlay()",
                    "is_correct": false
                  },
                  {
                    "id": "a1491936075400",
                    "text": "MySessionCallbacks",
                    "is_correct": false
                  },
                  {
                    "id": "a1491936084527",
                    "text": "onPlayerStateChanged()",
                    "is_correct": true
                  },
                  {
                    "id": "a1491936093145",
                    "text": "onCreate()",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 297448,
          "key": "c3b45607-b1ce-40d6-91c0-ef6d71bb2e5f",
          "title": "Add Media Session - Part 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c3b45607-b1ce-40d6-91c0-ef6d71bb2e5f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300184,
              "key": "9460595b-4388-4a43-993e-7f9831965822",
              "title": "Add Media Session - Part 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "urdyOlcisqg",
                "china_cdn_id": "urdyOlcisqg.mp4"
              }
            },
            {
              "id": 321953,
              "key": "2e2cb83e-b884-40c3-b34e-fc4fc9bb863a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<a href=\"https://developer.android.com/guide/topics/media-apps/working-with-a-media-session.html\" target=\"_blank\">Working with a Media Session</a>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 297446,
          "key": "2a7ad530-1fb9-4483-ac37-70acaa65f97a",
          "title": "ExoPlayer Event",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2a7ad530-1fb9-4483-ac37-70acaa65f97a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297558,
              "key": "3df136e3-d889-40c1-b4bf-6ddd677d6b92",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3df136e3-d889-40c1-b4bf-6ddd677d6b92",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In which method should you update the state of the MediaSession?\n",
                "answers": [
                  {
                    "id": "a1492213715073",
                    "text": "`onPlay()`",
                    "is_correct": false
                  },
                  {
                    "id": "a1492213733919",
                    "text": "`MySessionCallbacks`",
                    "is_correct": false
                  },
                  {
                    "id": "a1492213740711",
                    "text": "`onPlayerStateChanged()`",
                    "is_correct": true
                  },
                  {
                    "id": "a1492213748049",
                    "text": "`onCreate()`",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 292530,
          "key": "f7b7f8b8-e6db-4665-b3af-190e6fc47838",
          "title": "Exercise: Add Media Session - Part 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f7b7f8b8-e6db-4665-b3af-190e6fc47838",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297542,
              "key": "7e77f5be-030e-48a7-be14-d9ee6317bd3a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Add Media Session\n\n### Exercise Code\n**Exercise:** [TMED.04-Exercise-AddMediaSession](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.04-Exercise-AddMediaSession)",
              "instructor_notes": ""
            },
            {
              "id": 300185,
              "key": "48b95be2-1e27-402d-896b-da73eaec11a4",
              "title": "Add Media Session - Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "F2z2GuFXgfg",
                "china_cdn_id": "F2z2GuFXgfg.mp4"
              }
            },
            {
              "id": 297543,
              "key": "edc0aba0-bccc-4777-94a6-0cb53f4d1210",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "edc0aba0-bccc-4777-94a6-0cb53f4d1210",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a method to initialize the MediaSession",
                "Create an inner class that extends MediaSessionCompat.Callbacks and override the required methods",
                "Update PlayBackState appropriately depending on if ExoPlayer is playing or paused",
                "When the activity is destroyed, set the MediaSession to inactive"
              ],
              "positive_feedback": "Excellent work!\n\n**Solution:** [[TMED.04-Solution-AddMediaSession](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.04-Solution-AddMediaSession)][[Diff](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/compare/TMED.04-Exercise-AddMediaSession...TMED.04-Solution-AddMediaSession?expand=1)]",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 292531,
          "key": "71c77fa7-b8e2-42af-ad0d-2883f9b49b18",
          "title": "Exercise: MediaStyle Notification",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "71c77fa7-b8e2-42af-ad0d-2883f9b49b18",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298241,
              "key": "74f28351-708b-4dc1-8a04-ddc6397efccc",
              "title": "MediaStyle Notification",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<a href=\"https://developer.android.com/reference/android/support/v7/app/NotificationCompat.MediaStyle.html\" target=\"_blank\">Documentation on MediaStyle Notification</a>",
              "video": {
                "youtube_id": "0fxdMQlkErE",
                "china_cdn_id": "0fxdMQlkErE.mp4"
              }
            },
            {
              "id": 297544,
              "key": "28a6f997-112a-4fdd-bbdd-06b3201f78a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Add MediaStyle Notification\n\nIn this exercise, you'll create MediaStyle notification that can act as an external client for controlling the Media Session, and therefore the media playback.You'll then fix the MediaStyle notification actions by creating a MediaButtonReceiver that can respond to external client actions\n\n### Exercise Code\n**Exercise:** [TMED.05-Exercise-AddMediaNotification](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.05-Exercise-AddMediaNotification)",
              "instructor_notes": ""
            },
            {
              "id": 297545,
              "key": "bf752b02-6e55-4b93-ace7-7cbff2c790ca",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bf752b02-6e55-4b93-ace7-7cbff2c790ca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a method that shows a MediaStyle notification with two actions (play/pause, skip to previous)",
                "Call the method to show the notification"
              ],
              "positive_feedback": "New Notification - MediaStyle Notification Done :)\n\n**Solution:** <a href=\"https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.05-Solution-AddMediaNotification\" target=\"_blank\">TMED.05-Solution-AddMediaNotification</a>\n<a href=\"https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/compare/TMED.05-Exercise-AddMediaNotification...TMED.05-Solution-AddMediaNotification?expand=1\" target=\"_blank\">Diff</a>",
              "video_feedback": null,
              "description": ""
            },
            {
              "id": 297549,
              "key": "fdf07d11-b1ae-4a72-8858-8d4b0cee3cbc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Add Media Button Receiver\n\n### Exercise Code\n**Exercise:** [TMED.06-Exercise-AddMediaButtonReceiver](https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.06-Exercise-AddMediaButtonReceiver)",
              "instructor_notes": ""
            },
            {
              "id": 297553,
              "key": "baa2c07f-9d47-4af1-aa17-0dcf03e245e8",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "baa2c07f-9d47-4af1-aa17-0dcf03e245e8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a static inner class that extends Broadcast Receiver and implement the onReceive() method",
                "Call MediaButtonReceiver.handleIntent and pass in the incoming intent and MediaSession object",
                "Create a receiver tag for the receiver you create in QuizActivity and add an Intent Filter"
              ],
              "positive_feedback": "Classical Quiz Complete!\n\n**Solution:** <a href=\"https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/tree/TMED.06-Solution-AddMediaButtonReceiver\" target=\"_blank\">TMED.06-Solution-AddMediaButtonReceiver</a>\n<a href=\"https://github.com/udacity/AdvancedAndroid_ClassicalMusicQuiz/compare/TMED.06-Exercise-AddMediaButtonReceiver...TMED.06-Solution-AddMediaButtonReceiver?expand=1\" target=\"_blank\">Diff</a>",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 297449,
          "key": "43629d9f-b08e-499d-9300-125b8cb8ebbc",
          "title": "Introduction to Audio Focus and Extra ExoPlayer Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "43629d9f-b08e-499d-9300-125b8cb8ebbc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298537,
              "key": "8536e578-91a1-4535-825b-41f7a8f2fa79",
              "title": "Introduction to Audio Focus and Extra ExoPlayer Features",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RZv_dU8gHTE",
                "china_cdn_id": "RZv_dU8gHTE.mp4"
              }
            }
          ]
        },
        {
          "id": 297450,
          "key": "c6a354c3-217d-439f-a298-4f1840211796",
          "title": "Audio Focus and Extra ExoPlayer Features",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c6a354c3-217d-439f-a298-4f1840211796",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 297557,
              "key": "bb63958b-f8e6-4841-a3bd-05fa52e3601b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Android Media Framework Extras\n \n### Audio Focus\n\nThis is how the Android framework knows about different applications using audio. If you want your app to fade out when other important notifications (such as navigation) occur, you'll need to learn how your app can \"hop in line\" to be the one in charge of audio playback, until another app requests focus.\n\n### Noisy Intent\n\nThere are certain conditions that you will want to check for. For example, imagine you are blasting your favorite song at full volume. Little does anyone know, but your favorite song is \"Itsy Bitsy Spider\". Right when it's about to get to the best part, you trip and yank out the headphones from the audio port. Suddenly the whole world knows your secret. Not the best experience right? Luckily the android framework sends out the  [ACTION_AUDIO_BECOMING_NOISY](https://developer.android.com/reference/android/media/AudioManager.html#ACTION_AUDIO_BECOMING_NOISY) intent when this occurs. This allows you to register a broadcast receiver and take a specific action when this occurs (like pausing the music and saving yourself of embarrassment). \n\n### Audio Stream\n\nAndroid uses separate audio streams for playing music, alarms, notifications, the incoming call ringer, system sounds, in-call volume, and DTMF tones. This allows users to control the volume of each stream independently.\n\nBy default, pressing the volume control modifies the volume of the active audio stream. If your app isn't currently playing anything, hitting the volume keys adjusts the ringer volume.\nTo ensure that volume controls adjust the correct stream, you should call [setVolumeControlStream()](https://developer.android.com/reference/android/app/Activity.html#setVolumeControlStream(int) passing in [AudioManager.STREAM_MUSIC](https://developer.android.com/reference/android/media/AudioManager.html#STREAM_MUSIC).\n\n# ExoPlayer Extras\n\n### Subtitle Side Loading\n\nGiven a video file and a separate subtitle file, MergingMediaSource can be used to merge them into a single source for playback.\n\n``` java\nMediaSource videoSource = new ExtractorMediaSource(videoUri, ...);\nMediaSource subtitleSource = new SingleSampleMediaSource(subtitleUri, ...);\n// Plays the video with the sideloaded subtitle.\nMergingMediaSource mergedSource =\n    new MergingMediaSource(videoSource, subtitleSource);\n```\n\n### Looping a video\n\nA video can be seamlessly looped using a LoopingMediaSource. The following example loops a video indefinitely. It’s also possible to specify a finite loop count when creating a LoopingMediaSource.\n\n```java\nMediaSource source = new ExtractorMediaSource(videoUri, ...);\n// Loops the video indefinitely.\nLoopingMediaSource loopingSource = new LoopingMediaSource(source);\n```\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}