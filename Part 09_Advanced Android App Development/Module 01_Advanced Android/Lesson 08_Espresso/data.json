{
  "data": {
    "lesson": {
      "id": 268703,
      "key": "f0084cc7-2cbc-4b8e-8644-375e8c927167",
      "title": "Espresso",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "This lesson will teach you all about Espresso, Android's testing framework that simplifies writing UI tests. We will cover testing basic Views, AdapterViews, Intents, and IdlingResources.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/f0084cc7-2cbc-4b8e-8644-375e8c927167/268703/1516748413617/Espresso%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/f0084cc7-2cbc-4b8e-8644-375e8c927167/268703/1516748393575/Espresso%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 277608,
          "key": "e4448227-af55-4883-ab88-e8ed717e2800",
          "title": "Is that Espresso in My Tea?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e4448227-af55-4883-ab88-e8ed717e2800",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 289123,
              "key": "76cc8216-c510-48c9-8bd5-3497146565db",
              "title": "Is that Espresso in My Tea?",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ORmbNTo9XRY",
                "china_cdn_id": "ORmbNTo9XRY.mp4"
              }
            }
          ]
        },
        {
          "id": 277609,
          "key": "3aa91842-e7fb-4689-912a-5d8776e844ca",
          "title": "Quiz: Welcome to the World of Testing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3aa91842-e7fb-4689-912a-5d8776e844ca",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300432,
              "key": "3b6492ae-7643-42f5-897e-a13ba14118ed",
              "title": "Welcome To The World Of Testing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qLWvc56oKnY",
                "china_cdn_id": "qLWvc56oKnY.mp4"
              }
            },
            {
              "id": 278778,
              "key": "c2c2235b-0d81-4c77-b728-a9e0cca05b53",
              "title": "How would you explain the UI testing process?",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c2c2235b-0d81-4c77-b728-a9e0cca05b53",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "You are on a 2-person developer team for an online ticket seller. You just finished adding the order button, which opens up an order summary, and need your teammate to help manually test the UI. To help them understand exactly what to test and expect, write in SHORT, CONCISE steps what they need to do (e.g. \"Step 1: Open app and find order button\").",
                "matchers": [
                  {
                    "expression": ".*"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 278755,
          "key": "d37b0c0b-0fbc-4fe6-9d69-d5f1415b318d",
          "title": "Welcome to the World of Testing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d37b0c0b-0fbc-4fe6-9d69-d5f1415b318d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300435,
              "key": "3b062fe4-b620-4173-a6fe-41a6695e8f04",
              "title": "Welcome To The World Of Testing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4ujK1F6OaOI",
                "china_cdn_id": "4ujK1F6OaOI.mp4"
              }
            }
          ]
        },
        {
          "id": 277615,
          "key": "92760ae0-e9bb-45be-a83e-fb2f04105c4a",
          "title": "Quiz: TeaTime Starting Code Walkthrough",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "92760ae0-e9bb-45be-a83e-fb2f04105c4a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 278781,
              "key": "3241e062-a253-41ce-afae-30ccb002c044",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# TeaTime Code\n\nThe code for this app can be found in the [TeaTime Repository](https://github.com/udacity/AdvancedAndroid_TeaTime). Download the repository using this command:\n\n```bash\ngit clone https://github.com/udacity/AdvancedAndroid_TeaTime.git\n```\n\nIf you need a refresher on how the code is organized, please refer to the [TeaTime README](https://github.com/udacity/AdvancedAndroid_TeaTime) for a detailed explanation.\n\n### Exercise Code\n**Exercise:** [TESP.00-StartingCode](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.00-StartingCode)\n\n---\n\n## Explanation of TeaTime\nThroughout this lesson we’ll be using Espresso on the TeaTime app. I’ve coded up the basic functionality, and before we build it out any further, I’d like your help in testing various UI components. We want to develop with testing in mind so that we can catch potential bugs early on. \n\nIn the project, under *app/main/java/com/example/android/teatime* you’ll find these java files: \n\n#### MenuActivity.java\n\n",
              "instructor_notes": ""
            },
            {
              "id": 278783,
              "key": "080058b7-1ec7-4e23-b28b-a60bbc7b1249",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58bf299a_teatime-menuactivity/teatime-menuactivity.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/080058b7-1ec7-4e23-b28b-a60bbc7b1249",
              "caption": "",
              "alt": null,
              "width": 1080,
              "height": 1920,
              "instructor_notes": null
            },
            {
              "id": 278785,
              "key": "5dcaa4cc-3402-4832-a446-36ac04b9980c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This is the initial screen of the app. Users can select from a gridview of possible tea options.\n\n#### OrderActivity.java",
              "instructor_notes": ""
            },
            {
              "id": 278786,
              "key": "32c61739-0f85-439d-9cef-9df7994e5480",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58bf2a8f_teatime-menuactivity-03072017134707/teatime-menuactivity-03072017134707.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/32c61739-0f85-439d-9cef-9df7994e5480",
              "caption": "",
              "alt": null,
              "width": 1080,
              "height": 1920,
              "instructor_notes": null
            },
            {
              "id": 278787,
              "key": "d35dae3b-4788-4f1e-ac4e-d6d66cc01ba5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "After the user selects a tea from MenuActivity, they are taken to an OrderActivity where they can customize the tea they have selected. There are 3 spinner setups (for size, milk, and sugar). The user can also change the quantity. The total price is updated according to the size selected and the quantity.\n\n#### OrderSummaryActivity.java",
              "instructor_notes": ""
            },
            {
              "id": 278788,
              "key": "f2b4a612-513f-4c2e-8258-377d36dd8515",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58bf2b16_teatime-menuactivity-03072017134916/teatime-menuactivity-03072017134916.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f2b4a612-513f-4c2e-8258-377d36dd8515",
              "caption": "",
              "alt": null,
              "width": 1080,
              "height": 1920,
              "instructor_notes": null
            },
            {
              "id": 278790,
              "key": "78be1f72-6e78-454c-815e-1c80519fc88f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Once the user hits the “Brew Tea” button in OrderActivity they are taken to the OrderSummaryActivity which displays details about the order just placed. On this screen the user also has the option to share and let their friends know that they are using this cool new app via an email intent.\n\n#### TeaMenuAdapter.java\nThe TeaMenuAdapter is backed by an ArrayList of Tea objects which populate the GridView in MenuActivity.\n\nUnder *app/main/java/com/example/android/teatime/model/* you'll find these files:\n\n#### Tea.java\nThis class represents a tea that the user can select from the menu. It contains a tea name and an associated image.\n\nIn *app/src/**androidTest/java**/com/example/android/teatime* you'll find instrumented test files:\n\n#### Instrumented Test\n\nThis lesson will focus on **User Interface (UI) Tests** which are a type of **Instrumented Tests**. Instrumented Tests need to be run on a physical device or emulator. There are a number of other types of tests available which we will explore later in this lesson. \nInstrumented Tests are always located under *module-name/src/androidTest/java/*\n",
              "instructor_notes": ""
            },
            {
              "id": 278794,
              "key": "1b40e2d0-5b2b-40da-9a5b-e40fe1737c37",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58bf2db1_screen-shot-2017-03-07-at-2.01.08-pm/screen-shot-2017-03-07-at-2.01.08-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1b40e2d0-5b2b-40da-9a5b-e40fe1737c37",
              "caption": "Instrumented Tests are always found in the androidTest/java folder",
              "alt": null,
              "width": 806,
              "height": 298,
              "instructor_notes": null
            },
            {
              "id": 278795,
              "key": "5ccfde0f-daf9-4833-977f-c22df3142c16",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You’ll notice that this app contains Views, AdapterViews, and Intents and this is no coincidence. \nEspresso is helpful for testing:\n* Views\n* AdapterViews\n* Intents\n* Idling Resources\n\nThe last component, Idling Resource, is a new term. Idling Resources are used when testing any asynchronous code, for example long-running database operations that are off the main thread. We will cover testing this in-depth later in the lesson. ",
              "instructor_notes": ""
            },
            {
              "id": 278797,
              "key": "6a5a5f57-bf83-4296-9152-b32852d9eb5f",
              "title": "What is the name of the Instrumented Test?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6a5a5f57-bf83-4296-9152-b32852d9eb5f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the name of the Instrumented Test?",
                "answers": [
                  {
                    "id": "a1488924375773",
                    "text": "TeaTimeInstrumentedTest",
                    "is_correct": false
                  },
                  {
                    "id": "a1488924406330",
                    "text": "ExampleInstrumentedTest",
                    "is_correct": true
                  },
                  {
                    "id": "a1488924415744",
                    "text": "ExampleUnitTest",
                    "is_correct": false
                  },
                  {
                    "id": "a1488924420900",
                    "text": "There is none yet",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 278798,
              "key": "60ab26dd-6d13-49e7-b470-ce58b4e58f3c",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "60ab26dd-6d13-49e7-b470-ce58b4e58f3c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The TeaMenuAdapter is used to populate what type of View in the MenuActivity?",
                "answers": [
                  {
                    "id": "a1488924727979",
                    "text": "RecyclerView",
                    "is_correct": false
                  },
                  {
                    "id": "a1488924750229",
                    "text": "ListView",
                    "is_correct": false
                  },
                  {
                    "id": "a1488924753761",
                    "text": "GridView",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 278799,
              "key": "503b4f9f-3719-41b8-bd6e-297f3ed19b77",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "503b4f9f-3719-41b8-bd6e-297f3ed19b77",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many compile dependencies currently exist in app level build.gradle?",
                "answers": [
                  {
                    "id": "a1488924863513",
                    "text": "0",
                    "is_correct": false
                  },
                  {
                    "id": "a1488924874457",
                    "text": "1",
                    "is_correct": false
                  },
                  {
                    "id": "a1488924876487",
                    "text": "3",
                    "is_correct": true
                  },
                  {
                    "id": "a1488924878492",
                    "text": "4",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 277616,
          "key": "6d342245-9742-45c0-b758-6c0072e87e55",
          "title": "Exercise: Write a Basic Espresso Test",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6d342245-9742-45c0-b758-6c0072e87e55",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 289126,
              "key": "51960eb5-7d74-4b02-80c9-ce7e3a2f7462",
              "title": "Exercise: Write a Basic Espresso Test",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XhDRYv0wWF8",
                "china_cdn_id": "XhDRYv0wWF8.mp4"
              }
            },
            {
              "id": 291719,
              "key": "ac688a2a-521b-403c-8272-789ff39f80f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Write a Basic Espresso Test\n\nIt's time to write your first Espresso test in TeaTime. We'll start by adding an `OrderActivityBasicTest` which will demo a user clicking on the decrement button. The test will verify that this action properly decreases the quantity and the total cost. \n\nRemember to follow the 3 General steps of Espresso View Testing: \n1. Find the view\n2. Perform action on the view\n3. Check if the view does what you expected\n\nAlso, remember Google’s handy [Espresso Cheat Sheet](https://developer.android.com/training/testing/espresso/cheat-sheet) for possible Matchers, Actions, and Assertions. \n\n### Exercise Code\n**Exercise:** [TESP.01-Exercise-FinishOrderActivityBasicTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.01-Exercise-FinishOrderActivityBasicTest)",
              "instructor_notes": ""
            },
            {
              "id": 278804,
              "key": "fb431a29-c116-4aaa-a17a-6988b30f43dc",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fb431a29-c116-4aaa-a17a-6988b30f43dc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add test runner annotation",
                "Add rule for single activity testing",
                "Complete test to check decrement functionality",
                "Add Espresso gradle dependencies"
              ],
              "positive_feedback": "*High five!* First Espresso test done :)\n\n**Solution:** [[TESP.01-Solution-FinishOrderActivityBasicTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.01-Solution-FinishOrderActivityBasicTest)][[Diff](https://github.com/udacity/AdvancedAndroid_TeaTime/compare/TESP.01-Exercise-FinishOrderActivityBasicTest...TESP.01-Solution-FinishOrderActivityBasicTest?expand=1)]",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 277622,
          "key": "ad932c9c-ca16-4319-a6fa-9e0f29372a14",
          "title": "Exercise: Test AdapterViews with Espresso",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ad932c9c-ca16-4319-a6fa-9e0f29372a14",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 278853,
              "key": "a5d03ad4-3e9d-470e-a98f-658888288625",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Test AdapterViews with Espresso\n\nIn this exercise you'll finish building the `MenuActivityScreenTest`, which demos a user clicking on a `GridView` item in `MenuActivity`, and opens up the corresponding `OrderActivity`. \n\n### Exercise Code\n**Exercise:** [TESP.02-Exercise-AddMenuActivityScreenTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.02-Exercise-AddMenuActivityScreenTest)\n\n___",
              "instructor_notes": ""
            },
            {
              "id": 298297,
              "key": "333270bf-2870-4db8-aa8a-7219f5730c6a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f532ff_screen-shot-2017-04-17-at-2.26.12-pm/screen-shot-2017-04-17-at-2.26.12-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/333270bf-2870-4db8-aa8a-7219f5730c6a",
              "caption": "AdapterViews include ListViews and GridViews",
              "alt": null,
              "width": 870,
              "height": 576,
              "instructor_notes": null
            },
            {
              "id": 298301,
              "key": "0b3355b2-da0e-41bc-806c-8bea16857ebe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "While `onView()` can handle most Views in our UI, Espresso does require a different method call when dealing with AdapterView widgets. Since AdapterViews such as *ListView* and *GridView* load data dynamically from an Adapter, only a subset of the contents may be loaded in the current view hierarchy at a time. This means that `onView()` may not be able to find the necessary view. \n\nTo handle this we need to use `onData()`  which loads the adapter item we are interested in onto the screen before operating on it. ",
              "instructor_notes": ""
            },
            {
              "id": 298310,
              "key": "2e879ce5-0fe7-407e-bb08-985901f0c6ed",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f53542_screen-shot-2017-04-17-at-2.35.26-pm/screen-shot-2017-04-17-at-2.35.26-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2e879ce5-0fe7-407e-bb08-985901f0c6ed",
              "caption": "",
              "alt": null,
              "width": 956,
              "height": 738,
              "instructor_notes": null
            },
            {
              "id": 298312,
              "key": "26b31788-d214-49c9-b1ea-73dd19ee1df6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To help us further specify the item in the AdapterView we’re interested in, we can use a *DataOption* method such as `inAdapterView()` or `atPosition()`. These methods are highlighted in the cheat sheet below. ",
              "instructor_notes": ""
            },
            {
              "id": 298316,
              "key": "b0efeecb-7736-4753-8b56-03853a56df84",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f53648_screen-shot-2017-04-17-at-2.40.12-pm/screen-shot-2017-04-17-at-2.40.12-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b0efeecb-7736-4753-8b56-03853a56df84",
              "caption": "",
              "alt": null,
              "width": 1432,
              "height": 780,
              "instructor_notes": null
            },
            {
              "id": 298319,
              "key": "28f523b2-524f-42f0-b9be-58a99c1efd19",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "After that, we *perform* an action and then *check* that we get the desired result on the view that we’re interested in. \n\nNotice that how we test Views in AdapterViews is very similar to how we test single Views - *matching, acting, and asserting*. ",
              "instructor_notes": ""
            },
            {
              "id": 298322,
              "key": "89295f83-06b9-47a8-9b99-eccfa0ebf83c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f536dd_screen-shot-2017-04-17-at-2.42.41-pm/screen-shot-2017-04-17-at-2.42.41-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/89295f83-06b9-47a8-9b99-eccfa0ebf83c",
              "caption": "",
              "alt": null,
              "width": 1450,
              "height": 728,
              "instructor_notes": null
            },
            {
              "id": 298326,
              "key": "7e17dd3d-850f-4888-971a-283b7f7f237c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As you may have guessed, the perfect place to try this out is in the GridView of MenuActivity of TeaTime!\n\nOne test I’d like to run is clicking on a gridView tea item and checking that it opens up the corresponding tea OrderActivity. ",
              "instructor_notes": ""
            },
            {
              "id": 298329,
              "key": "ab275577-2b17-4f5b-8fb2-72e1157c3f7e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f537c9_screen-shot-2017-04-17-at-2.46.09-pm/screen-shot-2017-04-17-at-2.46.09-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ab275577-2b17-4f5b-8fb2-72e1157c3f7e",
              "caption": "",
              "alt": null,
              "width": 1016,
              "height": 714,
              "instructor_notes": null
            },
            {
              "id": 298331,
              "key": "d8a0978f-d22d-4ed7-b5b8-98df14208ed0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For this exercise, start by downloading the code from [TESP.02-Exercise-AddMenuActivityScreenTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.02-Exercise-AddMenuActivityScreenTest).\n\nYou’ll see that I’ve added the skeleton of MenuActivityScreenTest.java and some TODOs. \n\nThis time I’ll give you fewer hints, since I want to you to explore how to perform a click action on a gridView item by yourself. Then you’ll check that it opened up the correct OrderActivity by verifying the tea name text view. \n\nCheck out the resources below if you need a hint about which methods to use in order to specify specific AdapterView items.\n\n### Resources\n- Check out the Data Options section of the [Espresso Cheat Sheet](https://google.github.io/android-testing-support-library/docs/espresso/cheatsheet/)\n- See the description of the data option methods in the [DataInteraction documentation](https://developer.android.com/reference/android/support/test/espresso/DataInteraction.html)\n",
              "instructor_notes": ""
            },
            {
              "id": 278855,
              "key": "b7591b34-a9f2-405c-beb5-834342989043",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b7591b34-a9f2-405c-beb5-834342989043",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add the test runner annotation",
                "Add the rule to test a single activity",
                "Finish the test that will click on a gridView item and verify that the OrderActivity opens up with the correct tea name"
              ],
              "positive_feedback": "Nice work! We've covered 2 types of Espresso tests so far. Stay tuned for more.\n\n**Solution:** [[ESP.02-Solution-AddMenuActivityScreenTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.02-Solution-AddMenuActivityScreenTest)][[Diff](https://github.com/udacity/AdvancedAndroid_TeaTime/compare/TESP.02-Exercise-AddMenuActivityScreenTest...TESP.02-Solution-AddMenuActivityScreenTest?expand=1)]",
              "video_feedback": null,
              "description": "Follow the TODOs to complete this exercise."
            }
          ]
        },
        {
          "id": 277624,
          "key": "a5259737-1e94-4b53-9fbf-3c79101436c6",
          "title": "Test Intents with Espresso",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a5259737-1e94-4b53-9fbf-3c79101436c6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300433,
              "key": "a58fb237-dba1-4e0b-95c7-257956ed464e",
              "title": "Test Intents With Espresso",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XasgA5xq5Mo",
                "china_cdn_id": "XasgA5xq5Mo.mp4"
              }
            }
          ]
        },
        {
          "id": 277625,
          "key": "75ca4757-dd41-4300-b563-0c5af4610b91",
          "title": "Intent Stubbing vs. Intent Verification",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "75ca4757-dd41-4300-b563-0c5af4610b91",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 278922,
              "key": "c75bc179-7d4f-467a-a32c-85d2e3033d55",
              "title": "Intent Stubbing vs. Intent Verification",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c75bc179-7d4f-467a-a32c-85d2e3033d55",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "To solidify the two concepts - Intent Stubbing and Intent Verification - and how we can implement them, complete the following drag and drop quiz. Match the correct characteristic to the associated type of Intent Testing. "
                },
                "concepts_label": "Type of Intent Action",
                "answers_label": "Characteristic",
                "concepts": [
                  {
                    "text": "Intent Stubbing Code",
                    "correct_answer": {
                      "id": "a1489014246046",
                      "text": "*intending(Matcher<Intent> matcher)*"
                    }
                  },
                  {
                    "text": "Intent Stubbing Description",
                    "correct_answer": {
                      "id": "a1489014363381",
                      "text": "Using a small piece of code as a fake response to an intent call during a test. The benefit of this is that it gives us consistent results and allows us to test one action at a time"
                    }
                  },
                  {
                    "text": "Intent Verification Code",
                    "correct_answer": {
                      "id": "a1489014667320",
                      "text": "*intended(Matcher<Intent> matcher, VerificationMode verification)*"
                    }
                  },
                  {
                    "text": "Intent Verification Description",
                    "correct_answer": {
                      "id": "a1489014677837",
                      "text": "Using a hardcoded matcher to verify that the information we intended to send in an intent is what was sent"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1489014363381",
                    "text": "Using a small piece of code as a fake response to an intent call during a test. The benefit of this is that it gives us consistent results and allows us to test one action at a time"
                  },
                  {
                    "id": "a1489014677837",
                    "text": "Using a hardcoded matcher to verify that the information we intended to send in an intent is what was sent"
                  },
                  {
                    "id": "a1489014667320",
                    "text": "*intended(Matcher<Intent> matcher, VerificationMode verification)*"
                  },
                  {
                    "id": "a1489014246046",
                    "text": "*intending(Matcher<Intent> matcher)*"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 277627,
          "key": "f0c53eb6-722d-4558-b317-d4205dc7822d",
          "title": "Intent Stubbing Code Example",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0c53eb6-722d-4558-b317-d4205dc7822d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 278928,
              "key": "e59a387b-e6af-4716-b8ee-33904bed9cd0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Intent Stubbing Code Example\n\nLet's see an example of Intent Stubbing in practice. Navigate to the [IntentBasicSample code](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample) created by the Google team.  \n\n## Analyze DialerActivity\nThis project contains a [DialerActivity](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/main/java/com/example/android/testing/espresso/BasicSample/DialerActivity.java) where users can enter a phone number.\n\nWhen the \"Call Number\" is pressed, the inputted number is sent to the native Android app using an `ACTION_CALL` Intent.\nThere is also a \"Pick Number\" button which starts a dummy `ContactsActivity` that will be used to demonstrate Intent Stubbing. \n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 278929,
              "key": "0733488e-6019-4454-b1cc-9ccc23a70fef",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c0a31b_basicsample-dialeractivity-03082017162610/basicsample-dialeractivity-03082017162610.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0733488e-6019-4454-b1cc-9ccc23a70fef",
              "caption": "DialerActivity screen",
              "alt": null,
              "width": 1080,
              "height": 1920,
              "instructor_notes": null
            },
            {
              "id": 278931,
              "key": "eaf58843-b642-48fb-af21-1fa6400fd4b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Analyze DialerActivityTest\nThe project also contains a [DialerActivityTest](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java) file. \n\nLet's break this test down.\n\n### `@RunWith`\n\nThis test runs with `AndroidJUnit4` which we've seen before:\n```java\n@RunWith(AndroidJUnit4.class)\n```\n\n### `@Rule` \nInstead of the `ActivityTestRule` that we've seen before, this test uses the  [IntentsTestRule](https://developer.android.com/reference/android/support/test/espresso/intent/rule/IntentsTestRule.html). This rule is an extension of the `ActivityTestRule`, which initializes Intents before each Espresso test (`@Test`) is run and releases the Intent after each test is run. The associated activity is terminated after each test. ",
              "instructor_notes": ""
            },
            {
              "id": 278932,
              "key": "848977a0-4d62-43d9-981c-f4111f271fb3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c0a67e_screen-shot-2017-03-08-at-4.48.49-pm/screen-shot-2017-03-08-at-4.48.49-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/848977a0-4d62-43d9-981c-f4111f271fb3",
              "caption": "",
              "alt": null,
              "width": 1160,
              "height": 136,
              "instructor_notes": null
            },
            {
              "id": 278939,
              "key": "0a3ffc96-f07e-412d-b76e-a9272d7af05b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### `@Before` - `stubAllExternalIntents()`\nAs mentioned in the comment in the code snippet below, by default Espresso Intent does not stub any Intents; instead, stubbing must be set up each time a test is run. The method `stubAllExternalIntents()` makes sure all external Intents are blocked. \n",
              "instructor_notes": ""
            },
            {
              "id": 278940,
              "key": "ed5bc412-15ae-457d-9a75-2a7f76572f77",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c0a96b_screen-shot-2017-03-08-at-5.01.05-pm/screen-shot-2017-03-08-at-5.01.05-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ed5bc412-15ae-457d-9a75-2a7f76572f77",
              "caption": "",
              "alt": null,
              "width": 1438,
              "height": 264,
              "instructor_notes": null
            },
            {
              "id": 278946,
              "key": "9e8d94e1-dec7-42e3-9292-b8df1b68b36c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "It uses the `intending()` method associated with stubbing and takes `not(isInternal())` as its `IntentMatcher` parameter. [isInternal()][1] matches an intent if its package is the same as the target package for the instrumentation test, therefore `not(isInternal())` checks that the intent's package does not match the target package for the test. If that's the case respond with:\n\n```java\nnew ActivityResult(Activity.RESULT_OK, null)\n```\n\n`ActivityResult(int resultCode, Intent resultData)` has 2 parameters. \n- `resultCode` - Is the code sent back to the original activity. `RESULT_OK` indicates the operation was successful. \n- `resultData` - Is the data to send back to the original activity. `null` indicates no data is sent back.\n\n### `@Before` - `grantPhonePermission()`\nIntended for Android M+, ensures permission to use the phone is granted before running the DialerActivityTest. \n\n[1]: https://developer.android.com/reference/android/support/test/espresso/intent/matcher/IntentMatchers.html#isInternal()",
              "instructor_notes": ""
            },
            {
              "id": 278947,
              "key": "a76b2112-74fa-4d5e-b53e-bf1a7d05f31a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c0ae54_screen-shot-2017-03-08-at-5.20.26-pm/screen-shot-2017-03-08-at-5.20.26-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a76b2112-74fa-4d5e-b53e-bf1a7d05f31a",
              "caption": "",
              "alt": null,
              "width": 1192,
              "height": 362,
              "instructor_notes": null
            },
            {
              "id": 278954,
              "key": "96b65a99-7258-4e00-8fbe-fccf82ac6530",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### @Test - pickContactButton_click_SelectsPhoneNumber()\nThis test mocks a user clicking the \"Contact Button\" in the DialerActivity, an intent to the ContactsActivity is then stubbed to return a hard-coded VALID_PHONE_NUMBER, and the finally the test checks that the phone number sent back is displayed in the UI.\n\nThe intent is stubbed here:",
              "instructor_notes": ""
            },
            {
              "id": 278956,
              "key": "f6b7439a-7c48-44c7-aad7-e7d9ccd42ac6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c0b53b_screen-shot-2017-03-08-at-5.49.43-pm/screen-shot-2017-03-08-at-5.49.43-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f6b7439a-7c48-44c7-aad7-e7d9ccd42ac6",
              "caption": "",
              "alt": null,
              "width": 1082,
              "height": 134,
              "instructor_notes": null
            },
            {
              "id": 278959,
              "key": "4ccc9562-4e0a-461d-bf17-0c8b5f77faf8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*hasComponent()* can match an intent by class name, package name or short class name. Here we match by ShortClassName for the ContactsActivity. \nWhen matched, respond with:\n\n```java\nnew ActivityResult(Activity.RESULT_OK, ContactsActivity.createResultData(VALID_PHONE_NUMBER))\n```\n\n*ActivityResult(int resultCode, Intent resultData)* has 2 parameters. \n- *resultCode* - the code sent back to the original activity. *RESULT_OK* indicates the operation was successful. \n- *resultData* - the data to send back to the original activity. In this case [ContactsActivity.createResultData(VALID_PHONE_NUMBER)](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/main/java/com/example/android/testing/espresso/BasicSample/ContactsActivity.java) creates a resultData object containing the phone number that will be sent back to the DialerActivity. \n\n### Summary\nThe Intent Stubbing test, *pickContactButton_click_SelectsPhoneNumber()* stubs the intent that is sent when the user clicks the \"Contact Button\" by passing a hard-coded phone number, VALID_PHONE_NUMBER.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 277630,
          "key": "a909598a-3dd2-4c11-b298-d0baeaaaa874",
          "title": "Intent Verification Code Example",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a909598a-3dd2-4c11-b298-d0baeaaaa874",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 278961,
              "key": "bbf33fd6-2093-4766-a57b-e1a3dbd40a3c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Intent Verification Code Example\n\nNow let's see Intent Verification in practice. Navigate again to the [IntentBasicSample code](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample) created by the Google team.  \n\n(See the previous concept for an explanation of the [DialerActivity](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/main/java/com/example/android/testing/espresso/BasicSample/DialerActivity.java) and the `@Rule` and `@Before` components of [DialerActivityTest](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java).)\n\n",
              "instructor_notes": ""
            },
            {
              "id": 278964,
              "key": "218b98af-5832-4ada-a716-db033435dc32",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c0c1df_basicsample-dialeractivity-03082017162610/basicsample-dialeractivity-03082017162610.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/218b98af-5832-4ada-a716-db033435dc32",
              "caption": "DialerActivity screen",
              "alt": null,
              "width": 1080,
              "height": 1920,
              "instructor_notes": null
            },
            {
              "id": 278965,
              "key": "a37f95b6-e583-4f5c-b9f2-53c364839060",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### @Test - typeNumber_ValidInput_InitiatesCall()\nThis test mocks typing a phone number into the EditText field in the `DialerActivity` and verifies that the intent to the dialer was sent with the correct action, phone number, and package.\n\nThis part of the code simulates typing the phone number into the `DialerActivity`: ",
              "instructor_notes": ""
            },
            {
              "id": 278963,
              "key": "69d70842-c12c-40f3-86c5-17eb59a85b28",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c0c172_screen-shot-2017-03-08-at-6.43.50-pm/screen-shot-2017-03-08-at-6.43.50-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/69d70842-c12c-40f3-86c5-17eb59a85b28",
              "caption": "",
              "alt": null,
              "width": 1306,
              "height": 252,
              "instructor_notes": null
            },
            {
              "id": 278966,
              "key": "eb99d5e0-aaf9-4e55-bc17-26c79ee3107b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This portion of the method verifies the intent to the dialer has the correct action, data, and package: ",
              "instructor_notes": ""
            },
            {
              "id": 278967,
              "key": "7635e68b-955d-4aea-9d7e-6f647ebc5833",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c0c328_screen-shot-2017-03-08-at-6.48.07-pm/screen-shot-2017-03-08-at-6.48.07-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7635e68b-955d-4aea-9d7e-6f647ebc5833",
              "caption": "",
              "alt": null,
              "width": 1352,
              "height": 258,
              "instructor_notes": null
            },
            {
              "id": 278968,
              "key": "42f7e0d8-4be7-4882-b803-6ab0a325b2c6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Summary\n\nThe Intent Verification test, `typeNumber_ValidInput_InitiatesCall()`, verifies the intent that is sent contains the correct information (e.g. action, data, package). ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 278723,
          "key": "8272d3fd-a963-499b-b752-b84834287003",
          "title": "Exercise: Add Intent Test in TeaTime",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8272d3fd-a963-499b-b752-b84834287003",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 298284,
              "key": "14a0218c-3d3a-4bf9-b06e-473ab7ec6b5f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Add Intent Test in TeaTime\n\nIn this exercise your task is to finish writing the `OrderSummaryActivityTest`.  `OrderSummaryActivityTest` will test the email intent that is sent from `OrderSummaryActivity`. \n\nI’ll leave it up to you to decide whether this is a case for intent stubbing or intent verification. \n\n\n### Exercise Code\n**Exercise:** [TESP.03-Exercise-AddOrderSummaryActivityTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.03-Exercise-AddOrderSummaryActivityTest)",
              "instructor_notes": ""
            },
            {
              "id": 287555,
              "key": "8e8330dd-c81a-43d4-b7ab-27d0d7b6e282",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8e8330dd-c81a-43d4-b7ab-27d0d7b6e282",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Specify AndroidJUnitRunner as the test runner",
                "Add the rule to use Espresso-intents APIs in functional UI tests",
                "For each test finish the method that runs before it and that stubs all external intents (so that all external intents are blocked)",
                "Finish the method that verifies the email intent",
                "Add all required build dependencies"
              ],
              "positive_feedback": "Hopefully testing Intents in Espresso wasn't too Intense :)\n\n**Solution:** [[TESP.03-Solution-AddOrderSummaryActivityTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.03-Solution-AddOrderSummaryActivityTest)][[Diff](https://github.com/udacity/AdvancedAndroid_TeaTime/compare/TESP.03-Exercise-AddOrderSummaryActivityTest...TESP.03-Solution-AddOrderSummaryActivityTest?expand=1)]",
              "video_feedback": null,
              "description": "Follow the TODOs to complete this exercise:"
            }
          ]
        },
        {
          "id": 278724,
          "key": "08c90b8c-bc42-4a5f-b670-d678aa15337a",
          "title": "Introduction to Espresso Idling Resources",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "08c90b8c-bc42-4a5f-b670-d678aa15337a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 300434,
              "key": "7b02d322-d14f-4b01-acba-907be563fd11",
              "title": "Introduction To Expresso Idling Resource",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pkZiBXGgSDQ",
                "china_cdn_id": "pkZiBXGgSDQ.mp4"
              }
            }
          ]
        },
        {
          "id": 278725,
          "key": "f355478b-c714-4423-9be7-ce1d9d1bacc3",
          "title": "When to Use Idling Resources",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f355478b-c714-4423-9be7-ce1d9d1bacc3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 278969,
              "key": "63189227-847a-40c7-8f38-4163636c0d15",
              "title": "When to Use Idling Resources",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "63189227-847a-40c7-8f38-4163636c0d15",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Select all the situations in which we should implement Idling Resources when testing the app with Espresso\n",
                "answers": [
                  {
                    "id": "a1489028011385",
                    "text": " A photo-altering app uses an IntentService to download and process images and returns the result to the activity via a Broadcast.",
                    "is_correct": true
                  },
                  {
                    "id": "a1489028049961",
                    "text": "A smoothie shop is constantly changing the menu in their mobile ordering app. When the user opens the app to order, it downloads an image and description for each menu item. ",
                    "is_correct": true
                  },
                  {
                    "id": "a1489028050826",
                    "text": "A calculator app that allows a user to divide a bill amongst friends who shared a meal. It takes the total meal cost and number of people sharing the meal, who ordered what, processes, and returns how much each individual should contribute. ",
                    "is_correct": false
                  },
                  {
                    "id": "a1489028069465",
                    "text": "In order to log into a banking app, users must enter their username and password, information that needs to be authenticated via an external client. A response of whether or not the request was successful is sent back to the user’s device.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 278726,
          "key": "d08f4f11-b8ff-4913-9766-5fb610a59de7",
          "title": "Idling Resource Code Sample - Part 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d08f4f11-b8ff-4913-9766-5fb610a59de7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 279002,
              "key": "c40beb92-0406-458f-ad1b-fd0bd914c002",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Idling Resource Code Sample - Part 1\n\nThe Tea shop that I’m building the TeaTime app for will actually have a lot more than the 6 types of tea that we’re currently have in the ArrayList. The owner is quite the tea enthusiast, constantly importing new teas and adding them to her menu. \n\nThis means that when users open up TeaTime, it’ll need to download the latest menu images and description. \n\nHmm sounds suspiciously like the smoothie scenario we just saw in the previous quiz. Not planned at all. I promise :)\n\nHowever before we dive into implementing IdlingResource, let’s see a simple example of how to set this up. \n\n## Basic Idling Resource Example App\n\nThe Android Testing team created a Basic Idling Resource app sample.\nI recommend opening the code from the link below and exploring the files along with me.\n\n**[Find Code Here](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IdlingResourceSample)**\n\nHere’s what the app looks like when it runs:",
              "instructor_notes": ""
            },
            {
              "id": 279003,
              "key": "b129077f-ca20-4a86-9464-fc081e48e72b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c19e8c_screen-shot-2017-03-09-at-10.27.06-am/screen-shot-2017-03-09-at-10.27.06-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b129077f-ca20-4a86-9464-fc081e48e72b",
              "caption": "Type in EditText field > Click button > Delay message > TextView displays typed message",
              "alt": null,
              "width": 836,
              "height": 372,
              "instructor_notes": null
            },
            {
              "id": 279005,
              "key": "a99933b0-63e7-4909-8f40-3d0eacb1f476",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Code Walk-Through\n\nThere are 3 java files - `SimpleIdlingResource.java`, `MainActivity.java`, and `MessageDelayer.java`. \n\n### SimpleIdlingResource.java\n\nLet’s start with [SimpleIdlingResource.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/IdlingResource/SimpleIdlingResource.java)\n\nAs the comment on the top of the file states, this is a very simple implementation of the [IdlingResource interface](https://developer.android.com/reference/android/support/test/espresso/IdlingResource.html):",
              "instructor_notes": ""
            },
            {
              "id": 279006,
              "key": "be0640b7-72f9-4bd8-9fe7-e6213ac58820",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1a06a_screen-shot-2017-03-09-at-10.34.31-am/screen-shot-2017-03-09-at-10.34.31-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/be0640b7-72f9-4bd8-9fe7-e6213ac58820",
              "caption": "",
              "alt": null,
              "width": 467,
              "height": 50,
              "instructor_notes": null
            },
            {
              "id": 279007,
              "key": "414f15af-960c-49d9-b42a-f9a159b76a55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Because it is an interface, we can see from the [Developer doc](https://developer.android.com/reference/android/support/test/espresso/IdlingResource.html#nestedclassesl) that we're required to complete the following 3 methods: ",
              "instructor_notes": ""
            },
            {
              "id": 279008,
              "key": "fc9496d3-c204-4b05-a4b2-cae87dd95e51",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1a0e2_screen-shot-2017-03-09-at-10.36.44-am/screen-shot-2017-03-09-at-10.36.44-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fc9496d3-c204-4b05-a4b2-cae87dd95e51",
              "caption": "",
              "alt": null,
              "width": 931,
              "height": 218,
              "instructor_notes": null
            },
            {
              "id": 279015,
              "key": "e45aab10-0187-4d23-9c33-e4d575089170",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "These methods are implemented here: ",
              "instructor_notes": ""
            },
            {
              "id": 279016,
              "key": "d961849b-b7c2-42ee-b185-096c1d480eb1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1a32b_screen-shot-2017-03-09-at-10.46.33-am/screen-shot-2017-03-09-at-10.46.33-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d961849b-b7c2-42ee-b185-096c1d480eb1",
              "caption": "",
              "alt": null,
              "width": 642,
              "height": 422,
              "instructor_notes": null
            },
            {
              "id": 279014,
              "key": "2ae0c95d-c0fd-4f1e-b301-8a6671cbc433",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the code above we also initiate an [AtomicBoolean](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicBoolean.html) object to control the state of idleness. This class provides us with a `boolean` variable that can be read and written to automatically. `AtomicBoolean`s are used when multiple threads need to check and change the boolean. This happens to be perfect for our situation.\n\nRemember that *if idle is false* there are pending operations in the background and any testing operations should be paused. \n*If idle is true* all is clear and testing operations can continue. \n\n## Summary\nImplementing the `IdlingResource` interface is straight forward: it requires completing the 3 required methods. We also created an instance of  [AtomicBoolean](https://developer.android.com/reference/java/util/concurrent/atomic/AtomicBoolean.html) in order to control idleness across multiple threads.\n\nNext we'll discuss `MainActivity` where we will use the `IdlingResource`.\n\n---\n\n## Learn More About:\n- [IdlingResource Interface](https://developer.android.com/reference/android/support/test/espresso/IdlingResource.html)\n\n- [Espresso Idling Resource](https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 278727,
          "key": "1449718b-df48-4789-a152-4e52f0093006",
          "title": "Idling Resource Code Sample - Part 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1449718b-df48-4789-a152-4e52f0093006",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 279024,
              "key": "a0fff2ed-4bd1-48e0-938a-7fc907601f26",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Idling Resource Code Sample - Part 2\n\nI recommend opening the code from the link below and exploring the files along with me.\n\n**[Find Code Here](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IdlingResourceSample)**\n\nHere’s what the app looks like when it runs:",
              "instructor_notes": ""
            },
            {
              "id": 279023,
              "key": "09361bf3-fe56-427a-8aa1-e6ec0eba4d7c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1ae65_screen-shot-2017-03-09-at-10.27.06-am/screen-shot-2017-03-09-at-10.27.06-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/09361bf3-fe56-427a-8aa1-e6ec0eba4d7c",
              "caption": "Type in EditText field > Click button > Delay message > TextView displays typed message",
              "alt": null,
              "width": 836,
              "height": 372,
              "instructor_notes": null
            },
            {
              "id": 279017,
              "key": "593dff61-f564-4415-8431-3b611a0e6553",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### MainActivity.java\nNavigate to [MainAcitivity.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MainActivity.java).  In the `MainActivity` class we get a text `String` from the user and display it after a delay.\n\n`MainActivity` extends from the `Activity` class and implements both [View.onClickListener](https://developer.android.com/reference/android/view/View.OnClickListener.html) (created by the Android framework) and [Message.Delayer.DelayerCallback](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MessageDelayer.java) (created in this project).",
              "instructor_notes": ""
            },
            {
              "id": 279020,
              "key": "6457af0c-ba06-4c62-a9ce-18b95863402a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1aceb_screen-shot-2017-03-09-at-11.28.14-am/screen-shot-2017-03-09-at-11.28.14-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6457af0c-ba06-4c62-a9ce-18b95863402a",
              "caption": "",
              "alt": null,
              "width": 1214,
              "height": 202,
              "instructor_notes": null
            },
            {
              "id": 279021,
              "key": "d13cac7a-e2ec-4013-b996-f7422e2dd95a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Next we declare the `TextView` and `EditText` view which are setup in `onCreate()`. \n\nWe also declare a private variable called *mIdlingResource* of type `SimpleIdlingResource`. Notice that it has an annotation *@Nullable* which indicates that this variable will be `null` in production. This is because this setup with `IdlingResource` is only used for testing, so when the project is run in production, `IdlingResource` can be `null`. ",
              "instructor_notes": ""
            },
            {
              "id": 279025,
              "key": "08089cc5-2b2a-4c5b-99d0-5669cffc9432",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1aee3_screen-shot-2017-03-09-at-11.36.36-am/screen-shot-2017-03-09-at-11.36.36-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/08089cc5-2b2a-4c5b-99d0-5669cffc9432",
              "caption": "MainActivity.java - Declare variables and onCreate()",
              "alt": null,
              "width": 1170,
              "height": 802,
              "instructor_notes": null
            },
            {
              "id": 279026,
              "key": "e0f3abc2-0d2c-4149-841d-4ca5f5668dc6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When the `changeTextBt` is clicked, `onClick()` retrieves the text the user typed in the EditText view, sets a temporary waiting message, and then submits the user-entered EditText value to the `processMessage()` method of  [MessageDelayer.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MessageDelayer.java). \n",
              "instructor_notes": ""
            },
            {
              "id": 279028,
              "key": "92362867-624a-48f8-a9f5-8ea8f297d37f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1b352_screen-shot-2017-03-09-at-11.55.46-am/screen-shot-2017-03-09-at-11.55.46-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/92362867-624a-48f8-a9f5-8ea8f297d37f",
              "caption": "MainActivity.java onClick() method",
              "alt": null,
              "width": 1130,
              "height": 486,
              "instructor_notes": null
            },
            {
              "id": 279029,
              "key": "a1226813-3cec-461e-a515-242ec0ade308",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### MessageDelayer.java\nThis class is not part of the Android framework. It was created for this project. It takes a `String` and returns it after a delay via a callback. It executes a long-running operation on a different thread that will cause problems with Espresso if `IdlingResource` is not implemented and registered. \n\nThe `processMessage()` method takes a `String` (the one that the user typed into the `EditText field`), and returns it after the delay time we setup in `DELAY_MILLIS`. The `String` is returned via the callback in the `onDone` method. ",
              "instructor_notes": ""
            },
            {
              "id": 279030,
              "key": "d5190b1a-627d-49e4-9e3e-374105b5e4f2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1b3ab_screen-shot-2017-03-09-at-11.56.49-am/screen-shot-2017-03-09-at-11.56.49-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d5190b1a-627d-49e4-9e3e-374105b5e4f2",
              "caption": "MessageDelayer.java processMessage() method",
              "alt": null,
              "width": 1462,
              "height": 1048,
              "instructor_notes": null
            },
            {
              "id": 279031,
              "key": "63246a40-44ae-4a7b-8aa5-34f5e3b453de",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`processMessage()` has 3 parameters -  the message, the activity to return back to in the callback, and the `IdlingResource`. \n\nThe `if` statement checks whether or not `IdlingResource` is `null`. If it isn’t we can go ahead and set `idle` to `false`. Remember that `idle` means:\n- No UI events in the current message queue\n- No more tasks in the default AsyncTask thread pool\n\nSo if `idle` is `false` there are tasks or events that are happening and any testing should be on halt until these processes finish.\n\nWith `idle` set as `false` we create a handler and run the method `postDelayed()`. \n\nWhat exactly is a `Handler` and what’s the purpose of `postDelayed()`?\n\n### Handler\nIf we look in the [Developer documentation](https://developer.android.com/reference/android/os/Handler.html), we can see that there are 2 main uses for a Handler: \n\n",
              "instructor_notes": ""
            },
            {
              "id": 279032,
              "key": "8e345eb4-ee99-47be-bc75-68d86275e455",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1b497_screen-shot-2017-03-09-at-12.01.07-pm/screen-shot-2017-03-09-at-12.01.07-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8e345eb4-ee99-47be-bc75-68d86275e455",
              "caption": "Developer doc for Handler class",
              "alt": null,
              "width": 1556,
              "height": 118,
              "instructor_notes": null
            },
            {
              "id": 279033,
              "key": "9f67777e-1348-464e-8051-c878a5f79697",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Further down in the code we see that `postDelayed()` adds a `Runnable` to a message queue and it will run after a specified amount of time.",
              "instructor_notes": ""
            },
            {
              "id": 279034,
              "key": "09474f79-5a13-400c-b25d-af14755b405c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1b4f8_screen-shot-2017-03-09-at-12.02.49-pm/screen-shot-2017-03-09-at-12.02.49-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/09474f79-5a13-400c-b25d-af14755b405c",
              "caption": "Developer doc for postDelayed() method in Handler class",
              "alt": null,
              "width": 1574,
              "height": 336,
              "instructor_notes": null
            },
            {
              "id": 279058,
              "key": "1c754868-003e-44c4-9cf4-dfde316776dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The first parameter of `postDelayed()` is the Runnable that will be run once the delay time is up. So what do we expect to run? \n",
              "instructor_notes": ""
            },
            {
              "id": 279071,
              "key": "471bb00b-3bf5-40fe-88e7-30656e292bbd",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1d761_screen-shot-2017-03-09-at-2.27.40-pm/screen-shot-2017-03-09-at-2.27.40-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/471bb00b-3bf5-40fe-88e7-30656e292bbd",
              "caption": "handler.postDelayed() has 2 parameters - a Runnable and a time delay",
              "alt": null,
              "width": 874,
              "height": 544,
              "instructor_notes": null
            },
            {
              "id": 279075,
              "key": "de3ab45b-85d1-4578-81d4-7db7a4559da1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The first action of the `Runnable` is to check the callback we received in `processMessage()` (i.e. which activity we should return to after the delay). We return to that activity’s `onDone()` method and return the message variable. \n\nThen we check that `idlingResource` is not `null`.  If it's not `null` we set its state to `true`. Remember that if the app is *idle* it means that Espresso gets the green light and continues any action in the test that was queued. \n\nThe second parameter, delay time, is set to the constant `DELAY_MILLIS` in `MessageDelayer.java`: ",
              "instructor_notes": ""
            },
            {
              "id": 279061,
              "key": "e05a46af-687a-40b7-9830-e2ea0b6f64b1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c1d2b9_screen-shot-2017-03-09-at-2.08.27-pm/screen-shot-2017-03-09-at-2.08.27-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e05a46af-687a-40b7-9830-e2ea0b6f64b1",
              "caption": "Delay time set in MessageDelayer.java",
              "alt": null,
              "width": 822,
              "height": 38,
              "instructor_notes": null
            },
            {
              "id": 279095,
              "key": "fb27a4e1-6252-4cbd-9085-50a4600b05e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\nLet's take a pause and recap what we've uncovered so far. \n\nWhen the `changeTextBt` is clicked, `onClick()` in `MainActivity` triggers `MessageDelayer.processMessage()`. \n\n`processMessage()` sets the `IdlingResource` to ` false`, then creates a `Handler` which contains a Runnable that will be run after a pre-determined time delay, `DELAY_MILLIS`.\nThe Runnable that will be executed after the delay: \n\n1) Returns the `String` entered by the user via a callback to the calling activity (e.g. `MainActivity`)\n\n2) Sets the `IdlingResource` to `true`\n\n---\n\n### Learn More About:\n[@Nullable](https://developer.android.com/reference/android/support/annotation/Nullable.html)\n\n[Handler](https://developer.android.com/reference/android/os/Handler.html)\n\n[Runnable](https://developer.android.com/reference/java/lang/Runnable.html)\n\n[Espresso Idling Resource](https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 278728,
          "key": "68c3d675-4547-4ef9-b495-adef2267a650",
          "title": "Basic Idling Resource Code Sample",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "68c3d675-4547-4ef9-b495-adef2267a650",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 328550,
              "key": "b49062df-6e97-4d3f-87ab-52ab0fb85027",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*High-five.* We just went through a lot of code to understand in that Idling Resources sample. To double-check your understanding, complete the following quiz. ",
              "instructor_notes": ""
            },
            {
              "id": 279102,
              "key": "fa926a62-a90c-4d79-adaf-46c2004308cd",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fa926a62-a90c-4d79-adaf-46c2004308cd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Select all the statements that are true of the [BasicIdlingResourceSample](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IdlingResourceSample) project we just looked at:\n",
                "answers": [
                  {
                    "id": "a1489099735299",
                    "text": "The `MainActivity` implements the `MessageDelayer.DelayerCallback` which is triggered in the `onClick()` method. ",
                    "is_correct": true
                  },
                  {
                    "id": "a1489100087261",
                    "text": "Espresso will wait until the state of `idlingResource` is `false` before moving to the next test operation. ",
                    "is_correct": false
                  },
                  {
                    "id": "a1489100094511",
                    "text": "In this example, callback notifies the caller (the activity that called it) via `onResume`.",
                    "is_correct": false
                  },
                  {
                    "id": "a1489100120122",
                    "text": "`MainActivity` is notified asynchronously that the time delay, `DELAY_MILLIS`, is up by a handler which executes a Runnable that returns back a message in the method `onDone()`. ",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 278729,
          "key": "7e8095be-b018-4749-b349-014f2bf44f32",
          "title": "Return via Callback in MainActivity",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e8095be-b018-4749-b349-014f2bf44f32",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 328551,
              "key": "2e82860a-2d8f-41bd-a0ac-61f73f07f81f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Return via Callback in MainActivity\n\nBefore the quiz, we left off at the end of `handler.postDelayed()`  in [MessageDelayer.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MessageDelayer.java), which runs a Runnable after a time delay.\n",
              "instructor_notes": ""
            },
            {
              "id": 279145,
              "key": "3eee7afd-39f1-4277-adae-918b94318a17",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c2eb51_screen-shot-2017-03-09-at-2.27.40-pm/screen-shot-2017-03-09-at-2.27.40-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3eee7afd-39f1-4277-adae-918b94318a17",
              "caption": "handler.postDelayed() in MessageDelayer.java executes a Runnable after the amount of time set by DELAY_MILLIS",
              "alt": null,
              "width": 874,
              "height": 544,
              "instructor_notes": null
            },
            {
              "id": 279143,
              "key": "a28500fe-0aff-41ca-bfce-204a5cefe8cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, let’s look more closely into what happens when the *callback* is executed. ",
              "instructor_notes": ""
            },
            {
              "id": 279146,
              "key": "242f5a64-3609-4e74-a5f1-a279f446f0b4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c2ebb0_screen-shot-2017-03-09-at-2.26.42-pm/screen-shot-2017-03-09-at-2.26.42-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/242f5a64-3609-4e74-a5f1-a279f446f0b4",
              "caption": "The Runnable executes a callback",
              "alt": null,
              "width": 574,
              "height": 190,
              "instructor_notes": null
            },
            {
              "id": 279152,
              "key": "1234b7d7-eeb6-4b8d-9d35-0613a658ebbd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This method call indicates that we need go to the *onDone()* implemented in the callback activity, which in this case is [MainActivity](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MainActivity.java).  \n\nGoing back to [MainActivity.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MainActivity.java) in line 72 we find our implementation of *onDone()* in which we set the TextView to the text the user had typed in EditText",
              "instructor_notes": ""
            },
            {
              "id": 279153,
              "key": "44e4c23c-a85f-4052-90c6-dded4d0901a2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c2ec60_screen-shot-2017-03-10-at-10.11.25-am/screen-shot-2017-03-10-at-10.11.25-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/44e4c23c-a85f-4052-90c6-dded4d0901a2",
              "caption": "",
              "alt": null,
              "width": 972,
              "height": 204,
              "instructor_notes": null
            },
            {
              "id": 279160,
              "key": "a26ba23a-b96b-4ae9-95be-7f205de5e0ae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To round out the rest of `MainActivity`, there's the method `getIdlingResource()`, which has the annotations `@VisibleForTesting` and `@NonNull`, so it's only called during a test, and its value can’t be `null`. \nThe method returns a new instance of [SimpleIdlingResource](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/IdlingResource/SimpleIdlingResource.java). \n\n## Summary\nTo summarize all the new classes and connections in this specific example: \n\n1. Implement the `IdlingResource` interface ([SimpleIdlingResource.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/IdlingResource/SimpleIdlingResource.java))\n\n2. Create a callback interface ([MessageDelayer.java](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MessageDelayer.java)) where the actual asynchronous task will occur\n\n3. Set the state of `IdlingResource` to `false` when the task is running, and then back to `true` when the task is done\n\n4. Have the delayer notify the activity that the process is complete via a callback ([MainActivity.onDone](https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/src/main/java/com/example/android/testing/espresso/IdlingResourceSample/MainActivity.java))\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 278730,
          "key": "336ba5f1-9fdb-4596-9b3e-6cc195e0391f",
          "title": "Add Idling Resource Test in Sample App",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "336ba5f1-9fdb-4596-9b3e-6cc195e0391f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 289130,
              "key": "e0e53b59-e542-40ab-9eed-df2170137a5c",
              "title": "Add Idling Resource Test in Sample App",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0cYsfEG0soE",
                "china_cdn_id": "0cYsfEG0soE.mp4"
              }
            }
          ]
        },
        {
          "id": 278731,
          "key": "03471cfe-9f6a-489b-8de8-5f4bd7c1104b",
          "title": "Exercise: Add IdlingResourceActivityTest in TeaTime",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "03471cfe-9f6a-489b-8de8-5f4bd7c1104b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 289131,
              "key": "0e4c7839-6bfe-4e00-8d32-a92060eb49be",
              "title": "Exercise: Add IdlingResourceActivityTest in TeaTime",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hnN8bVR5Go8",
                "china_cdn_id": "hnN8bVR5Go8.mp4"
              }
            },
            {
              "id": 298286,
              "key": "c0120d7e-bbe6-48f0-b80f-d6f9dd29a05c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Add `IdlingResourceActivityTest` in TeaTime\n\nIn this exercise you will implement the `IdlingResourceActivityTest`. We will create a mock scenario in the app that simulates a time delay when downloading menu images and descriptions into the `MenuActivity`. \n\nTo help you get started I’ve added the `SimpleIdlingResource` class which is an implementation of `IdlingResource` for you to use.\n\nYou will need to modify `MenuActivity` to properly implement the interface `ImageDownloader` which is a callback interface. Refer back to the previous concepts if you need a hint. \n\nWhen the callback finishes executing, it will return the arraylist of Tea objects with the images and tea names back to the MenuActivity. \n\n\n### Exercise Code\n**Exercise:** [TESP.04-Exercise-AddIdlingResourceMenuActivityTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.04-Exercise-AddIdlingResourceMenuActivityTest)",
              "instructor_notes": ""
            },
            {
              "id": 279173,
              "key": "a516821a-aa38-47a7-90a9-307b6accd8a0",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a516821a-aa38-47a7-90a9-307b6accd8a0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Implement `ImageDownloader.DelayerCallback` for `MenuActivity`",
                "Add a `SimpleIdlingResource` variable",
                "Create a method that returns the `IdlingResource` variable",
                "Get the `IdlingResource` variable and call `downloadImage` from `ImageDownloader`",
                "Override `onDone` to return an `ArrayList` of Tea objects via the callback",
                "Register the `IdlingResource`",
                "Test that the Tea objects appear in the `gridView`",
                "Unregister the `IdlingResource`",
                "Add the correct gradle dependency"
              ],
              "positive_feedback": "Nice job connecting all the pieces!\n\n**Solution:** [[TESP.04-Solution-AddIdlingResourceMenuActivityTest](https://github.com/udacity/AdvancedAndroid_TeaTime/tree/TESP.04-Solution-AddIdlingResourceMenuActivityTest)][[Diff](https://github.com/udacity/AdvancedAndroid_TeaTime/compare/TESP.04-Exercise-AddIdlingResourceMenuActivityTest...TESP.04-Solution-AddIdlingResourceMenuActivityTest?expand=11)]",
              "video_feedback": null,
              "description": "Follow the TODOs to complete this exercise:"
            }
          ]
        },
        {
          "id": 278732,
          "key": "04019f59-6a1e-4e36-a29c-258ce4d71629",
          "title": "Explore Espresso Further",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "04019f59-6a1e-4e36-a29c-258ce4d71629",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 279176,
              "key": "7b88af08-1b1a-4b38-89d6-18e0e9d6294d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Explore Espresso Further\n\nEspresso helps us test:\n- Views\n- AdapterViews\n- Intents\n- Idling Resources\n- Espresso Web (not covered in this lesson)\n- RecyclerViews  (not covered in this lesson)\n\nPhew, we covered A LOT of Espresso. There are some additional components that we didn’t discuss:\n\n- **[Espresso Web](https://google.github.io/android-testing-support-library/docs/espresso/web/)** - An API for writing automated tests for apps that contain one or more WebViews. Espresso Web reduce the boilerplate code needed to interact with these WebViews.\n\n- **[Espresso for RecylcerViews](https://google.github.io/android-testing-support-library/docs/espresso/lists/#recyclerviews)** - Espresso testing for RecyclerViews works different from testing AdapterViews. It doesn’t use onData; instead, has actions that scroll to positions or perform actions on items.\n\n### Espresso Test Recorder\nAndroid Studio also has a an [Espresso Test Recorder](https://developer.android.com/studio/test/espresso-test-recorder.html) which allows you to create UI tests by simply recording your interactions on a device and the Test Recorder will autogenerate the test code for you!\n\nThe tests are written using the same  Espresso Testing framework that we just covered. At the time of creating this content there are certain limitations to the Test Recorder (e.g. it can't yet handle `IdlingResources`, it has limited number of assertions available). However, armed with the knowledge of how to write your own Espresso tests from scratch, you’ll be better equipped to understand, modify, and update any auto-generated tests if you do decide to use the Test Recorder.\n\nHere are some helpful resources that can help you if you need to implement these in the future:\n\n- [Espresso Web](https://google.github.io/android-testing-support-library/docs/espresso/web/) - Examples  [Here](https://github.com/googlesamples/android-testing/tree/master/ui/espresso/WebBasicSample) and [Here](https://google.github.io/android-testing-support-library/docs/espresso/web/index.html) \n- [Espresso for RecylcerViews](https://google.github.io/android-testing-support-library/docs/espresso/lists/#recyclerviews) - Example [here](https://google.github.io/android-testing-support-library/docs/espresso/lists/index.html#recyclerviews)\n- Using the [Espresso Test Recorder](https://developer.android.com/studio/test/espresso-test-recorder.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 278733,
          "key": "3183715d-7805-4a77-a817-5c2b52b8a7e8",
          "title": "The Wider World of Testing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3183715d-7805-4a77-a817-5c2b52b8a7e8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 279179,
              "key": "7b43a193-bc4b-417e-a8ea-90047300ff02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The Wider World of Testing\n\n## Instrumented Unit Tests\n\nWe just covered *User Interface Tests* which are a type of *Instrumented Unit Tests*. These are tests that must be run on an Android device or emulator because they depend on the Android framework.\n\nFor example, in a calculator app, checking that the correct operation triggers when a user clicks on the UI requires the Android framework. \n\nInstrumented tests run using the AndroidJUnitRunner which controls launching the app and running UI tests on it. \n\nAs we've seen, Instrumented Tests live under* module-name/src/androidTest/java/*",
              "instructor_notes": ""
            },
            {
              "id": 279240,
              "key": "f31a818a-2978-40b8-9ab4-5657ca6346bb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c31c9c_screen-shot-2017-03-10-at-1.37.15-pm/screen-shot-2017-03-10-at-1.37.15-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f31a818a-2978-40b8-9ab4-5657ca6346bb",
              "caption": "",
              "alt": null,
              "width": 507,
              "height": 45,
              "instructor_notes": null
            },
            {
              "id": 279193,
              "key": "d3811313-8853-4171-b272-09043da9d04a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Local Unit Tests\n\nThere are other tests such as *Local Unit Tests* which you may have seen included in projects such as the Sunshine app. Local Unit Tests are Unit tests that are only run on the local Java Virtual Machine and don’t necessarily depend on the Android framework. \n\nFor example, say you have a class in a Calculator Android project that is used for the calculation operations. Testing these calculation methods is not dependent on the Android framework. \n\nInstead, you’ll use the JUnit testing framework for Java to just test that local test. \n\nLocal Unit tests live in the *module-name/src/test/java/* of the project folders.",
              "instructor_notes": ""
            },
            {
              "id": 279239,
              "key": "5ad267bf-cc62-42c4-879f-90af1e41e8d8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c31bbf_screen-shot-2017-03-10-at-1.33.35-pm/screen-shot-2017-03-10-at-1.33.35-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5ad267bf-cc62-42c4-879f-90af1e41e8d8",
              "caption": "",
              "alt": null,
              "width": 1018,
              "height": 88,
              "instructor_notes": null
            },
            {
              "id": 279274,
              "key": "22a06947-112c-4057-97e2-f23f06ffc7b0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58c32587_screen-shot-2017-03-10-at-2.15.16-pm/screen-shot-2017-03-10-at-2.15.16-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/22a06947-112c-4057-97e2-f23f06ffc7b0",
              "caption": "Image from: Android Developers https://developer.android.com/training/testing/start/index.html",
              "alt": null,
              "width": 836,
              "height": 374,
              "instructor_notes": null
            },
            {
              "id": 279266,
              "key": "5d838c1c-2557-4044-bbcd-9071ef0c27cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## JUnit\n[JUnit](http://junit.org/junit4/) is a framework used to test discrete pieces of code (usually methods). \n\nAndroid provides JUnit testing support via the [AndroidJUnit Test Runner](https://developer.android.com/topic/libraries/testing-support-library/index.html#ajur-junit). ",
              "instructor_notes": ""
            },
            {
              "id": 279258,
              "key": "105a2fe7-b0be-434f-9a4c-820f17017a99",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Android Testing Support Library\n\nEspresso is just one test automation tool provided by the Android Testing Support Library. This Library also includes AndroidJUnitRunner and UI Automator. \n\n- [AndroidJUnit](https://developer.android.com/topic/libraries/testing-support-library/index.html#AndroidJUnitRunner) - A test runner that runs JUnit style tests on Android devices. When used in Espresso tests, it controls launching the app and running UI tests.\n- [Espresso](https://developer.android.com/topic/libraries/testing-support-library/index.html#Espresso) - Framework for functional UI Testing\n- [UI Automator](https://developer.android.com/topic/libraries/testing-support-library/index.html#UIAutomator) - Framework for cross-app functional UI testing between the system and installed apps\n\n## Learn More\n- [Explore Testing Types](https://developer.android.com/training/testing/start/index.html)\n- [Android Testing Support Library](https://developer.android.com/topic/libraries/testing-support-library/index.html#ajur-junit)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 278734,
          "key": "19278172-7e08-4c3e-9e96-f89331635208",
          "title": "Espresso Outro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "19278172-7e08-4c3e-9e96-f89331635208",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 330479,
              "key": "85bd86a4-32d8-49ed-a888-e1270c804c44",
              "title": "Espresso Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2yx0TEq0MNM",
                "china_cdn_id": "2yx0TEq0MNM.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}