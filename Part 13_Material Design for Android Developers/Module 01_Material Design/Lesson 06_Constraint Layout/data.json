{
  "data": {
    "lesson": {
      "id": 478178,
      "key": "f3abbe55-4e88-451d-80e1-09fdd263992a",
      "title": "Constraint Layout",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn and apply the new features of ConstraintLayout that will help you create performant user interfaces",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/f3abbe55-4e88-451d-80e1-09fdd263992a/478178/1516767242253/Constraint%20Layout%20Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "http://d2uz2655q5g6b2.cloudfront.net/f3abbe55-4e88-451d-80e1-09fdd263992a/478178/1516767225297/Constraint%20Layout%20Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 486411,
          "key": "86d07877-f376-4a92-847d-9e8024ce6bae",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "86d07877-f376-4a92-847d-9e8024ce6bae",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495758,
              "key": "6c15bac9-4610-4a66-9380-e82c5155330a",
              "title": "01 L Introduction B",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FB2r6D_Lnio",
                "china_cdn_id": "FB2r6D_Lnio.mp4"
              }
            }
          ]
        },
        {
          "id": 486414,
          "key": "c93931cc-eef8-4afe-81f0-eea4ae49c1ef",
          "title": "The Android View Rendering Cycle",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c93931cc-eef8-4afe-81f0-eea4ae49c1ef",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495962,
              "key": "6e28d4b6-2a9f-4da7-a23f-042b5186ce59",
              "title": "02 L The Android View Cycle V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "osRwy-The_A",
                "china_cdn_id": "osRwy-The_A.mp4"
              }
            }
          ]
        },
        {
          "id": 486415,
          "key": "5b332a26-e7a5-4cb1-aa76-3312eb51c595",
          "title": "How Double Taxation Affects Views",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5b332a26-e7a5-4cb1-aa76-3312eb51c595",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495759,
              "key": "36eb2762-63b4-49c9-8ee3-597bd03927d5",
              "title": "03 L How Double Taxation Effects Views V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-Z7zLQO3qYw",
                "china_cdn_id": "-Z7zLQO3qYw.mp4"
              }
            }
          ]
        },
        {
          "id": 486417,
          "key": "34a8c698-5f0e-4fba-b2be-ab27eee87182",
          "title": "What is ConstraintLayout?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "34a8c698-5f0e-4fba-b2be-ab27eee87182",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495963,
              "key": "411de245-5e13-418c-8457-cbc758cd2c45",
              "title": "05 L What Is ConstraintLayout V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tNjCBRP2bKU",
                "china_cdn_id": "tNjCBRP2bKU.mp4"
              }
            }
          ]
        },
        {
          "id": 486418,
          "key": "37daf67c-ac8b-477b-819b-ecefe16ac52b",
          "title": "The New Layout Editor",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "37daf67c-ac8b-477b-819b-ecefe16ac52b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495964,
              "key": "93914bc2-307d-4512-b855-99b863424b8d",
              "title": "07 L The New Layout Editor V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_rtxcsgl-qQ",
                "china_cdn_id": "_rtxcsgl-qQ.mp4"
              }
            }
          ]
        },
        {
          "id": 486419,
          "key": "dc614ba8-7c02-4392-84c5-40532e09e3a3",
          "title": "Adding and Removing Constraints",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dc614ba8-7c02-4392-84c5-40532e09e3a3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495760,
              "key": "96aaf5d9-076c-42a5-b80a-ccf2060914f9",
              "title": "09 L Adding And Removing Constraints V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jLVKsyml3g4",
                "china_cdn_id": "jLVKsyml3g4.mp4"
              }
            }
          ]
        },
        {
          "id": 486420,
          "key": "528ebb9a-7d7d-445f-888e-4a48e79208ea",
          "title": "Understanding the New Attributes View",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "528ebb9a-7d7d-445f-888e-4a48e79208ea",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495965,
              "key": "a36a15b0-643c-4f39-8b94-4dac3023810f",
              "title": "10 L Understanding The New Attributes View V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KUoch_UHRnk",
                "china_cdn_id": "KUoch_UHRnk.mp4"
              }
            }
          ]
        },
        {
          "id": 486421,
          "key": "25c0a19c-a47a-4736-8e37-82bf05746ae0",
          "title": "Managing Space with Chains",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "25c0a19c-a47a-4736-8e37-82bf05746ae0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495761,
              "key": "c4ae125e-fb48-48f8-8670-6ace620449ee",
              "title": "11 L Managing Space With Chains V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6HemVlmRL1o",
                "china_cdn_id": "6HemVlmRL1o.mp4"
              }
            }
          ]
        },
        {
          "id": 478466,
          "key": "719b14fc-ae57-4cc0-88e7-1eef147b19cf",
          "title": "Helpful Tools For Designers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "719b14fc-ae57-4cc0-88e7-1eef147b19cf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498744,
              "key": "3573ae40-0823-4602-a0d0-a3d7b14f874d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you've ever worked with a designer, at one point or another, you've likely been given a set of mocks detailing how each screen of the app should look or function. Depending on the level of detail it might include how an app might transition from one state to another or how a set of controls interact with each other.\n\nPrior to ConstraintLayout, dealing with some of these concerns required techniques\n\nThe next sections in this lesson help specifically address some of those concerns like alignment, spacing, and internationalization.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486422,
          "key": "4f9061a0-b934-4d95-a6f3-5acee87dc765",
          "title": "Virtual Helper Objects",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4f9061a0-b934-4d95-a6f3-5acee87dc765",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495762,
              "key": "d690af87-7969-4fd9-905a-b3418ac365e5",
              "title": "13 L Virtual Helper Objects V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "L49LNdQ19rs",
                "china_cdn_id": "L49LNdQ19rs.mp4"
              }
            }
          ]
        },
        {
          "id": 478467,
          "key": "aba7f0f0-2307-4314-9b25-0a730d704d11",
          "title": "Barriers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "aba7f0f0-2307-4314-9b25-0a730d704d11",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495608,
              "key": "730b3fb0-dd81-4a1b-9bfe-9eea2ae90abf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Look at these two phrases describing a date of birth in English and in French, for instance:\n\n_**Date of Birth**_\n\n_**Date de Naissance**_\n\nThese two aren't that much of a difference in length to mess up a UI but what if you are moving to/from a language with a totally different script like Chinese?\n\n**出生日期 (Chinese)**\n\nIn the best case, you'll have a UI that looks untidy, in the worse case, you might have overlapping and unreadable text.",
              "instructor_notes": ""
            },
            {
              "id": 495610,
              "key": "d94c64dd-819e-43be-a287-cd41e34b9d17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Before ConstraintLayout\n\n\nBefore ConstraintLayout, you might have used an embedded GridLayout for this layout. As mentioned earlier in this lesson, GridLayout does come with added complexity and possibly double taxation. \n\nWith ConstraintLayout, we can achieve this same effect without making the UI more complex.\n",
              "instructor_notes": ""
            },
            {
              "id": 495571,
              "key": "2ffa5b8f-df4d-4dfe-840c-9dec9b380b27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Just as guidelines in general help us to make layouts more faithful to mocks and designs, barriers help us do the same for variable width elements (often in internationalization).\n\nIn the simple Date of Birth example, we had different relative widths for each of the languages, tweaking the sizes for every language would be nigh impossible.",
              "instructor_notes": ""
            },
            {
              "id": 495611,
              "key": "74ec5d2f-51d4-4c9f-ac64-8ad0ab70c4d9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Creating a Barrier\n\nHere we have the UI in XML code. \n\nTo specify which Views we want tied to a group, we can add their ids as a comma separated list to the property \n\n    app:constraint_referenced_ids\n\nNote that they don't need the <code>@+id/</code> prefix. \n\nThe other required property is ```barrier_direction```\n\n    app:barrierDirection=\"end\" <!--start,end, top, bottom, right,left-->\n\nwhich specifies which edge of the elements the barrier will be relative to. In our case, we'd like the barrier to be constrained to the end of the street address.",
              "instructor_notes": ""
            },
            {
              "id": 495570,
              "key": "348f5e0f-cdb5-46e0-9782-550bc83c35e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "    <android.support.constraint.ConstraintLayout  ...>\n    <TextView android:id=\"@+id/streetAddress\" .. />\n    <EditText ...\n        app:layout_constraintStart_toEndOf=\"@+id/barrier\" />\n\n     <TextView\n       android:id=\"@+id/dateOfBirth\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginStart=\"8dp\"\n       android:text=\"string@/dob\"\n       app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n       tools:layout_editor_absoluteY=\"74dp\" />\n    <EditText\n       android:layout_width=\"200dp\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginEnd=\"8dp\"\n       android:layout_marginStart=\"44dp\"\n       app:layout_constraintStart_toEndOf=\"@+id/barrier\"\n       tools:layout_editor_absoluteY=\"61dp\" />\n\n     <android.support.constraint.Barrier\n       android:id=\"@+id/barrier\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       app:barrierDirection=\"end\" <!--start,end top, bottom, right,left-->\n       app:constraint_referenced_ids=\"streetAddress,dateOfBirth\"\n       app:layout_constraintGuide_begin=\"16dp\" />\n\n    </android.support.constraint.ConstraintLayout>\n",
              "instructor_notes": ""
            },
            {
              "id": 495614,
              "key": "fcd8e54e-7135-4dc9-91ba-00bd5d28a0c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## A note about start/end vs left/right\n\nIn most cases, especially when a UI will be translated to different languages, you should favor use of ```start``` and ```end``` over ```left``` and ```right```.\n\nIn RTL(right to left) languages like Arabic and Hebrew, left corresponds to the end of any given element.  Using start / end makes it easier to adapt your UI later if you add RTL languages. \n\n```start```/```end``` were added in API 17(Android 4.2). At the time of writing, [devices running API 17 or higher comprised 97.1% of devices that visited Google Play.](https://developer.android.com/about/dashboards/index.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 478468,
          "key": "0d028273-0b38-44bd-a71f-a74444ffb97c",
          "title": "Groups",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0d028273-0b38-44bd-a71f-a74444ffb97c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495562,
              "key": "a310601d-73eb-4e50-b4bb-d709306df25b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For our example, we have a single screen app with business details that we want to show or hide. Before ConstraintLayout, we would have had to call <code>setVisibility</code> on each of them individually. Or perhaps we might have created a custom View to abstract some of the logic away.\n\nWith Groups, we can control the visibility of multiple widgets at once.\n\nThey also allow use to do it without extra layers of hierarchy, thus increasing rendering performance.\n\nFor this UI, we want to be able to toggle the visibility of everything but the business title.",
              "instructor_notes": ""
            },
            {
              "id": 495558,
              "key": "ea14d2b0-dbbd-4fab-a89e-e05f515d4961",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/December/5a488547_layout-2017-12-30-223302/layout-2017-12-30-223302.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ea14d2b0-dbbd-4fab-a89e-e05f515d4961",
              "caption": "Design View of a Groups Example",
              "alt": "Design View of a Groups Example",
              "width": 768,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 486410,
              "key": "b0ed820a-9b1c-48b5-b130-2e8a4ffdd406",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's a condensed listing of the associated XML code.\n",
              "instructor_notes": ""
            },
            {
              "id": 495561,
              "key": "6c4d632a-0634-4fd3-b18b-60e7634fa568",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n    <android.support.constraint.ConstraintLayout  ... >\n\n    <ImageView\n        android:id=\"@+id/imageView\"\n        ...\n        app:srcCompat=\"@drawable/produce\" />\n\n    <TextView\n        android:id=\"@+id/textView\"\n        ...\n        app:layout_constraintStart_toEndOf=\"@+id/guideline\"\n        app:layout_constraintTop_toBottomOf=\"@+id/imageView\" />\n\n    <TextView\n        android:id=\"@+id/locationLabel\"\n        ...\n        app:layout_constraintStart_toEndOf=\"@+id/guideline\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView\" />\n\n    <TextView\n        android:id=\"@+id/locationDetails\"\n        ...\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toBottomOf=\"@+id/locationLabel\" />\n\n    <TextView\n        android:id=\"@+id/phoneLabel\"\n        ...\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toBottomOf=\"@+id/locationDetails\" />\n\n    <TextView\n        android:id=\"@+id/phoneDetails\"\n       ...\n        app:layout_constraintStart_toEndOf=\"@+id/phoneLabel\"\n        app:layout_constraintTop_toBottomOf=\"@+id/locationDetails\" />\n\n    <android.support.constraint.Guideline\n        android:id=\"@+id/guideline\"\n        ...\n        app:layout_constraintGuide_begin=\"20dp\" />\n\n\n    <Button\n        android:id=\"@+id/button\"\n       ...\n        app:layout_constraintStart_toStartOf=\"@+id/guideline\"\n        app:layout_constraintTop_toBottomOf=\"@+id/phoneLabel\" />\n\n</android.support.constraint.ConstraintLayout>\n",
              "instructor_notes": ""
            },
            {
              "id": 495564,
              "key": "f6532f06-ec4c-432c-826a-dbf8eeabf63c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To specify which Views we want tied to a group, we can add their ids as a comma separated list to the property \n\n    app:constraint_referenced_ids\n\nNote that they don't need the <code>@+id/</code> prefix. \n\nIn our example, we want the everything except the business title to be hidden or unhidden.",
              "instructor_notes": ""
            },
            {
              "id": 495560,
              "key": "cbecbb2b-aef3-4125-bd03-6bc447570ffc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n    <android.support.constraint.Group\n        android:id=\"@+id/group\"\n        android:layout_height=\"wrap_content\"\n        android:layout_width=\"wrap_content\"\n        app:constraint_referenced_ids=\"locationLabel,locationDetails,phoneLabel,phoneDetails\"\n    />",
              "instructor_notes": ""
            },
            {
              "id": 495565,
              "key": "5e36a496-42d7-4c2d-a330-33890fa2d458",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "With the group set in XML code, all we need to do to call it is assign it to our button's <code>OnClickListener</code> handler code.\n\nI've listed the full MainActivity file for full context but the pertinent portion is the <code>onClick</code> function. The code is written in [Kotlin](https://kotlinlang.org/) however for your convenience, the specific lines to toggle the group have comments with their Java equivalents.\n\nAfter instantiating the group with <code>findViewById</code>, we can set its visibility.",
              "instructor_notes": ""
            },
            {
              "id": 495559,
              "key": "b2b8c46e-5618-4200-b558-6902f33c5b8d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "    class MainActivity : AppCompatActivity(), View.OnClickListener {\n\n    lateinit var button: Button\n    lateinit var group: Group\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        button = findViewById(R.id.button)\n        group = findViewById(R.id.group)\n\n        button.setOnClickListener(this)\n    }\n\n    override fun onClick(v: View?) {\n        if (group.visibility == View.GONE) {\n            group.visibility = View.VISIBLE        // group.setVisibility(View.VISIBLE);\n            button.setText(R.string.hide_details)\n        } else {\n            group.visibility = View.GONE           // group.setVisibility(View.GONE);\n            button.setText(R.string.show_details)\n        }\n    }\n}",
              "instructor_notes": ""
            },
            {
              "id": 495563,
              "key": "f824c6bf-d868-4984-bdab-209d9c428031",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can find the code for this example in this course's [Github repo](https://github.com/udacity/ud862-samples/tree/master/GroupsDemo).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 478469,
          "key": "18e5e714-379a-4c4a-a270-536a266ef8a1",
          "title": "Placeholders",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "18e5e714-379a-4c4a-a270-536a266ef8a1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498752,
              "key": "8e3f29b1-84b5-4f5e-a832-dd628f79106c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Placeholders can be constrained like any other view in a layout but the power in\nthem is that they can position existing objects.\n\nIf that object is already on screen, the placeholder position becomes\nits new position and it is gone from the original location.\n\nThis allows you to do some basic templating and animations for cheap.\n",
              "instructor_notes": ""
            },
            {
              "id": 498754,
              "key": "6de95ce1-d1a9-45ff-9bad-32f5e3f8eef2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Consider this scenario, you might have a part of your UI that you might want to reuse across your app and have it contained in a ```merge``` tag like the following.\n\n    <merge xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:parentTag=\"android.support.constraint.ConstraintLayout\">\n \n    <android.support.constraint.Placeholder\n        android:id=\"@+id/template_main_image\"\n        // apply whatever constraints\n      />\n     <!-- additional elements here -->\n    </merge>\n\nIn your app, you could dynamically replace the content of the ```Placeholder``` with the following code:\n\n    placeholder = (Placeholder) findViewById(R.id.template_image);\n    imageButton = (ImageButton) findViewById(R.id.imageButton);\n    imageButton.setOnClickListener(new View.OnClickListener() {\n         @Override\n         public void onClick(View view) {\n             TransitionManager.beginDelayedTransition(constraintLayout);\n             placeholder.setContentId(view.getId());\n         }\n    });\n\nNote that despite many examples using ```merge```, it is not required to use Placeholders.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 478470,
          "key": "ce7ae2fb-7a4e-4ae1-a0c9-68363bf1d130",
          "title": "Circular Positioning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce7ae2fb-7a4e-4ae1-a0c9-68363bf1d130",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 498741,
              "key": "767920ee-b809-42c1-b8cb-dff0d0c19585",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Circular Positioning allows you to position a View relative to another using a radius and angle. In most cases, you won't be using this unless you have complex animations or transitions.",
              "instructor_notes": ""
            },
            {
              "id": 498742,
              "key": "93c43997-8218-47ab-8370-36fef65a93cd",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/January/5a52b3fe_circular-positioning/circular-positioning.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/93c43997-8218-47ab-8370-36fef65a93cd",
              "caption": "Circular Positioning",
              "alt": "Circular Positioning ",
              "width": 1899,
              "height": 669,
              "instructor_notes": null
            },
            {
              "id": 498743,
              "key": "f66dcb6c-f29e-4bb2-826e-f6e9d344312b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The above image would be represented in code with something like the following.\n\n    <button android:id=\"@+id/buttonA\" ... />\n    <button android:id=\"@+id/buttonB\" ...\n      app:layout_constraintCircle=\"@+id/buttonA\"\n      app:layout_constraintCircleRadius=\"100dp\"\n      app:layout_constraintCircleAngle=\"45\" />\n\nIt's important to note that the circular positioning constraints are derived from the **center** points of the individual Views, **not** their start or end points.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 486412,
          "key": "633ea577-da73-4b0c-ab4d-af7cdeb30420",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "633ea577-da73-4b0c-ab4d-af7cdeb30420",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 495763,
              "key": "4cc4ef9b-0287-4d2c-8d74-1f7df90fa300",
              "title": "19 L Conclusion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Aeg_N_dTv_M",
                "china_cdn_id": "Aeg_N_dTv_M.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}