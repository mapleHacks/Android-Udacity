{
  "data": {
    "lesson": {
      "id": 650570,
      "key": "da1072b4-2a1b-45bd-9347-2fda9c19c88d",
      "title": "Project: Popular Movies, Stage 1",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Build an app to help users discover popular and recent movies. You will build a clean UI, sync to a server, and present information to the user.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/da1072b4-2a1b-45bd-9347-2fda9c19c88d/650570/1538854512458/Project%3A+Popular+Movies%2C+Stage+1+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/da1072b4-2a1b-45bd-9347-2fda9c19c88d/650570/1538854509374/Project%3A+Popular+Movies%2C+Stage+1+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": {
        "key": "747e4b5e-51ca-479d-84a9-cb1d0006f144",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 30240,
        "semantic_type": "Project",
        "title": "Popular Movies: Stage 1",
        "description": "In this project, you will build an app to help users discover popular and recent movies. You will build a clean UI, sync to a server, and present information to the user.\n\n## Project Rubric\nYour project will be evaluated by a Udacity Code Reviewer according to <a href=\"https://review.udacity.com/#!/projects/4256658707/rubric\" target=\"_blank\">this rubric</a>.\n\nBe sure to review it thoroughly before you submit.\n\nAll criteria must \"meet specifications\" in order to pass. \n\n## Project Submission Checklist\n\n**Before submitting your project, please review and confirm the following items.** \n<input type=\"checkbox\"> I am confident all rubric items have been met and my project will pass as submitted.\n<input type=\"checkbox\"> Project builds correctly without errors and runs.\n<input type=\"checkbox\"> All required functionality exists and my project behaves as expected per the project's specifications.\n\n**Once you have checked all these items, you are ready to submit!**\n",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2020",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 19559,
          "key": "42428486550923",
          "title": "Welcome to Popular Movies, Stage 1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42428486550923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 18850,
              "key": "4242848655",
              "title": "Welcome to Popular Movies, Stage 1",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Project Overview\nMost of us can relate to kicking back on the couch and enjoying a movie with friends and family. In this project, you’ll build an app to allow users to discover the most popular movies playing.  We will split the development of this app in two stages. First, let's talk about stage 1.\n\nIn this stage you’ll build the core experience of your movies app.\n\nYour app will:\n\n* Present the user with a grid arrangement of movie posters upon launch.\n* Allow your user to change sort order via a setting:\n * The sort order can be by most popular or by highest-rated\n* Allow the user to tap on a movie poster and transition to a details screen with additional information such as:\n * original title\n * movie poster image thumbnail\n * A plot synopsis (called overview in the api)\n * user rating (called vote_average in the api)\n * release date\n\n## Why this Project?\nTo become an Android developer, you must know how to bring particular mobile experiences to life. Specifically, you need to know how to build clean and compelling user interfaces (UIs), fetch data from network services, and optimize the experience for various mobile devices. You will hone these fundamental skills in this project.\n\nBy building this app, you will demonstrate your understanding of the foundational elements of programming for Android. Your app will communicate with the Internet and provide a responsive and delightful user experience.\n\n## What Will I Learn After Stage 1?\n* You will fetch data from the Internet with theMovieDB API.\n* You will use adapters and custom list layouts to populate list views.\n* You will incorporate libraries to simplify the amount of code you need to write \n\nReady to start building? Click \"Next\" for instructions!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 20973,
          "key": "42837435830923",
          "title": "Popular Movies, Stage 1 - Instructions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42837435830923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 17692,
              "key": "4283743583",
              "title": "Popular Movies, Stage 1 - Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How Will I Complete this Project?\n### Supporting Course Material\nYou should have the skills you need to complete this app after completing Lessons 1-4 of Developing Android Apps.\n\n### Required Tasks\n\n* Build a UI layout for multiple Activities.\n* Launch these Activities via Intent.\n* Fetch data from themovieDB API\n\n### Implementation Guide\nFor step-by-step support, we've provided details on how to approach each task in this <a href=\"https://docs.google.com/document/d/1ZlN1fUsCSKuInLECcJkslIqvpKlP7jWL2TP9m6UiA6I/pub?embedded=true\" target=\"_blank\">Implementation Guide</a>.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 325012,
          "key": "63e62418-3acb-40ad-9a55-31d0411b83b5",
          "title": "A Quick Guide to Lint, and Linting Your Project",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63e62418-3acb-40ad-9a55-31d0411b83b5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 325013,
              "key": "048e8f5f-c762-4c8f-8fb6-a399dd8b1caa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Before submitting your first project, please take a moment to learn how to lint your files to catch any errors in advance. ",
              "instructor_notes": ""
            },
            {
              "id": 325014,
              "key": "1ed0e2c0-7900-4ef6-9af9-f8c3b3a639b1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Lint, named after the bits of material that needlessly afix themselves to your clothing, was originally a UNIX utility for flagging suspect C code created at Bell Labs in 1978. C is what we'd call a low level language and is very close to machine code. That closeness means a greater likelihood of unintended side effects and bad code due to all the things you must manage on your own. There's even a competition, [The International Obfuscated C Code Contest](http://www.ioccc.org/), where people exploit these features to create programs that are intentionally hard to understand.",
              "instructor_notes": ""
            },
            {
              "id": 325015,
              "key": "c8d04b86-5601-4a8c-9a72-7260e13a1169",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/592dd5bf_screen-shot-2017-05-30-at-1.27.23-pm/screen-shot-2017-05-30-at-1.27.23-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c8d04b86-5601-4a8c-9a72-7260e13a1169",
              "caption": "",
              "alt": null,
              "width": 800,
              "height": 604,
              "instructor_notes": null
            },
            {
              "id": 325016,
              "key": "c30d9628-db19-442e-b06b-a426b085d2ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The original paper, [Lint, a C Program Checker](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.56.1841), is available free online. Even if you don't know C, there's enough prose to follow the original intent of its creator.\n\nSince the original version, linters have been created for many programming languages.\n\nYou might be wondering why we need a linter if we have a compiler. A linter and compiler can overlap in features but have different goals.\n\nThe goal of a compiler is to convert your source code into runnable machine instructions. As long as you don't make a syntax error, the compiler will not generally complain. On the other hand, a linter is concerned with the quality of your code. And when I say, code quality, I'm not talking about a style decision like using tabs instead of spaces. Linters check for more hard to debug problems like using a variable before it has been assigned or improperly closing a file and corrupting its contents. That's the type of issue that will compile but is likely *NOT* desired behavior.\n\nModern compilers have checks for some of the major breaking errors but their analysis will generally not go as detailed as a linter will.\n",
              "instructor_notes": ""
            },
            {
              "id": 325017,
              "key": "93a8d07b-1593-406d-a93d-e36538d509e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Running Lint\nYou can run lint by selecting Inspect Code from the Analyze menu in Android Studio.",
              "instructor_notes": ""
            },
            {
              "id": 325019,
              "key": "362bbb6f-5e8c-44f7-8913-3fbf490bd32f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5921fe8b_run-lint-from-androidstudio/run-lint-from-androidstudio.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/362bbb6f-5e8c-44f7-8913-3fbf490bd32f",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 325022,
              "key": "d711d4a4-5947-48cc-8180-93e71bda79fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "From the command-line, you can directly run the project's lint task.\n\n    ./gradlew lint\n\nWhen you run Inspect Code from Android Studio, it will blend the warnings and errors flagged by Android's lint task with the code analysis that's built into Android Studio.",
              "instructor_notes": ""
            },
            {
              "id": 325023,
              "key": "53ca574b-94e7-4027-a740-6d706348d5da",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/May/5921fe59_code-inspection-pane/code-inspection-pane.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/53ca574b-94e7-4027-a740-6d706348d5da",
              "caption": "",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 325024,
              "key": "ff5046f4-7706-4453-b5a9-ec91cb4e1fb8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The code inspection in Android Studio is great when working on your own project. When working with a collaborator, I'd consider exporting the list to HTML (or using the Gradle task) so they can have an itemized list.",
              "instructor_notes": ""
            },
            {
              "id": 325026,
              "key": "70f2b16b-d953-4bce-9a2e-cc098e8fc5d4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Running Lint In Android Studio and Generating Reports",
              "instructor_notes": ""
            },
            {
              "id": 325028,
              "key": "050a8fe6-9ff4-479e-8f54-50d023341c93",
              "title": "Running Lint in Android Studio",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3OPxCbDYz6k",
                "china_cdn_id": "3OPxCbDYz6k.mp4"
              }
            },
            {
              "id": 325027,
              "key": "627f6dce-2df9-4ffa-80b3-c5b225e61a8f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## When is Lint run?\n\nLint isn't run every time you build. The default build task in Android Studio is `assembleDebug` which compiles and packages an APK to send to a device or emulator.  The `build` task runs lint and will halt the build process if there are linter errors. Gradle can keep track of which tasks have unchanged source code so if you like to build everything from the command-line, you could execute :\n\n    gradle build && gradle installDebug\n\nGradle will first attempt to build the project, run lint, and if both of those finish without errors, it will proceed with trying to install on a device.\n\n\nHopefully you can see how Lint makes your code better. It's good practice to address all the warnings and errors that lint finds. Though all of them won't prevent a successful project submission, they will make you more mindful of the code you are producing and how to avoid potential problems.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 197273,
          "key": "6ff31ae7-3f6b-4866-9b3f-764336cab860",
          "title": "Submission and Evaluation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6ff31ae7-3f6b-4866-9b3f-764336cab860",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197274,
              "key": "08d4fbdb-b4db-43a2-9982-06ea554dba10",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Submission and Evaluation\n\nYour project will be evaluated by a Udacity Code Reviewer according to <a href=\"https://review.udacity.com/#!/rubrics/66/view\" target=\"_blank\">this rubric</a> . Be sure to review it thoroughly before you submit. All criteria must \"meet specifications\" in order to pass.\n\n**Note**:  Please make sure you **clean** your project before creating a zip file or pushing code to a GitHub repository. You can clean your project by following the instructions given in **[this](https://d17h27t6h515a5.cloudfront.net/topher/2016/June/5769c116_1000-files-tutorial/1000-files-tutorial.pdf)** link.\n\nIf you are using GitHub to host your projects, please make sure the code you want to submit for review is in the **master** branch of your repository.\n\n**IMPORTANT: If you're submitting via a public Github repository, please make sure any external API key that you utilize, has been removed from your code.**  It's highly unsafe (and often breaks the Terms of Service) to include API keys in public repos, so you need to remove yours. You can add a note in a README file where a reviewer should go to insert their API key. Reviewers have been trained to expect this situation.\n\n**IMPORTANT: Make sure not to forget to move all the hardcoded Strings in your project to the strings.xml file. If you are unsure how to do this, see [this documentation](https://developer.android.com/distribute/best-practices/launch/localization-checklist#manage-strings).**\n\nDue to the high volume of submissions, the turnaround for your project can take up to a week.\n\nEach Android project will be reviewed against the<a href=\"http://udacity.github.io/android-nanodegree-guidelines/core.html\" target=\"_blank\"> Common Project Requirements</a>, in addition to its project-specific rubric.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}