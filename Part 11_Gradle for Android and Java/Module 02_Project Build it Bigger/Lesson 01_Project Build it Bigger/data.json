{
  "data": {
    "lesson": {
      "id": 650599,
      "key": "a99bbdcb-da71-4b09-bc5d-feb1a51ac334",
      "title": "Project: Build it Bigger",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Build and test a joke telling app with a free ad-supported version and a paid version. As a bonus, deploy a Google Cloud Messaging backend to supply the jokes.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": null,
      "project": {
        "key": "587aba11-5160-41f3-aea9-0ebc46a33a38",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 20160,
        "semantic_type": "Project",
        "title": "Build It Bigger",
        "description": "In this project, you will use Gradle to build a joke-telling app, factoring functionality into libraries and flavors to keep the build simple. You'll also configure a Google Cloud Endpoints development server to supply the jokes.\n\n# Project Rubric\n\nYour project will be evaluated by a Udacity Code Reviewer according to <a href=\"https://review.udacity.com/#!/projects/4295208853/rubric\" target=\"_blank\">this rubric</a>.\n\nA summary of the rubric is provided below.\n\n### Required Components\n\n* Project contains a Java library for supplying jokes\n* Project contains an Android library with an activity that displays jokes passed to it as intent extras.\n* Project contains a Google Cloud Endpoints module that supplies jokes from the Java library. Project loads jokes from GCE module via an async task. Note that this GCE module doesn't need to be deployed to a server. Local testing works fine.\n* Project contains connected tests to verify that the async task is indeed loading jokes.\n* Project contains paid/free flavors. The paid flavor has no ads, and no unnecessary dependencies.\n\n### Required Behavior\n\n* App retrieves jokes from Google Cloud Endpoints module and displays them via an Activity from the Android Library.\n\n### Optional Components\n\nOnce you have a functioning project, consider adding more features to test your Gradle and Android skills. Here are a few suggestions:\n\n* Make the free app variant display interstitial ads between the main activity and the joke-displaying activity.\n* Have the app display a loading indicator while the joke is being fetched from the server.\n* Write a Gradle task that starts the GCE dev server, runs all the Android tests, and shuts down the dev server.\n",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2023",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 21137,
          "key": "42882785520923",
          "title": "Welcome to Build It Bigger",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42882785520923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 29489,
              "key": "4288278552",
              "title": "Welcome to Build It Bigger",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Project Overview\nIn this project, you will create an app with multiple flavors that uses\nmultiple libraries and Google Cloud Endpoints. The finished app will consist of four modules:\n\n1. A Java library that provides jokes\n2. A Google Cloud Endpoints\n(GCE) project that serves those jokes\n3. An Android Library containing an\nactivity for displaying jokes \n4. An Android app that fetches jokes from the GCE module and passes them to the Android Library for display\n\n## Why this Project?\n\nAs Android projects grow in complexity, it becomes necessary to customize the behavior of the Gradle build tool, allowing automation of repetitive tasks. Particularly, factoring functionality into libraries and creating product flavors allow for much bigger projects with minimal added complexity.\n\n## What Will I Learn?\n\nYou will learn the role of Gradle in building Android Apps and how to use Gradle to manage apps of increasing complexity. You'll learn to:\n\n* Add free and paid flavors to an app, and set up your build to share code between them\n* Factor reusable functionality into a Java library\n* Factor reusable Android functionality into an Android library\n* Configure a multi-project build to compile your libraries and app\n* Use the Gradle App Engine plugin to deploy a backend\n* Configure an integration test suite that runs against the local App Engine development server",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 94707,
          "key": "43576885390923",
          "title": "Build It Bigger - Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "43576885390923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 130777,
              "key": "4357688539",
              "title": "Build It Bigger - Overview",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Overview\n\nWhen you're done, your multi-project build will look something like this. Proceed to the next slide for specific instructions.",
              "instructor_notes": ""
            },
            {
              "id": 440964,
              "key": "861d990a-5f53-45f3-b3bc-d4bedb610e91",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/October/59f8ff3d_screen-shot-2017-10-31-at-3.54.32-pm/screen-shot-2017-10-31-at-3.54.32-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/861d990a-5f53-45f3-b3bc-d4bedb610e91",
              "caption": "",
              "alt": "",
              "width": 1468,
              "height": 812,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 133247,
          "key": "42732622150923",
          "title": "Build It Bigger - Instructions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42732622150923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 77937,
              "key": "4273262215",
              "title": "Build It Bigger - Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Gradle for Android and Java Final Project\n\nIn this project, you will create an app with multiple flavors that uses\nmultiple libraries and Google Cloud Endpoints. The finished app will consist\nof four modules. A Java library that provides jokes, a Google Cloud Endpoints\n(GCE) project that serves those jokes, an Android Library containing an\nactivity for displaying jokes, and an Android app that fetches jokes from the\nGCE module and passes them to the Android Library for display.\n\n## Why this Project\n\nAs Android projects grow in complexity, it becomes necessary to customize the\nbehavior of the Gradle build tool, allowing automation of repetitive tasks.\nParticularly, factoring functionality into libraries and creating product\nflavors allow for much bigger projects with minimal added complexity.\n\n## What Will I Learn?\n\nYou will learn the role of Gradle in building Android Apps and how to use\nGradle to manage apps of increasing complexity. You'll learn to:\n\n* Add free and paid flavors to an app, and set up your build to share code between them\n* Factor reusable functionality into a Java library\n* Factor reusable Android functionality into an Android library\n* Configure a multi project build to compile your libraries and app\n* Use the Gradle App Engine plugin to deploy a backend\n* Configure an integration test suite that runs against the local App Engine development server\n\n## How Do I Complete this Project?\n\n### Step 0: Starting Point\n\nThis is the starting point for the final project, which is provided to you in\nthe [course repository](https://github.com/udacity/ud867/tree/master/FinalProject). It\ncontains an activity with a banner ad and a button that purports to tell a\njoke, but actually just complains. The banner ad was set up following the\ninstructions here:\n\nhttps://developers.google.com/mobile-ads-sdk/docs/admob/android/quick-start\n\nYou may need to download the Google Repository from the Extras section of the\nAndroid SDK Manager.\n\nYou will also notice a folder called backend in the starter code. \nIt will be used in step 3 below, and you do not need to worry about it for now.\n\nWhen you can build an deploy this starter code to an emulator, you're ready to\nmove on.\n\n### Step 1: Create a Java library\n\nYour first task is to create a Java library that provides jokes. Create a new\nGradle Java project either using the Android Studio wizard, or by hand. Then\nintroduce a project dependency between your app and the new Java Library. If\nyou need review, check out demo 4.01 from the course code.\n\nMake the button display a toast showing a joke retrieved from your Java joke\ntelling library.\n\n### Step 2: Create an Android Library\n\nCreate an Android Library containing an Activity that will display a joke\npassed to it as an intent extra. Wire up project dependencies so that the\nbutton can now pass the joke from the Java Library to the Android Library.\n\nFor review on how to create an Android library, check out demo 4.03. For a\nrefresher on intent extras, check out;\n\nhttp://developer.android.com/guide/components/intents-filters.html\n\n### Step 3: Setup GCE\n\nThis next task will be pretty tricky. Instead of pulling jokes directly from\nour Java library, we'll set up a Google Cloud Endpoints development server,\nand pull our jokes from there. The starter code already includes the GCE module \nin the folder called backend.\n\nBefore going ahead you will need to be able to run a local instance of the GCE \nserver. In order to do that you will have to install the Cloud SDK:\n\nhttps://cloud.google.com/sdk/docs/\n\nOnce installed, you will need to follow the instructions in the Setup Cloud SDK\nsection at:\n\nhttps://cloud.google.com/endpoints/docs/frameworks/java/migrating-android\n\nNote: You do not need to follow the rest of steps in the migration guide, only\nthe Setup Cloud SDK.\n\nStart or stop your local server by using the gradle tasks as shown in the following\nscreenshot:\n\n<img src=\"https://raw.githubusercontent.com/udacity/ud867/master/FinalProject/GCE-server-gradle-tasks.png\" height=\"500\">\n\nOnce your local GCE server is started you should see the following at \n[localhost:8080](http://localhost:8080)\n\n<img src=\"https://raw.githubusercontent.com/GoogleCloudPlatform/gradle-appengine-templates/77e9910911d5412e5efede5fa681ec105a0f02ad/doc/img/devappserver-endpoints.png\">\n\nNow you are ready to continue! \n\nIntroduce a project dependency between your Java library \nand your GCE module, and modify the GCE starter code to pull jokes from your Java library. \nCreate an AsyncTask to retrieve jokes using the template included in these \n[instructions](https://github.com/GoogleCloudPlatform/gradle-appengine-templates/tree/77e9910911d5412e5efede5fa681ec105a0f02ad/HelloEndpoints#2-connecting-your-android-app-to-the-backend). \nMake the button kick off a task to retrieve a joke, \nthen launch the activity from your Android Library to display it.\n\n\n### Step 4: Add Functional Tests\n\nAdd code to test that your Async task successfully retrieves a non-empty\nstring. For a refresher on setting up Android tests, check out demo 4.09.\n\n### Step 5: Add a Paid Flavor\n\nAdd free and paid product flavors to your app. Remove the ad (and any\ndependencies you can) from the paid flavor.\n\n## Optional Tasks\n\nFor extra practice to make your project stand out, complete the following tasks.\n\n### Add Interstitial Ad\n\nFollow these instructions to add an interstitial ad to the free version.\nDisplay the ad after the user hits the button, but before the joke is shown.\n\nhttps://developers.google.com/mobile-ads-sdk/docs/admob/android/interstitial\n\n### Add Loading Indicator\n\nAdd a loading indicator that is shown while the joke is being retrieved and\ndisappears when the joke is ready. The following tutorial is a good place to\nstart:\n\nhttp://www.tutorialspoint.com/android/android_loading_spinner.htm\n\n### Configure Test Task\n\nTo tie it all together, create a Gradle task that:\n\n1. Launches the GCE local development server\n2. Runs all tests\n3. Shuts the server down again",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 197264,
          "key": "d82bb215-ff2f-407d-b11a-298cb870e61c",
          "title": "Submission and Evaluation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d82bb215-ff2f-407d-b11a-298cb870e61c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197265,
              "key": "1f0238dc-73c0-46a7-abe8-5df53f93f694",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Submission and Evaluation\n\nYour project will be evaluated by a Udacity Code Reviewer according to <a href=\"https://review.udacity.com/#!/rubrics/61/view\" target=\"_blank\">this rubric</a> . Be sure to review it thoroughly before you submit. All criteria must \"meet specifications\" in order to pass.\n\n**Note**:  Please make sure you **clean** your project before creating a zip file or pushing code to a GitHub repository. You can clean your project by following <a href=\"https://d17h27t6h515a5.cloudfront.net/topher/2016/June/5769c116_1000-files-tutorial/1000-files-tutorial.pdf\" target=\"_blank\">these instructions</a>.\n\nIf you are using GitHub to host your projects, please make sure the code you want to submit for review is in the **master** branch of your repository.\n\n**IMPORTANT: If you're submitting via a public Github repository, please make sure any external API key that you utilize, has been removed from your code.**  It's highly unsafe (and often breaks the Terms of Service) to include API keys in public repos, so you need to remove yours. You can add a note in a README file where a reviewer should go to insert their API key. Reviewers have been trained to expect this situation.\n\n**IMPORTANT: Make sure not to forget to move all the hardcoded Strings in your project to the strings.xml file. If you are unsure how to do this, revisit <a href=\"https://classroom.udacity.com/courses/ud855/lessons/4299539001/concepts/43103546100923\" target=\"_blank\">this video</a> in Advanced Android Apps.**\n\nDue to the high volume of submissions, the turnaround for your project can take up to a week.\n\nEach Android ND project will be reviewed against the<a href=\"http://udacity.github.io/android-nanodegree-guidelines/core.html\" target=\"_blank\"> Common Project Requirements</a>, in addition to its project-specific rubric.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}